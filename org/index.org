* AI
  @<-:[[[*<2016-02-08%20Mon>][<2016-02-08 Mon>]]
       [[*<2016-08-22 Mon> Machine Learning by Tom Mitchel:][<2016-08-22 Mon> Machine Learning by Tom Mitchel:]]
  ]
  While playing with Gnus, I've recovered an old e-mail from Richard,
	he sent me a few pdf's on machine learning, among which was:
	[[file:~/Documents/Machine%20Learning%20in%20Action.pdf][file:~/Documents/Machine Learning in Action.pdf]]

  [[*Stylistic%20Analysis,%20Bias%20filtering,%20etc][Stylistic Analysis, Bias filtering, etc]]

  Learning AI/Machine Learning/Deep Learning
  http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning/
  http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning-part-2/

  Haskell Machine Learning:
  https://github.com/mikeizbicki/HLearn - Haskell library for machine learning
  https://github.com/mikeizbicki/subhask - a rewrite of Prelude for numerical computing
   

** <2016-06-06 Mon>                                                      :ai:
   Started working on a tic-tac-toe game as suggested by Tom Mitchel's book:
   [[file:~/Documents/tictactoe.kra]]
   [[file:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf]]
   [[docview:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf::25]]
*** DONE : fix the ::25 (page number) to match the excercise page   
* Assembler                                                             :asm:
  <2016-03-31 Thu>
	I started doing some examples from [[file:~/Documents/nasm_unix.pdf][Столяров Ассемблер]]
	[[/home/madjestic/Projects/ASM]]

* b1
  @<-[[[*<2016-07-04%20Mon>%20I%20should%20look%20into%20Repa,%20Looking%20into%20Parsec,%20Leaving%20links%20for%20GLFW%20to%20look%20into%20later%20on%20b1:][<2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:]]]
 	Stock Exchange program, written in Haskell
	[[madjestic/Projects/b1/]]
** DONE : Broken, fix it:
	 [[https://github.com/btmura/b1/issues/5][compile error: Ambiguous occurrence ‘defaultTimeLocale’]]
	 [ 5 of 48] Compiling B1.Data.Price.Google ( src/B1/Data/Price/Google.hs, dist/dist-sandbox-d2346a33/build/b1-chart/b1-chart-tmp/B1/Data/Price/Google.o )
   
	 src/B1/Data/Price/Google.hs:25:29:
	 Ambiguous occurrence ‘defaultTimeLocale’
	 It could refer to either ‘Data.Time.defaultTimeLocale’,
	 imported from ‘Data.Time’ at src/B1/Data/Price/Google.hs:9:1-16
	 (and originally defined in ‘time-1.5.0.1:Data.Time.Format.Locale’)
	 or ‘System.Locale.defaultTimeLocale’,
	 imported from ‘System.Locale’ at src/B1/Data/Price/Google.hs:13:1-20
	 
	 src/B1/Data/Price/Google.hs:98:13:
	 Ambiguous occurrence ‘defaultTimeLocale’
	 It could refer to either ‘Data.Time.defaultTimeLocale’,
	 imported from ‘Data.Time’ at src/B1/Data/Price/Google.hs:9:1-16
	 (and originally defined in ‘time-1.5.0.1:Data.Time.Format.Locale’)
	 or ‘System.Locale.defaultTimeLocale’,
	 imported from ‘System.Locale’ at src/B1/Data/Price/Google.hs:13:1-20
	 cabal: Error: some packages failed to install:
	 b1-0.1 failed during the building phase. The exception was:
	 ExitFailure 1
   
   <2016-03-30 Wed>
   Fixed: https://github.com/btmura/b1/issues/5
* Bash
	an interesting example of "loop over all files in a directory 
	and do stuff to each file:"
	[[file:/usr/local/include/Field3D/relink.sh]]
	[[~/Documents/Bourne_Shell_Scripting.pdf]]
* Bookmarks:
** Programming
*** Haskell
		[[https://github.com/madjestic/mu/tree/master/Projects/Haskell/Junk/heterogenous_lists][finished a small heterogenous collections example.]]
		[2014-11-10 Mon]
		
		[[*edX:%20FP101x][edX]] A course I intend to finish
		Mon Nov 10 22:40:49 CET 2014

		Monads, Monoids, Functors:
		http://learnyouahaskell.com/making-our-own-types-and-typeclasses
		http://learnyouahaskell.com/functors-applicative-functors-and-monoids
		http://learnyouahaskell.com/a-fistful-of-monads

**** FFI
[[http://www.haskell.org/haskellwiki/FFI_cook_book][FFI Cook Book]]
[[http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html][RealWorldHaskell FFI]]
** Emacs
*** Org Mode
**** Links
		 [[http://orgmode.org/manual/Handling-links.html][Handling Links]]
*** Mail Mode :problem::luxury:
		http://www.emacswiki.org/emacs/GnusGmail
		https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org
		https://eschulte.github.io/emacs24-starter-kit/starter-kit-gnus.html
		<2015-12-02 Wed>

		The initial setup was a breeze.
**** TODO [#E]: Set up message filtering
		 Use POPFile at Linux:
		 http://blog.binchen.org/posts/use-popfile-at-linux.html (gnus email antispam and filtering)
		 <2015-12-03 Thu>

		 
*** Jabber Mode :problem::luxury:
		http://www.emacswiki.org/emacs/JabberEl
		<2015-12-02 Wed>
* Books
	[[/home/madjestic/Documents/Physically_Based_Rendering.pdf][Physically Based Rendering]]
	[[/home/madjestic/Documents/Naming_Infinity.pdf][Kolmogorov: "Imena beskonechnosti"
	Naming Infinity]]
	sonin.ru
	Мифы экономики
	[[/home/madjestic/Documents/Freakonomics.djvu][Freakonomics]]	
	libgen.ru - fake DNA

* Cognitive science
	P != NP
	http://en.wikipedia.org/wiki/P_versus_NP_problem

	Vertex Cover problem:
	http://en.wikipedia.org/wiki/Vertex_cover

	Multivariad Revolving algorythmic complexity (book)

	http://fpt.wikidot.com/

	https://www.mturk.com/mturk/welcome

	http://en.wikipedia.org/wiki/Computers_and_Intractability (book on algorithms)

	http://www.amazon.com/Computers-Intractability-NP-Completeness-Mathematical-Sciences/dp/0716710455

	Theory of the mind:
	- How do agents know what other agents know?
	- How do you simulate orders of the mind?

	Prediction building part of the brain is not a result of processing by
	Sensor-Motoric part of the brain.

	Satisfaction of search problem.

	http://www.rageproject.eu/

	Higher-order theory of mind in Tacit Communication Game
	http://www.harmendeweerd.nl/papers/20140908_Tacit_Communication_Game.pdf

** Music and congnition II
	 
	~4% of the population share amusia

	Scale, Contour, interval, Rhythm, Meter (Memory)
	Pitch test

	Dysmusia vs. Dysmelodia

	Information content of a note

	florence foster jenkins (amusic opera singer)

	Bayesuan generative models

	posterior       = likelihood, priority
	                  P(cause|signal)*P(cause)/P(signal)
	P(cause|signal)
	...

	P(M): the likelhood  of individual metres (estimated from a corpus of data)

	

	Melody segmentation:
	
	Unexpected note - high information content, low probability

	On Entropy in Music:
	http://ir.uiowa.edu/cgi/viewcontent.cgi?article=1844&context=etd (p.7)

	https://mitpress.mit.edu/books/platos-camera

	Steven Pinker
	http://www.newrepublic.com/
* Computer Science
  Great Dutch:
  https://en.wikipedia.org/wiki/Edsger_W._Dijkstra - first compiler for ALGOL-60
  Haskellers:
  http://maartenfokkinga.github.io/utwente/
  http://www.cs.uu.nl/staff/doaitse.html
  
* Data Copy solution
  ~150EURO
  https://www.amazon.co.uk/Inateck-Docking-Station-Function-Tool-free/dp/B00LN0GX4I/ref=sr_1_3?ie=UTF8&qid=1464472727&sr=8-3&keywords=HDD+docking+station
  1 a couple of HDD
* Editing a movie:
	(lossless codec)
	ffmpeg -i model.rop_comp1.%04d.png -c:v huffyuv out.avi
	then import and re-export through pitivi
* Emacs tips
  @->[
  [[*###%20EMACS%20TIPS%20###][### EMACS TIPS         ###]]
  [[*Emacs, save point][Emacs, save point]]
  ]
  @<-[]
	‘M-x toggle-truncate-lines’ - turn on long lines warp
	'<C-S-left>' - swap buffers

	'C-x n n' - narrow region/scope
	'C-x n w' - widen region/scope

	(paredit mode)
	selection 1 ( -> (selection)
	... same with [, {

	(selection)	<M-s> -> selection

	(paren-mode)
	<M-S> ( : foo -> (foo)
	M-up    : (foo) -> foo

  (C-c C-x C-i) start a timer (in timer)
	(C-c C-x C-o) end timer (out-timer)
	CLOCK: [2015-11-28 Sat 18:01]--[2015-11-28 Sat 18:03] =>  0:02

  C-c C-j - org goto (jump to a 1st level entry/header, while typing interactively)

  M-x org-sort-entries RET a RET # sort org entries alphabetically (?

  Save Point Position
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Registers.html
   C-x r SPC r   
     Record the position of point and the current buffer in register
   C-x r j r
     Jump to the position and buffer saved in register

  Display inline images
  C-c C-x C-v


** Registers, bookmarks and desktop
	 C-x r w <register> to store a window configuration in a register
	 C-x r j <register> (where <register> is a single character) to jump back to a register.
	 http://stackoverflow.com/questions/2572950/preserve-window-layout-in-emacs
	 
	 https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html
	 http://www.gnu.org/savannah-checkouts/gnu/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
	 https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html#Bookmarks
	 https://github.com/ffevotte/desktop-plus
** tables
| r | 0/1   | 0  | 1  | 0-1 | rnd | SBR | SBF | ABR | ABF |
|---+-------+----+----+-----+-----+-----+-----+-----+-----|
| 1 | 0/1   | -  | 1  | 0:- | 0:- | 0:- | 0:- | 0:- | 0:- |
| 0 | 1/1   | 1  | -  | 1:- | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 |
| 0 | 2/1   | 1  | -  | 0:1 | 1:- | 1:- | 1:- | 1:- | 1:- |
| 1 | 2/2   | -  | 1  | 1:1 | 0:- | 1:1 | 1:1 | 1:1 | 1:1 |
| 1 | 2/3   | -  | 1  | 0:- | 0:- | 1:1 | 0:- | 1:1 | 0:- |
| 0 | 3/3   | 1  | -  | 1:- | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 |
| 1 | 3/4   | -  | 1  | 0:- | 1:1 | 0:- | 1:1 | 1:1 | 1:1 |
| 0 | 4/4   | 1  | -  | 1:- | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 |
| 1 | 4/5   | -  | 1  | 0:- | 1:1 | 1:1 | 1:1 | 1:1 | 1:1 |
| 1 | 4/6   | -  | 1  | 1:1 | 0:1 | 1:1 | 0:- | 0:- | 0:- |
| 0 | 5/6   | 1  | -  | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 |
| 0 | 6/6   | 1  | -  | 1:- | 0:1 | 1:- | 1:- | 0:1 | 0:1 |
| 0 | 7/6   | 1  | -  | 0:1 | 0:1 | 1:- | 0:1 | 0:1 | 1:- |
| 1 | 7/7   | -  | 1  | 1:1 | 0:- | 1:1 | 1:1 | 1:1 | 1:1 |
| 0 | 8/7   | 1  | -  | 0:1 | 0:1 | 1:- | 0:1 | 0:1 | 0:1 |
| 1 | 8/8   | -  | 1  | 1:1 | 1:1 | 1:1 | 1:1 | 1:1 | 1:1 |
| 1 | 8/9   | -  | 1  | 0:- | 1:1 | 1:1 | 0:- | 0:- | 0:- |
| 1 | 8/10  | -  | 1  | 1:1 | 1:1 | 0:- | 0:- | 0:- | 0:- |
| 1 | 8/11  | -  | 1  | 0:- | 0:- | 0:- | 0:- | 0:- | 0:- |
| 0 | 9/11  | 1  | -  | 1:- | 1:- | 0:1 | 0:1 | 0:1 | 0:1 |
| 0 | 10/11 | 1  | -  | 0:1 | 0:1 | 1:- | 1:- | 0:1 | 0:1 |
| 1 | 10/12 | -  | 1  | 1:1 | 0:- | 1:1 | 1:1 | 0:- | 0:- |
| 1 | 10/13 | -  | 1  | 0:- | 0:- | 1:1 | 0:- | 0:- | 0:- |
| 0 | 11/13 | 1  | -  | 1:- | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 |
| 1 | 11/14 | -  | 1  | 0:- | 0:- | 0:- | 1:1 | 0:- | 0:- |
| 1 | 11/15 | -  | 1  | 1:1 | 1:1 | 1:1 | 0:- | 0:- | 0:- |
| 0 | 12/15 | 1  | -  | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 | 0:1 |
| 0 | 13/15 | 1  | -  | 1:- | 1:- | 1:- | 1:- | 0:1 | 0:1 |
| 0 | 14/15 | 1  | -  | 0:1 | 0:1 | 1:- | 1:- | 0:1 | 0:1 |
|   |       | 14 | 15 |  14 |  18 |  17 |  16 |  19 |  17 |
#+TBLFM: 
  M-x table-insert - create table
  http://orgmode.org/manual/Built_002din-table-editor.html
* Emacs Calendar: cfw-calendar
  http://blog.idorobots.org/entries/you-earned-15-xp-in-getting-things-done_.html#preview-more - gamification, it turned out to be not so great.
  I think a better idea would be to count entries by date and accumulate days per tag, hence giving an overall score.
  TODOs do not need a score, that's a stupid idea.
  http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html
  http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html
  https://github.com/kiwanami/emacs-calfw
  https://www.emacswiki.org/emacs/CalendarMode
  https://www.emacswiki.org/emacs/DiaryMode

  M-x load-calendar
  M-x cfw:open-org-calendar
  . - go to today: https://www.gnu.org/software/emacs/manual/html_node/emacs/Specified-Dates.html

  https://www.gnu.org/software/emacs/manual/html_node/emacs/Diary.html (dates format)

  cfw-calendar https://github.com/kiwanami/eWmacs-calfw
  # TIPS:
  r - refresh view, redraw cells (also re-scale to fit the window)
  
* Entropy
** Machine Learning
   @<-[
   ]
	 http://www.cs.cmu.edu/~tom/mlbook.html	 

	 [[file:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf]]
	 "...or personal software assistants learning the evolving interests of their users in order to highlight especially relevant stories from the online morning newspaper."

	 Definition: A computer program is said to learn from experience E with respect
	 to some class of tasks T and performance measure P, if its performance at tasks in
	 T, as measured by P, improves with experience E.

	 three features: the class of tasks, the measure of performance to be improved, and
	 the source of experience.

	  a database system that allows users to update data entries

		"learning" -  the class of programs that improve through experience. 

		problem of credit assignment, or determining the degree to which each move in
		the sequence deserves credit or blame for the final outcome. 

		The first design choice we face is to choose the type of training experience from
		which our system will learn.
		A second important attribute of the training experience is the degree to which
		the learner controls the sequence of training examples. 
		A third important attribute of the training experience is how well it repre-
		sents the distribution of examples over which the final system performance P must
		be measured.

		most current theory of machine learning rests on the crucial assumption that
		the distribution of training examples is identical to the distribution of test ex-
		amples.

		On the other hand, the more expressive the representation, the more training data
		the program will require in order to choose among the alternative hypotheses it
		can represent

		 the approach of iteratively estimating training values based on estimates of
		 successor state values can be proven to converge toward perfect estimates of V_train

		 performance system, critic; generalizer, and experiment generator. Many machine learning systems can-be usefully characterized in 

** Database engines (SQL/NoSQL)
	 https://www.digitalocean.com/community/tutorials/understanding-sql-and-nosql-databases-and-different-database-models
	 https://www.digitalocean.com/community/tutorials/a-comparison-of-nosql-database-management-systems-and-models
	 https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems
	 <2016-01-04 Mon>
	 Finished reading: apparently SQLite is the best choice for me:
	 Some extra reading on the topic:
	 http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/
	 <2016-01-11 Mon>
*** TODO [#E] : SQLite tutorial
		http://www.tutorialspoint.com/sqlite/
		<2016-01-10 Sun>
   [[*<2016-05-09%20Mon>][<2016-05-09 Mon>]]
   1) rendering a circle with an outline:
      - render a circle of a radius r
      - render a circle with a snaller radius on top of it.
        the result should look like a circle with an outline.
   2) render an object, consisting of 2 circles, connected by a line.
** <2016-09-06 Tue> Thoughts on Entropy:   
   
   It's, basically, a set of linked lists.  It's a tree, where a leaf can
   reference any another part of a tree (a node, a sub-tree).  Hence, 
   it's a fractal, where any such node can be 'evaluated' and replaced
   by such subtree.  The number of such iterations is controlled by a user,
   but should be, preferably, limited to a controllable number of branches.

   Org-mode prototype of this should be able to replace an org-link, linking
   another org-entry, with respective org-entry.  If the newly replaced entry
   contains more links to org-entries, they can be evaluated again.

   The graphical interface should present a visually pleasing picture
   of connected nodes of a tree-like structure with GUI exposing a limited
   necessary functionality.  This can be based on an org file, compatible
   with emacs org-mode.  I.o.w. a GUI is a front-end, providing extra
   visualisation features, which org-mode lacks, but org-mode remains
   a back-end and a prototyping engine.


   The initial (org-mode) prototype can be achieved with a parser, which
   parses the current org-mode file and replaces org-links with respective
   entries and saves the file in read-only mode, saves a copy of the original
   file.  The user then needs to revert the buffer to reflect the new changes.

   Afterwords the original needs to be restored.
   
   This will be a functinal equivalent of the solution.

* FRP
  @->[[[*FRP][FRP]]
      [[*<2016-05-19%20Thu>][<2016-05-19 Thu>]]
      [[*<2016-06-12%20Sun>][<2016-06-12 Sun>]]
  ]
     I ended up with OpenGL animation 'sort of working' - buffer update is busted and I should attempt to 
   follow Jekor's instructions more closely, that is use OpenGL building blocks from cuboid first and then
   refactor it to use NGL
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor.blinks_sort_of_works]]
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]

    Jekor, Yampa:
    https://youtu.be/-IpE0CyHK7Q?t=425 - Jekor's yampa tutorial part 1
    [[file:~/Documents/FRP%20(Haskell_Yampa)%20with%20the%20game%20Cuboid%20(Part%201)%20-%20Episode%209--IpE0CyHK7Q.mkv][file:~/Documents/FRP (Haskell_Yampa) with the game Cuboid (Part 1) - Episode 9--IpE0CyHK7Q.mkv]]

    https://youtu.be/T3xXebIr8AM?t=980 - Jekor's yampa tutorial part 2
    [[file:~/Documents/FRP%20(Haskell_Yampa)%20and%20OpenGL%20with%20Cuboid%20(Part%202)%20-%20Episode%2010-T3xXebIr8AM.mkv][file:~/Documents/FRP (Haskell_Yampa) and OpenGL with Cuboid (Part 2) - Episode 10-T3xXebIr8AM.mkv]]
    :: stopped at 00:15:19
    Yampy Cube:
    https://youtu.be/T7XwTolu9YI?t=2506

    [[file:~/Projects/Haskell/yampaTutorial/yampa.pdf]]

** <2016-06-25 Sat>
    stopped watching at 00:15:19
    [[file:~/Documents/FRP%20(Haskell_Yampa)%20and%20OpenGL%20with%20Cuboid%20(Part%202)%20-%20Episode%2010-T3xXebIr8AM.mkv][file:~/Documents/FRP (Haskell_Yampa) and OpenGL with Cuboid (Part 2) - Episode 10-T3xXebIr8AM.mkv]]

    It's working, but need to make it work with NGL now

* Godot Engine
** Animated Ocean surface:
	 Something along the lines with:
	 program a new object in C++, sample verted positions..:
	 [[https://github.com/okamstudio/godot/wiki/advanced]]
	 [[https://github.com/okamstudio/godot/wiki/class_mesh]]
* HaskellBook
  @<-[[[*<2016-07-23%20Sat>%20Theory%20of%20Perception:%20The%20theory%20of%20Approximation%20Spaces,%20and%20Rough%20Sets%3B%20Parser%20Combinators][<2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators]]
     ]
  [[file:~/Documents/haskell-programming-0.11.2-screen.pdf][HaskellBook]]
     
* Haskell tips																											:haskell:
** Commenting code:
  {-| @Event t a@ represents a stream of events as they occur in time.
Semantically, you can think of @Event t a@ as an infinite list of values
that are tagged with their corresponding time of occurence,

> type Event t a = [(Time,a)]
-}

this code should be shown in haddock

** Comments with shm:
	 M-; # comment text region
	 (with commented region selected) M-; # uncomment text region
** Tags:
	 to generate tags use:
	 ~/bin/tags
*** hothasktags
find . | egrep '\.hs$' | xargs hothasktags > tags

** Executable size
[[http://stackoverflow.com/questions/6115459/small-haskell-program-compiled-with-ghc-into-huge-binary][Don Stuart on stack exchange]]

** a working GLFW/reactive-banana example?
   stack overflow question
** automatically add a type signature
   C-u C-c C-t
** flymake-compile
   C-c b
* Haskell Tutorial
  @->[[[file:~/Projects/Haskell/haskell-tutorial][haskell-tutorial]]]
** <2016-05-23 Mon>
  https://en.wikibooks.org/wiki/Haskell/Getting_set_up
  [[file:~/Projects/Haskell/haskell-tutorial/Lists_and_tuples/Main.hs]]
* Houdini
	/home/madjestic/Projects/Houdini/Fractals/model.hipnc
	- fractals
	- line intersection

		[2015-10-27 Tue]
		Continue reading about VRAY procedural:
		http://www.peterclaes.be/blog/?tag=vrayprocedural
* Ocean Effect
** IN-PROGRESS [#A] : Create Ocean effect in Houdini
   @<->[[[*<2016-09-04 Sun> Houdini Ocean, CmiVFX][<2016-09-04 Sun> Houdini Ocean, CmiVFX]]
   ]
*** Study Materials   
    [[file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids][file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids]]
    [[file:~/Documents/cmiVFX%20-%20Houdini%20Fluid%20Effects%20For%20TDs][file:~/Documents/cmiVFX - Houdini Fluid Effects For TDs]]
    [[file:~/Documents/Digital%20Tutors%20-%20Introduction%20to%20Fluid%20Simulations%20in%20Houdini][file:~/Documents/Digital Tutors - Introduction to Fluid Simulations in Houdini]]
    [[file:~/Documents/Introduction%20to%20Fluid%20Mechanics.pdf][file:~/Documents/Introduction to Fluid Mechanics.pdf]]
    
*** Work Materials
   /home/madjestic/Projects/Houdini/Ocean/initial.hipnc
   [[file:~/Projects/Houdini/Ocean][file:~/Projects/Houdini/Ocean]]

* How to use Journal?

** Basics

M-return       | to start a new entry |
M-right/M-left | to change the depthe of insertion |
C-u M-! date   | to insert date |

*** Haskell
		[[*Haskell%20tips][Haskell tips]]
** New Deep Entry

** TODOs

	 S-right/S-left to change the status

	 C-c . to insert timestamp

** List and markup
  1 one
  1 two
*bold*
/italic/
=code=

** Links [[*Links][*]]
   C-c l     (org-store-link)       | to store link to current location
   C-c C-L to store the link        |
   C-c C-l to inser the link        |
   C-c C-l on existin link to edit  |
   [[http://orgmode.org/manual/Handling-links.html][on_Links]]
   [[http://orgmode.org/manual/External-links.html][gentoo]]
   [[docview:~/Downloads/Abbelian_Categories.pdf::100][PDF]]
	 [[docview:~/Projects/gmsg/basic_des/basic.pdf::1][open_pdf with docview]]
	 S-enter create a symlink to a current file in dired
* iptables
	https://wiki.archlinux.org/index.php/Iptables
	https://wiki.gentoo.org/wiki/Iptables#IPv6.5B2.5D.5B.E2.80.93_1.5D
	http://www.howtogeek.com/177621/the-beginners-guide-to-iptables-the-linux-firewall/

	quick search shows that iptables requires to set up the rules for each connection
	individually, which seems tedious.  https://github.com/themighty1/lpfw seems to 
	address that, however it seems to support IPv4 only.... investigate further.
* IRC
	IRCnet Server : open.ircnet.net

* Kappa Quick Notes
	Quick notes:

** ### VIM TIPS           ###
   
1) <Ctrl>+l to switch off highlights in vim
2) ds" - to remove "" around a word
3) \\cc   - comment out
3.5) \\cu - uncomment
4) cs]} - surround with {}
5) :%s/foo/bar/g - exchange all instances of foo with bar
6) ctrl+R - redo
   
2) Start ghci with gloss, so that it does not hang:
ghci -fno-ghci-sandbox 

** ### SYSTEM MAINTENANCE ###

3) UPDATE PORTAGE:
Emerge --sync
emerge --update --deep --with-bdeps=y --newuse world
emerge --update --deep --newuse world
# delete unused dependencies:
emerge --depclean 
# rebuild missing dependencies
# revdep-rebuild
revdep-rebuild -ip

# timer/date update
nu madjestic # hwclock --set --date="12/21/2015 19:23:00"
nu madjestic # hwclock --hctosys --localtime

# Backup using dd's
dd if=/dev/sda of=/dev/sdb bs=4096 conv=noerror,sync

** ### Kernel Upgrade     ###
   # copy old config

	 make oldconfig
	 make modules_prepare
	 make && make modules_install
	 cp ./arch/x86/boot/bzImage /boot/kernel-3.10.7-gentoo
	 eselect kernel list
	 eselect kernel set 1
	 grub2-mkconfig -o /boot/grub/grub.cfg

** ### EMACS TIPS         ###
   @<->[
   [[*Emacs%20tips][Emacs tips]]
   ]
   # turn off line-wrapping:
   M-x toggle-truncate-linesd
   
   # break long lines automatic
   M-x auto-fill-mode

** ### MISC               ###
4) Find out your own IP:
wget -q -O - checkip.dyndns.org|sed -e 's/.*Current IP Address: //' -e 's/<.*$//'
5)check running services:
rc-status
6)make ghc keep intermediary files: it will create (won't delete technically) /tmp/ghc${pid} with intermediate files
ghc -keep-tmp-files foo.hs

** ### PYTHON             ###
python -m cProfile foo.py

** ### iptables           ###
/etc/init.d/iptables 
/etc/conf.d/iptables

** ### GIT                ###
http://git-scm.com/book/en/Git-on-the-Server-Hosted-Git

# add all files in 
git add ./Projects
# commit added files
git commit -a
# write the changes
git push

# list latest commits:
git log | head
# commit aed9a0bd3e6ce9168af728991ae85a754a25573a
# Author: madjestic <madjestic13@gmail.com>
# Date:   Mon Dec 28 01:29:18 2015 +0100

#     adding things before breaking things

# commit 3a7658b872396f377ac6473f2c827bff0e0d7160
# Author: madjestic <madjestic13@gmail.com>
# Date:   Tue Dec 15 09:37:05 2015 +0100

# list files in a commit:
git ls-tree --name-only aed9a0bd3e6ce9168af728991ae85a754a25573a
<2015-12-28 Mon>

# syncing a fork:
[[https://help.github.com/articles/syncing-a-fork/][Syncing a fork]]

# UnrealEngine4 
[[https://github.com/EpicGames/UnrealEngine/blob/promoted/Engine/Build/BatchFiles/Linux/README.md]]

** ### XMONAD             ###
# application fast start
# WINDOWS button is the one with the MSWindows logo on it
WINDOWS-p

** ### EMACS              ###
*** ## CPP
		# Enable semantic auto-complete (?)
		semantic-complete-self-insert
		# Browses the local document with your browser. On a module import line, the document of the module is browsed. On a function or type, its document is browsed.
		M-C-d 
		# Envoke help on a topic:
		C-h f iedit-mode <RET>
		# Assigning keys
		(global-set-key (kbd "C-c a") 'doodlebug)
		# not sure what it is but may be useful:
		(lookup-key (current-global-map) (kbd "C-c a"))
		# Turn on/off line breaks:
		(toggle-truncate-lines)

		# A Backup Script with rsnapshot
		#!/bin/sh
		#
		#echo "### RSNAPSHOT DAILY ###"
		#mount /mnt/backup && rsnapshot -c /etc/rsnapshot.d/daily.conf daily || echo "Backup failure"
		#umount /mnt/backup
		#echo
		qmake -o Makefile triangle.pro

** ### STEAM              ###
	 MESA_GL_VERSION_OVERRIDE=4.0 MESA_GLSL_VERSION_OVERRIDE=400 %command%
** ### MISC               ###
	 ffmpeg -i movie.%04d.png -c:v libx264 -r 30 out_x264.avi
* Life Hacks
** Tax-return related papers:
	  Annual Mortgage Statement 
		Jaaropgraaf
		Student Costs
		WOZ
** Delivery Service
	 +31686093284
** Building company (the guy who made a good impression of himself)
   "kenza bouw b.v."
   Vredeweg 5a
   1505 hh zaandam
* Linux Format
  [[file:~/Documents/Linux_Format_March_2016.pdf]]
* mantra
	Houdini Help:
	http://127.0.0.1:48626/render/
	http://127.0.0.1:48626/vex/contexts/shading_contexts

** TODO [#B]:	Investigate Mario's glass shader:
	[[/home/madjestic/Projects/Houdini/Experiment_with_glass/Marios_Shader/trans_test_v1r15_for_post2.hipnc]]
	https://www.boundless.com/physics/textbooks/boundless-physics-textbook/geometric-optics-24/reflection-refraction-and-dispersion-169/dispersion-rainbows-and-prisims-611-6326/
	http://forums.odforce.net/topic/6925-dispersion-bsdf/page-3
	[[/home/madjestic/Projects/Houdini/Experiment_with_glass/Dispersion]] Dispersion glass shader, very interesting prismatic effects
	
	<2016-01-04 Mon>

** tests
	 [[/home/madjestic/Projects/Houdini/Mantra/tests/test_01.hipnc]]
	 A simple sphere, occlusion, GI.

	 [[/home/madjestic/Projects/Houdini/Mantra/tests/test_02.hipnc]]
	 particles shaded as speric volumes
	 
	 [[/home/madjestic/Projects/Houdini/Mantra/tests/test_03.hipnc]]
	 Basic shapes, experiments with shading
	 
** PBR
	 [[/home/madjestic/Documents/pbr.pdf]]
	 Physically Based Rendering
	 <2016-01-05 Tue>
** Wireframe rendering
	 [[/home/madjestic/Projects/Houdini/Render/Wire_Frame_Render/model.hipnc]]
	 <2016-01-05 Tue>
* Markov Chains...
	http://www.dartmouth.edu/~chance/teaching_aids/books_articles/probability_book/Chapter11.pdf
* MARVIN
  Modelling a MARVIN character from HGTG
  [[file:~/Projects/Houdini/MARVE]]
  [[file:~/Projects/Houdini/MARVE/3d-coat/model.3b]]
  [[file:~/Projects/Houdini/MARVE/model.hipnc]]
  [[file:~/.contexts/MARVE]]

* Mathematics																													 :math:
	The Zakon Series on Mathematical Analysis
	[[~/Documents/Mathematics/zakon-basic-a4-one.pdf][Basic Concepts of Mathematics]]
	[[file:~/Documents/Mathematics/multivariable.pdf][Multivariable Calculus by David Guichard]]

** W.S. Jevons
	 [[https://en.wikipedia.org/wiki/William_Stanley_Jevons]]
	 [[https://www.marxists.org/reference/subject/economics/jevons/mathem.htm]]

** MST124: Essential Mathematics 1
** DONE :	[[file:~/Documents/MST124/TMA02/mst124_unit4.pdf][Unit 4]] (textbook)
** DONE :	[[file:~/Documents/MST124/TMA02/TMA_02.pdf][TMA 02]]
** DONE : TMA_03
** DONE : [[https://learn2.open.ac.uk/mod/quiz/attempt.php?attempt%3D965296&page%3D1&scrollpos%3D0#q3][Unit 9 Practice Quiz]]
** DONE : [[https://learn2.open.ac.uk/mod/quiz/attempt.php?attempt%3D965295&page%3D1&scrollpos%3D0#q5][ICMA44]]
** DONE : [[file:~/Documents/MST124/TMA04/mst124_14b_tma04.pdf][TMA_04]]
** MST125: Essential Mathematics 2
	One characteristic of a reflection that distinguishes it from a rotation or a
	translation is that it reverses vertex order.

	An isometry maps any polygon to a polygon of the same size and
	shape. In particular, the vertices of the polygon are mapped to the
	vertices of the image polygon.

	A linear transformation leaves the origin fixed.

	If an implication is true, then its converse is either true or false.

** One-to-one linear transformations
	 Determinant of One-to-one linear transformations does not equal 0.
	 One-to-one linear transformations preserve linearity
	 One-to-one linear transformations map lines to lines

** DONE : p 48

** Principia Mathemtica
	Analysis and Geometry, Theory of agregates (Cantor)
	Symbolic Logic (Peano)
	

** Guerrilla Math Study Group (GMSG)
	 [[https://sites.google.com/site/guerrillamathstudygroup/][google sites link]]
* MIDI :music::synt:
	Ardouro
	BitWig

	[[http://proaudio.tuxfamily.org/wiki/index.php?title%3DRealtime_(RT)_Kernel][http://proaudio.tuxfamily.org/wiki/index.php?title=Realtime_(RT)_Kernel]]
	https://wiki.gentoo.org/wiki/Project:Sound/How_to_Enable_Realtime_for_Multimedia_Applications
	https://packages.gentoo.org/packages/media-plugins/calf

	https://forums.gentoo.org/viewtopic-p-7330590.html?sid=1fa73569fe3439e99b81625808e0f794
	http://gentoostudio.org/?p=maninstall&s=kernel
	http://www.gentoo-wiki.info/Jack

** <2016-05-06 Fri>
   run qjackctl, connect midi devices, link them.
	 <2015-12-27 Sun>
** <2016-05-28 Sat>
   plug in the Keyboard, check if dmesg sees it
   qjackctl
   qsynth

   link the MiniKeystation32 input to qsynth output in qjackctl

   Enjoy!
* NAS
  https://forums.freenas.org/index.php?threads/hardware-recommendations-read-this-first.23069/
** Motherboard
   ~150$
   Supermicro X9s
   http://www.supermicro.com/products/motherboard/Xeon/C202_C204/X9SCM-F.cfm

** CPU
   ~65$
   Pentium G2020 (socket 1155) and G3220 (socket 1150) 
   http://www.amazon.com/Intel-Pentium-Processor-G3220-BX80646G3220/dp/B00EF1G9DW/ref=sr_1_1?s=electronics&ie=UTF8&qid=1409098728&sr=1-1

   ~ 50$
   http://www.ebay.com/sch/i.html?_from=R40&_trksid=m570.l1313&_nkw=LGA-1150+Pentium+G3258&_sacat=0

** Case
   ~100
   Fractal Design R4
   http://www.ebay.com/sch/i.html?_from=R40&_trksid=m570.l1313&_nkw=Fractal+Design+R4&_sacat=0

** RAM
   ~50-100$
   ECC RAM 16GB
* OpenGL notes
	Coordinate Systems, Spaces:
	http://www.songho.ca/opengl/gl_projectionmatrix.html
	http://learnopengl.com/#!Getting-started/Coordinate-Systems

	taking the cross product of the forward vector and our sideways
	vector to produce a third that is orthogonal to both and that represents up with respect to
	the camera.

	[2015-10-13 Tue]
	Continue reading on p.137 - Data structures and buffers.

	glBufferSubData(), glNamedBufferSubData() - map a datastore to a Buffer,
	(defined with  glBufferStorage() glNamedBufferStorage() )

	glMapBuffer(), glMapNamedBuffer() - map an arbitrary memory address to a Buffer.
	glMapBufferRange(), glMapNamedBufferRange()
	
* Parsing
  @<-[[[*<2016-06-19%20Sun>%20Haskell%20parsing,%20regex][<2016-06-19 Sun> Haskell parsing, regex]]
      [[*<2016-06-12%20Sun>%20Haskell%20Parsers][<2016-06-12 Sun> Haskell Parsers]]
      [[*<2016-08-24 Wed> Parsers, Backup, Fixing sink][<2016-08-24 Wed> Parsers, Backup, Fixing sink]]
      [[*Study material:][Study material:]]
      [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
  ]

  @->[
  [[*Tree Parser][Tree Parser]]
  [[*Study material:][Study material:]]
  [[*Work material:][Work material:]]
  ]
  
  http://jakewheat.github.io/intro_to_parsing/
  http://nikobidin.com/arrows-everywhere
  https://github.com/aslatter/parsec
  https://kunigami.wordpress.com/2014/01/21/an-introduction-to-the-parsec-library/
  http://book.realworldhaskell.org/
  http://unbui.lt/#!/post/haskell-parsec-basics
  http://unbui.lt/#!/post/haskell-another-lens-tutorial
  
  https://github.com/ChrisKuklewicz/regex-tdfa
  https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners a parsing tutorial/intro
  
  https://courses.edx.org/courses/DelftX/FP101x/3T2014/courseware/f2b543ac0250428aa0a3f141797b35ae/022f142c0b5d4b4bb9488112c8afc9cc/
  Edx - Functional parsers and monads.

** Haskell GeoParser:  
   [[file:img/parsing_progress_00.png][file:~/org/img/parsing_progress_00.png]]
   - it seems like most basics are covered (short of aeson).
     I should continue with parsing the geo file in one go,
     populating relevant data structure in the process,
     returning the resulting data.
     [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParser.hs]]


** DONE : for a cluster of connected points it id attr, 
	 pick the point with the lowest id

	 (lowest point should have the list with all nodes above)
** Tree Parser
   @->[
   [[*<2016-06-12 Sun> Haskell Parsers][<2016-06-12 Sun> Haskell Parsers]]
   [[*Parsing][Parsing]]
   ]
** IN-PROGRESS [#C] : create a point attribute (String -> Tree)
	 Tree -> Tree of id's -> flatten -> point string attr
  
* Projects
* PVR
	export PVR_PYTHON_PATH="/usr/include/python2.7/"
	scons lib
	scons pylib

	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lboost_python
	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lpython2.6

	[2015-09-22 Tue]
	[[file:~/Projects/pvr/CMakeLists.txt]] works now, submitted to github
	# Compile flags
	...
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pipe -fPIC -fpermissive")
	...

	... however, (~/Projects/pvr/libpvr) 'scons pylib' from 
	https://github.com/pvrbook/pvr still fails:
	Linking    build/linux2/g++/m64/release/python26/_pvr.so
	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lboost_python
	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lpython2.6
	collect2: error: ld returned 1 exit status
	scons: *** [build/linux2/g++/m64/release/python26/_pvr.so] Error 1
	scons: building terminated because of errors.
	
	, finish digging here: [[file:~/Projects/pvr/libpvr/BuildSupport.py]]

	[2015-09-23 Wed]
	compilation issues solved by:
	ln -s ./libboost_python-2.7.so ./libboost_python.so
	ln -s ./libpython2.7.so ./libpython2.6.so

	[2015-09-24 Thu]
	Solved:
	[[https://github.com/pvrbook/pvr/pull/12]] (Build instructions for Gentoo)

	[2015-10-12 Mon]
	~/Projects/pvr_fork@madjestic/pvr/scenes/book/chapter_1 $ python fig_1_1.py
	
* RAID 10 project
** TODO [#E]: Build RAID-10.  Project Ksi:
	 2x500Gb SCI SSD drives as RAID-10: fast IO and reliability, but space is limited to the smallest drive.
** TODO [#E]: Project Omicron:
	 2x1Tb Raid-10?
	 <2015-12-10 Thu>
* Rocket! n-body sim, particles, houdini, Godika
  @<->[
  [[*<2016-03-16 Wed> Gravity, Rocket][<2016-03-16 Wed> Gravity, Rocket]]
  [[*<2016-08-23 Tue> Rocket, Gravity, n-body][<2016-08-23 Tue> Rocket, Gravity, n-body]]
  [[*: Render out a video, same as for n-bodies.][: Render out a video, same as for n-bodies.]]
  ]
	A simple game project: similar to Angry birds, but in space with planets.  A dynamics-based (gravity, gravitational pool of planets).
	<2015-12-04 Fri>

** TODO [#B] : Continue with Gravity/Rocket Houdini project:
** Work Files:  
   [[file:~/Projects/Houdini/Godika]]
   [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc][file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]

* sb7code reading, examples
	OpenGL Super Bible ed.7
	Projects/OpenGL/sb7code/src/book - Makefile works now

	[2015-09-23 Wed]
	hack cpp/emacs environment: http://tuhdo.github.io/c-ide.html
	read on the bible: [[file:~/Documents/Programming/OpenGL/Graham%20Sellers,%20Richard%20S.%20Wright%20Jr.,%20Nicholas%20Haemel%20-%20OpenGL%20SuperBible%20Comprehensive%20Tutorial%20and%20Reference,%207th%20Edition%20-%202015/OpenGL_Bible.pdf][file:~/Documents/Programming/OpenGL/Graham Sellers, Richard S. Wright Jr., Nicholas Haemel - OpenGL SuperBible Comprehensive Tutorial and Reference, 7th Edition - 2015/OpenGL_Bible.pdf]]

	try the ../book code in VS, see if it autocompletes struct APPINFO
	
* Social
  Dmitry-Vladimirovich Novikov, Judge (kamikazedead)
  https://new.vk.com/id224027681 
* Showreeel / Demoreel
	[[/home/madjestic/Projects/Houdini/Mantra/tests]]
	<2016-01-02 Sat>
* SIGGRAPH 2015
** Paper ideas
*** Feature-preserving curve resampling
*** Lindenmayer: Procedurally-assisted LOD generation.
* Study
** M140: Introducing Statistics
*** DONE : TMA02:
*** DONE 26 April 2014
**** DONE : TMA02: Q1: 
Computer Book 1: pp.35-48
surgeons.mtw (box-plotting in Minitab)
**** DONE : TMA02: Q2
***** DONE : Book2 pp.39-47 (on different sampling types)
finished at p.44.
done
Sat Apr 26 16:03:45 CEST 2014


**** DONE : TMA02: Q3
*** DONE : TMA03
*** DONE : [[file:~/Documents/M140/TMA04/m140_tma04.pdf][TMA04]]
*** DONE : [[https://learn2.open.ac.uk/mod/quiz/attempt.php?attempt%3D963365][ICMA43]]

*** DONE : Learn Basic R
   It looks like it's a dead end.
	 
	 Julia is a much stronger alternative.  It's much faster than R, Julia is
	 a propper programmin language, has bindings or interfaces to C++,Python

	 Haskell is a much stronger alternative too.  Obviously.
** edX: FP101x
  @->[
  [[*Parsing][Parsing]]
  ]
	[[https://courses.edx.org/courses/DelftX/FP101x/3T2014/courseware/7c7ec15948b84b1a9c14673bddbcf8aa/9441ebb13fad49dca4dee53107b3ce5a/][Continue with HW]]
	Mon Nov 10 22:38:53 CET 2014
* Stylistic Analysis, Bias filtering, etc
	 http://en.wikipedia.org/wiki/Natural_language_processing
	 http://en.wikipedia.org/wiki/Sentiment_analysis
	 http://www.kaspik.com/ (web sentiment analysis)

	 N.Chomsky: "Three models for the description of language"
	 http://chomsky.info/articles/195609--.pdf

	 http://www.its.caltech.edu/~matilde/GraphGrammarsLing.pdf

	 [[http://www.cs.dartmouth.edu/reports/TR2014-754.pdf][StyleCheck: An Automated Stylistic Analysis Tool (PDF)]]

	 [[file:~/Pictures/Human_Language_Families_ru.png]]

	 [[https://ru.wikipedia.org/wiki/%25D0%25A2%25D0%25B8%25D0%25BF%25D0%25BE%25D0%25BB%25D0%25BE%25D0%25B3%25D0%25B8%25D1%258F_(%25D0%25BB%25D0%25B8%25D0%25BD%25D0%25B3%25D0%25B2%25D0%25B8%25D1%2581%25D1%2582%25D0%25B8%25D0%25BA%25D0%25B0)][Типология (лингвистика)]]

	 [[https://ru.wikipedia.org/wiki/%25D0%2590%25D0%25BA%25D1%2582%25D0%25B8%25D0%25B2%25D0%25BD%25D1%258B%25D0%25B5_%25D1%258F%25D0%25B7%25D1%258B%25D0%25BA%25D0%25B8][Активные языки]]

	 [[https://en.wikipedia.org/wiki/Ferdinand_de_Saussure][Ferdinand de Saussure]]

	 [[https://en.wikipedia.org/wiki/Roman_Jakobson][Roman Jakobson]]

	 [[https://en.wikipedia.org/wiki/Russian_formalism][Russian formalism]]

	 [[https://en.wikipedia.org/wiki/Stylistics_(field_of_study)][Stylistics (field of study)]]

	 [[https://en.wikipedia.org/wiki/Stylistics_(field_of_study)][Stylistics (field of study)]]

	 
*** Related Read:
		http://en.wikipedia.org/wiki/Framework_Programmes_for_Research_and_Technological_Development
		http://en.wikipedia.org/wiki/European_Atomic_Energy_Community
* Tic-Tac-Toe
  @->[[[*AI][AI]]]
  A 'Hello World!' of Machine Learning:
  [[file:~/Documents/tictactoe.kra]]
  
* TODO:
** DONE : Write a make file that can be run like this:
	 make clean
	   - and it will choose from a number of ons
		 [2015-02-17 Tue]
		 - made a clean.sh file that cleans up stuff [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/tutorial10/clean][here]]

** DONE : Experiment with caustics (an example from Houdini Help)
** IN-PROGRESS [#C]: Write a python daemon
	 http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/
	 https://pypi.python.org/pypi/python-daemon/
	 [2015-12-02 Wed]

	 I think I should do it.  Write a daemon that, when receives a numeric argument, increases it by 1 and prints out the result.
	 <2016-01-24 Sun>

   This seems to be a concrete example of creating a python daemon process:
   http://www.gavinj.net/2012/06/building-python-daemon-process.html

   Haskell daemon seems to be easier than in python.  Weird :) :
   https://hackage.haskell.org/package/daemons
   <2016-01-24 Sun>

** DONE : figure out what's up with Nvidia Optimus
	 Still has some minor(?) issues: https://forums.gentoo.org/viewtopic-t-1032214-highlight-.html
	 [2015-11-30 Mon]

	 Bumblebee:
	 http://bumblebee-project.org/
	 troubleshooting:
	 https://github.com/Bumblebee-Project/Bumblebee/wiki/Troubleshooting
	 reporting issues:
	 https://github.com/Bumblebee-Project/Bumblebee/wiki/Reporting-Issues
	 
** DONE : link it here
** DONE : Set up fallout 2 ~/Projects/games/falltergeist: it is missing some files, get them from an official game installation
** DONE : compile latest Unreal Engine
	 [2015-11-30 Mon]
	 tried latest, it fails somewhere during the Setup.sh, reasons unknown, log file does not get produced.

	 https://github.com/EpicGames/UnrealEngine/blob/4.10/Engine/Build/BatchFiles/Linux/README.md
	 git clone https://github.com/EpicGames/UnrealEngine -b 4.10
	 (follow README)

	 Latest version worked
	 <2015-12-11 Fri>

** DONE : set up battery levels color-coding for xmonad
	 <2015-12-04 Fri>
	 <2015-12-07 Mon>
** DONE : Xmonad Fullscrean
	 https://github.com/Nadrieril/xmonad-config/blob/master/xmonad.hs
	 http://stackoverflow.com/questions/20446348/xmonad-toggle-fullscreen-xmobar
	 
** DONE : make (sr-speedbar-open) a shortcut in cpp.el
	 <2016-01-03 Sun>
	 
		[2015-01-12 Mon]
		(OlexP script to start Houdini)
		alias hdk='hdktmp=`pwd`; cd $HFS; source houdini_setup; cd $hdktmp; unset hdkt

	Reading [[file:~/Projects/pbrt-v2][pbrt book]]
	<2016-01-16 Sat>

	Reading on Phyllotaxis in abop
	http://tmdag.com/ptakun/eco_system/makeofplants_en_htm.htm
	<2016-01-16 Sat>
	
	[[/home/madjestic/Projects/Houdini/Fractals/model.hipnc]]
	<2016-01-16 Sat>

	~/.contexts/pbrt  mplay pbrt.exr
	<2016-01-19 Tue>

	what's the name of this theorem:  Given inifinite that the set uf numbders, formed by decimal representation of digits of Pi, there is a subset of P, Pp, 
	that is 'fully mutable'.  By 'fully mutable', I mean that if we form a Ppf, whose members are unique subsets of the length, equal to len(Pp), 
	such that all possible mutations of the original set of len(Pp) are presented and no new members can be added that would not repeat the already
	existing memeber.

	E.g. N  = 12345e



	 len(N) = len( [1,2,3,4,5] ) = 5
	     N1 = 98765
   len(N1)= len( [9,8,7,6,5] ) = 5
	     Pp = 

	The lemma of this is that any decimal number N can be represented as a set of 2 numbers: L, representing the length of N taken as a set of digits and
	number O, representing 'offset' of the offset along Pi and the length of the sequence len (N).
	<2016-01-22 Fri>

	fail, nearly.  It's a case of reordering a 100 (0-99) numbers from 0-9999 numbers.  Thanks to Jad's input.
	<2016-01-22 Fri>

	Satisfaction in solving a problem can be intense, but it is short-lived; 
	our pathos is driven by what we have not yet understood. 
	André Weil, one of the twentieth century’s dominant mathematicians, described this as “achiev[ing] knowledge and indifference at the same time.” 
	We never understand more than a finite amount of the limitlessness of what mathematics potentially offers to the understanding. 

	The mathematical soul, embodied in a historical tradition oriented to a limitless future, 
	can rest secure in the knowledge that its dissatisfaction is guaranteed.

	the essence of mathematics lies in its freedom.  Cantor.
	
	https://www.gridmarkets.com/
	Houdini rendering in the cloud.

  
	<2016-01-23 Sat>

** DONE :	Mathematics Without Apologies:
	stopped at part1: 
	(Controversies among philosophers,
	<2016-01-23 Sat>

  - I ended up ordering a book
    <2016-09-02 Fri>

** IN-PROGRESS [#E]: Create a custom overlay:
   /var/lib/layman/make.conf
   PORTDIR_OVERLAY="
   ...
   /usr/local/portage
   /usr/local/portage/kde
   "
   
	 /usr/local/portage/haskell/yampa

   http://www.astro.ru.nl/~sluys/Public/custom_ebuilds.html
   https://wiki.gentoo.org/wiki/Basic_guide_to_write_Gentoo_Ebuilds
   
** DONE : Make colliding n-bodies sim
** DONE : continue with Mortgage graphing, using VEX
   [[file:~/Desktop/mortgage.hipnc]]

** TODO [#B] : Render out a video, same as for n-bodies.
   @->[[[*Rocket! n-body sim, particles, houdini][Rocket! n-body sim, particles, houdini]]]
   [[file:~/Projects/Houdini/Godika]]
** TODO [#D] : create emacs shortcuts for register-switching: C-0, C-1, .. C-9
* Unreal Engine
	- contacted popcornfx:
		The Linux build is not here for now, but should not be a problem, once we get the plugin stabilized on Win64, we will begin to build for other platform.
	  The PopcornFX Editor is currently only compatible with Windows, but stay in touch...

	urls:
	https://docs.unrealengine.com/latest/INT/GettingStarted/FromUnity/index.html
	https://docs.unrealengine.com/latest/INT/Gameplay/ClassCreation/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Classes/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Functions/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Properties/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Structs/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Interfaces/index.html

** 101
	 export LD_LIBRARY_PATH=.
	 ./UE4Editor ~/Projects/Unreal_Projects/MyProject4/MyProject4.uproject
	 primusrun ./UE4Editor ~/Projects/Unreal_Projects/MyProject/MyProject.uproject -opengl4
* VR
  Virtual Reality
  http://osvr.github.io/contributing/
  http://www.osvr.org/hdk2.html
  http://www.vrdb.com/
  https://github.com/OSVR
* Waterfall
  @<-[
  [[*:%20Set%20up%20water%20shader][: Set up water shader]]
  [[*:%20continue%20working%20on%20waterfall%20example][: continue working on waterfall example]]
  [[*%5B2015-01-12%20Mon%5D][{2015-01-12 Mon}]]
  [[*:%20Investigate%20how%20to%20render%20ocean%20nicely][: Investigate how to render ocean nicely]]
  ]

  links:
  https://rutracker.org/forum/viewtopic.php?t=5114569
  https://rutracker.org/forum/viewtopic.php?t=5079199
  https://rutracker.org/forum/viewtopic.php?t=4257762
  
* Xmonad
** DONE : assign hot-keys for brightness-up/brightness down
** DONE : assign hot-keys for volume up/down
* Yampa
  @->[[[*Yampa'][Yampa']]]
** HNGL

*** on HNGL

>> Fri Dec 20 11:07:18 CET 2013
>> Fri Dec 20 16:58:16 CET 2013
>> Journal #3 (#1 and #2 got lost -_-)

Editable -> Instancable -> Drawabale


Graphics.HNGL.Rendering
Graphics.HNGL.Data



toInstancable :: Editable -> Instancable

toDrawable :: Instancable -> Drawable

draw :: Drawable -> IO ()

toAnimatable :: Drawable -> Animation -> Animatable

data Animation = Time Freq

data Time = Float

data Freq = Float

animate :: Animatable -> IO ()
*** HNGL progress
***** DONE : simplify tutorial10 to only do what it's supposed to do:
	it's supposed to draw a textured square in the simplest way possible.
	
[Sun Dec 22 20:31:19 CET 2013]
>> on HNGL:

managed to do inital HNGL commit with basic modules functioning OK
next thing to do is introducing support for basic shapes instances draw, e.g.:

draw Square pos side
... too tired now, need to switch tasks for a 

[[file:~/Projects/Haskell/OpenGL/Haskell-OpenGL-Tutorial/tutorial04/HNGL][Finished Here]]
<2013-12-27 Fri>



[Thu Jan 16 21:42:27 CET 2014]
>> On FFI
Looking into FFI.  Created Bookmarks on [[*FFI][FFI/Haskell]]

[Wed Jan 22 18:45:13 CET 2014]
Uploaded the preview version of tutorial03 to GitHub
Noticed 2 stars - it looks like someone found code useful

**** DONE : port the code to GLFW -> GLFW-b
[[https://github.com/madjestic/Haskell-OpenGL-Tutorial/issues/2][proposed by listx]]
[[http://hackage.haskell.org/package/GLFW-0.5.2.0/docs/Graphics-UI-GLFW.html][GLFW on Hackage]]
[[http://hackage.haskell.org/package/GLFW-b][GLFW-b on hackage]]
[[http://www.tapdancinggoats.com/opengl-in-haskell-glfw-b-boilerplate.htm][GLFW-b Boilerplate]]
[[http://www.tapdancinggoats.com/haskell-life-repa.htm][Conway's Game of Life with GLFW-b]]

**** DONE : introduce support for vertex colors
[[https://github.com/madjestic/Haskell-OpenGL-Tutorial/issues/3][link to the issue]]

http://www.opengl-tutorial.org/beginners-tutorials/tutorial-1-opening-a-window/][Modern OpenGL tutorial C++/Qt

[[http://nopper.tv/norbert/opengl.html][OpenGL 3 and OpenGL 4 with GLSL]]
[[https://github.com/McNopper/OpenGL]]

[[http://www.swiftless.com/opengl4tuts.html][OpenGL4 Tutorial]]

[[http://openglbook.com/the-book/preface-what-is-opengl/][OpenGL Book]]

[[http://antongerdelan.net/opengl/][Anton's tutorials]]

**** DONE : Vertex2 -> Vertex4
**** DONE : polivariadic createWindow:
createWindow title (sizex, sizey)
createWindow title (sizex, sizey) color
**** DONE : polivariadic intiResources:
initResources vs = ...
initResources cs vs = ...

**** Wed Jan 29 00:35:22 CET 2014 on Rendering.hs, missing square
I eddited the [[~/Projects/Haskell/OpenGL/Haskell-OpenGL-Tutorial/tutorial04/NGL/Rendering.hs][Rendering.hs]] file with intention to introduce a second 
vertex array object to store color data, the code compiles, but the
blue square seems to be missing now - need to investigate the situation.
Too tired now.

> Fixed.

**** DONE : Animation Support
***** DONE : time to take a look into FRP and animation :)
[[file:~/Projects/Haskell/reactive-banana/reactive-banana][reactive-banana source and examples]]
See the project homepage <http://haskell.org/haskellwiki/Reactive-banana>

Thu Apr 24 17:56:30 CEST 2014 [[https://github.com/madjestic/reactive-banana/blob/master/reactive-banana/doc/examples/Counter.hs][Added a Counter example]]
***** DONE : I am in the middle of hooking up FRP to GL calls
			[[https://github.com/cdxr/reactive-banana-glfw][reactive-banana-glfw]] serves as a glue,
			but I yet to figure out how to combine GL calls 
			with the reactive banana event loops
			[[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/tutorial08/Main.hs::--%20|%20I%20probably%20need%20to%20make%20a%20GL%20call%20from%20a%20reactimate%20function%20call.%20Sersious%20refactoring%20pending][Fri May 30 00:32:51 CEST 2014]]

			[[http://hackage.haskell.org/package/reactive-banana-0.8.0.2/docs/Control-Event-Handler.html#t:AddHandler][Read on AddHandlers]]
			[[http://en.wikibooks.org/wiki/Haskell/Concurrency][Read on Concurrency]]
			[[file:~/Projects/Haskell/Junk/GameLoop.hs][GameLoop example]] - maybe some clues from here

			It looks like I will need to call an update event from
			a separate sleeper thread.  It should be connected to 
			reactive-banana event system via addHandlers interface
			Sat Jun  7 18:20:36 CEST 

			The above sounds very similar to:
			[[https://github.com/fumieval/free-game/issues/30]]
			Sat Oct 18 00:26:23 CEST 2014

			

**** DONE : Texture Support
		 [[http://stackoverflow.com/questions/23540558/haskell-opengl-texture-glfw]]
		 [[http://stackoverflow.com/questions/24114767/haskell-opengl-texture-only-average-colour]]
		 [[http://stackoverflow.com/questions/10468845/juicypixels-texture-loading-in-haskell-opengl]]
		 [[https://github.com/fiendfan1/Haskell-OpenGL]]
		 http://eax.me/haskell-opengl-textures/
		 Sat Oct 18 00:26:32 CEST 2014

		 accomplished in tutorial10 thanks to tips from haskell@cafe mail-list

**** IN-PROGRESS [#B] : Make Elegant, Clean-up
		 Sun Oct 26 00:14:41 CEST 2014
		 refactoring Rendering.hs, Shape.hs

		 [2015-02-16 Mon]
		 Made some progress with refactoring stuff:  
		 added a Primitive type-class in Shape module:
		         toDrawable :: Color -> a -> Drawable
						 toPoints   :: a -> Points

						 Color should probably be a Property instead
						 e.g.:
						 Property = Color | Some other property
						 however at the moment it has no value and I don't know better.

		[2015-04-17 Fri]
		tutorial10 - more concise version of tutorial11
		tutorial11 - Typeclasses in NGL.Rendering with some commented 
		             redundant code, that could still be useful
		tutorial12 - has bits and pieces of tutorial 11

***** DONE : create a UV-projection:
			toUV :: Projection -> UV in module Shape.hs

		  The foundation is there, I decided to postpone concrete implementation
			till the need arrives.
***** DONE : Create a boilerplate:
****** DONE : All code on one page:  draw a textured square
       [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Boilerplate]]
******* TODO [#C] : Textured triangle in C++
				CLOCK: [2015-11-30 Mon 19:13]--[2015-11-30 Mon 19:22] =>  0:09
				[[~/.contexts/OpenGL_Bible/src/my_first_spinning_cube]] - seems like a good starting point for a spinning textured triangle
				<2015-12-28 Mon>

******** DONE : De-couple the shader from the main code
				 Make it use an outside shader call, like in 
				[[%20~/Projects/OpenGL/sb7code/src/my_first_textured_torus][ ~/Projects/OpenGL/sb7code/src/my_first_textured_torus]]
				<2015-12-31 Thu>
				
				Finished here:
				[[/home/madjestic/Projects/OpenGL/sb7code/src/my_first_textured_triangle/]]
				<2016-01-01 Fri>

******** TODO [#C] : Change the shader so that it uses a texture
				 <2015-12-31 Thu>
******* DONE : in Haskell			 
        <2016-02-29 Mon>
        Pushed an update to GitHub and sent a blog link to Haskell Planet.
** FRP
   @->[[[file:~/Projects/Haskell/FRP]]]
   @<-[[[*%5B%5B*FRP%5D%5BFRP%5D%5D][FRP]]
       [[*<2016-06-12%20Sun>][<2016-06-12 Sun>]]
   ]
*** Reactive Banana
[[*:%20Animation%20Support...][Reactive Banana Animation Support...]]
**** TODO [#D] Reading: [[http://johnlato.blogspot.nl/2011/04/thoughts-on-frp.html][Sound and Software]]
**** TODO [#D] Reading: [[http://www.kazachonak.com/2012/06/reactive-programming.html][Reactive Programming]]
**** TODO [#D] Reading: [[http://conal.net/fran/tutorial.htm][Fran Tutorial (Connal Elliot)]]
**** DONE Watch  : [[http://vimeo.com/6686570][Push-pull Functional Reactive Programming]]
Thu Apr 24 17:56:30 CEST 2014 [[https://github.com/madjestic/reactive-banana/blob/master/reactive-banana/doc/examples/Counter.hs][Added a Counter example]]
*** NetWire
[[http://hackage.haskell.org/package/netwire-4.0.5/docs/Control-Wire.html][Control.Wire]]
[[http://hub.darcs.net/ertes/netwire/browse/README.md][Netwire on Darcs]]
[[http://www.haskell.org/haskellwiki/Netwire][Netwire on Haskell Wiki]]
[[https://github.com/MaxDaten/netwire-examples][Netwire Examples on GitHub]]

*** Yampa'
    Jekor, Yampa:
    https://youtu.be/-IpE0CyHK7Q?t=425 - Jekor's yampa tutorial part 1
    https://youtu.be/T3xXebIr8AM?t=980 - Jekor's yampa tutorial part 2
    Yampy Cube: (flappy bird clone in Haskell)
    https://youtu.be/T7XwTolu9YI?t=2506

    [[file:~/Projects/Haskell/yampaTutorial/yampa.pdf]]

*** Yampa Tutorial (a pdf tutorial from git)
    [[file:~/Projects/Haskell/yampaTutorial/yampa.pdf]]
** on Emacs

*** DONE Learn to use Org-mode
**** DONE : Learno how to do cumulative timer
		 CLOCK: [2015-11-30 Mon 19:22]
		 0:00:00 0:00:04 0:00:11 (C-x .) insert relative timer at point
		 - 0:00:30 :: one
		 - 0:00:39 :: two (C-x -) relative timer with a description.

		 http://orgmode.org/manual/The-clock-table.html#The-clock-table
		 Time total can be computed in emacs/excel-sheet like manner
		 [2015-12-01 Tue]

**** DONE : Learn how to work with multiple TODO files
		 http://orgmode.org/manual/Agenda-views.html#Agenda-views
		 [2015-12-01 Tue]

		 http://orgmode.org/manual/Agenda-files.html#Agenda-files
		 (C-c [ ) Add current file to the list of agenda files. 
		 (C-c ] ) Remove current file from the list of agenda files. 
*** DONE Learn how to open pdfs at a given page with Okular
    
    [[http://stackoverflow.com/questions/20792659/how-do-i-make-org-mode-open-pdf-files-in-okulus-at-page-nnn][stackoverflow_topi]]c
    <2013-12-27 Fri>
    But the best is to use docview: [[docview:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf::25]] - opens a pdf on given page in emacs.  Win!

** on Blogs
*** TurtlesTurtlesTurtles
**** DONE Update the content, according to the latest state of NGL tutorial
**** DONE : Write a prime number calculator.
*** PuurBliss.NL
**** DONE : fix glyphicons:
		 It turns out that the < > glyphs are not being displayed correctly.
**** TODO [#D] : work on logo
		 [[file:~/.contexts/Puurbliss/Pictures/Puurbliss]]
		 
** Reading
*** DONE Prime Obsession
** Houdini
*** DONE : Hook up a PS3 controller to mu
		It's working.
		Event stream can be read from [[file:/dev/input/js0]]
		Fri May 30 00:31:18 CEST 2014
*** DONE : Figure out how to read input: :python: :ps3: :houdini:  :joystick:
		http://scaryreasoner.wordpress.com/2008/02/22/programming-joysticks-with-linux/
		https://www.kernel.org/doc/Documentation/input/joystick-api.txt
		http://stackoverflow.com/questions/16032982/getting-live-info-from-dev-input

		[2015-10-25 Sun]
		As a temporary measure: https://github.com/ArthurYidi/Houdini-Joystick

		Sony PLAYSTATION(R)3 Controller (/dev/input/js0)
    
    <2016-02-08 Mon>
    In order to use:
    houdini joystick-examples.hip
    python joystick.py
    Use Chop Pipe In to read the joystick data.
    

*** DONE : Waves tutorial sidefx
*** DONE : Waves tutorial cmivfx 1
*** DONE : Waves tutorial cmivfx 2
*** DONE : Investigate how to render ocean nicely
    (cmivfx tutorial)
    https://rutracker.org/forum/viewtopic.php?t=5114569
    https://rutracker.org/forum/viewtopic.php?t=5079199
    https://rutracker.org/forum/viewtopic.php?t=4257762
*** TODO [#B] : Work on a small example of gushing water effect :houdini::effect::vfx:
		<2015-12-02 Wed>

		/home/madjestic/Projects/Houdini/Fluids/Fluid_Test_00
		<2015-12-03 Thu>

*** TODO [#B] : Set up water shader
		[[https://www.sidefx.com/index.php?option%3Dcom_content&task%3Dview&id%3D3168&Itemid%3D412][H15 | FLIP WORKFLOW ENHANCEMENTS]]
		[[https://vimeo.com/41314793][Houdini Mantra | Waterfall]]
		[[http://forums.odforce.net/topic/20467-ocean-area-light-highlights-problem/?hl%3D%252Bocean%2B%252Bwhite%2B%252Bspots%2B%252Bpbr#entry122295][Ocean Area light highlights problem]]

    [[file:~/Documents/cmiVFX%20-%20Houdini%20Advanced%20FLIP%20Fluid%20Systems][file:~/Documents/cmiVFX - Houdini Advanced FLIP Fluid Systems]]
    [[file:~/Documents/cmiVFX%20-%20Houdini%20Fluid%20Effects%20For%20TDs][file:~/Documents/cmiVFX - Houdini Fluid Effects For TDs]]
		
		
**** TODO [#B] : Simulation and modelling
** General
*** DONE : Read on setting up cron Jobs [[http://stackoverflow.com/questions/1603109/how-to-make-a-python-script-run-like-a-service-or-daemon-in-linux][{Stack Overflow}]]
*** DONE : Set up a TODO directory with all active TODO's
		[[*TODO:][here]]

** Genome
	 [[http://en.wikipedia.org/wiki/Human_Genome_Project][Human Genome Project]] on wiki
	 [[http://en.wikipedia.org/wiki/Ploidy#Haploid_and_monoploid][Ploidy]] on wiki
	 [[http://en.wikipedia.org/wiki/Cytokinesis][Cytokinesis]] on wiki
	 [[http://en.wikipedia.org/wiki/Fission_(biology)][Binary Fission]] on wiki
** GTK+
	 [[http://www.micahcarrick.com/gtk-glade-tutorial-part-1.html]]


* Progress Matrix
|------------------+---------+------+---------+-------+--------+------+-----+-----+--------+-------+---------+-------------+-------+-------+---------+-------|
| Date             | Haskell | Prog | Houdini | Emacs | OpenGL | Math |  CG |  AI | Tinker | Games | Finance | Maintenance | House | Skate | History | Dutch |
| 170              |      55 |   24 |      18 |    17 |     10 |    9 |   7 |   6 |      6 |     6 |       4 |           5 |     3 |     2 |       2 |     1 |
| %                |    32.4 | 14.1 |    10.6 |  10.0 |    5.9 |  5.3 | 4.1 | 3.5 |    3.5 |   3.5 |     2.4 |         2.9 |   1.8 |   1.2 |     1.2 |   0.6 |
|------------------+---------+------+---------+-------+--------+------+-----+-----+--------+-------+---------+-------------+-------+-------+---------+-------|
| [[*%5B2015-01-12%20Mon%5D][{2015-01-12 Mon}]] |       1 |    1 |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*%5B2015-02-01%20Sun%5D][{2015-02-01 Sun}]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*%5B2015-09-21%20Mon%5D][{2015-09-21 Mon}]] |         |    1 |         |       |        |      |   1 |     |        |       |         |             |       |       |         |       |
| [[*<2015-11-08 Sun>][<2015-11-08 Sun>]] |         |    1 |         |       |      1 |      |     |     |        |       |         |             |       |       |         |       |
| [[*%5B2015-11-19%20Thu%5D][{2015-11-19 Thu}]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*%5B2015-11-19%20Thu%5D][{2015-11-19 Thu}]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-01-29 Fri>][<2016-01-29 Fri>]] |       1 |    1 |         |     1 |      1 |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-01-30 Sat>][<2016-01-30 Sat>]] |       1 |      |         |       |        |      |     |     |        |       |         |           1 |       |       |         |       |
| [[*<2016-02-07 Sun>][<2016-02-07 Sun>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-02-08 Mon>][<2016-02-08 Mon>]] |       1 |      |         |       |        |      |     |   1 |        |       |         |             |       |       |         |       |
| [[*<2016-02-09 Tue>][<2016-02-09 Tue>]] |         |      |         |       |        |      |     |     |      1 |       |         |             |       |       |         |       |
| [[*<2016-02-12 Fri>][<2016-02-12 Fri>]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-02-26 Fri>][<2016-02-26 Fri>]] |       1 |      |       1 |       |      1 |      |     |     |        |       |       1 |             |       |       |         |       |
| [[*<2016-02-28 Sun>][<2016-02-28 Sun>]] |         |      |         |       |        |      |     |     |      1 |       |         |             |       |       |         |       |
| [[*<2016-03-02 Wed>][<2016-03-02 Wed>]] |         |      |         |       |        |      |   1 |     |        |       |         |             |       |       |         |       |
| [[*<2016-03-02 Wed>][<2016-03-02 Wed>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-03-05 Sat>][<2016-03-05 Sat>]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-03-11 Fri>][<2016-03-11 Fri>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-03-16 Wed> Gravity, Rocket][<2016-03-16 Wed>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-03-22 Tue>][<2016-03-22 Tue>]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-03-24 Thu>][<2016-03-24 Thu>]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-03-30 Wed>][<2016-03-30 Wed>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-04-02 Sat>][<2016-04-02 Sat>]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-04-03 Sun>][<2016-04-03 Sun>]] |         |      |         |       |        |      |     |     |        |     1 |         |             |       |       |         |       |
| [[*<2016-04-04 Mon>][<2016-04-04 Mon>]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-04-05 Tue>][<2016-04-05 Tue>]] |       1 |    1 |         |       |        |      |   1 |     |        |       |         |             |       |       |         |       |
| [[*<2016-04-09 Sat>][<2016-04-09 Sat>]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-13 Fri>][<2016-05-13 Fri>]] |       1 |    1 |         |       |      1 |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-04-15 Fri>][<2016-04-15 Fri>]] |       1 |    1 |         |       |      1 |      |     |   1 |        |       |         |             |       |       |         |       |
| [[*<2016-04-21 Thu>][<2016-04-21 Thu>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-04-25 Mon>][<2016-04-25 Mon>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |     1 |         |       |
| [[*<2016-04-29 Fri>][<2016-04-29 Fri>]] |         |      |       1 |     1 |        |      |     |     |      1 |       |         |             |       |       |         |       |
| [[*<2016-05-04 Wed>][<2016-05-04 Wed>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-06 Fri>][<2016-05-06 Fri>]] |         |      |         |       |        |      |     |     |      1 |       |         |             |       |       |         |       |
| [[*<2016-05-09 Mon>][<2016-05-09 Mon>]] |       1 |    1 |         |       |        |    1 |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-11 Wed>][<2016-05-11 Wed>]] |       1 |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-12 Thu>][<2016-05-12 Thu>]] |       1 |    1 |         |       |      1 |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-13 Fri>][<2016-05-13 Fri>]] |       1 |      |         |       |      1 |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-17 Tue>][<2016-05-17 Tue>]] |         |      |         |       |        |      |     |     |        |       |         |             |       |     1 |         |       |
| [[*<2016-05-19 Thu>][<2016-05-19 Thu>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-19 Thu>][<2016-05-19 Thu>]] |         |      |         |       |        |      |     |     |        |       |         |           1 |       |       |         |       |
| [[*<2016-05-23 Mon>][<2016-05-23 Mon>]] |       1 |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-24 Tue>][<2016-05-24 Tue>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-27 Fri>][<2016-05-27 Fri>]] |         |      |         |     1 |        |    1 |   1 |     |        |       |         |             |       |       |         |       |
| [[*<2016-05-31 Tue>][<2016-05-31 Tue>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-05 Sun>][<2016-06-05 Sun>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-06 Mon>][<2016-06-06 Mon>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-07 Tue>][<2016-06-07 Tue>]] |       1 |      |         |       |        |      |     |     |        |     1 |         |             |       |       |         |       |
| [[*<2016-06-08 Wed>][<2016-06-08 Wed>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-09 Thu>][<2016-06-09 Thu>]] |       1 |      |         |       |      1 |      |     |     |        |       |         |           1 |       |       |         |       |
| [[*<2016-06-11 Sat>][<2016-06-11 Sat>]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-12 Sun> Haskell Parsers][<2016-06-12 Sun>]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-12 Sun>][<2016-06-12 Sun>]] |       1 |      |       1 |       |      1 |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-13 Mon>][<2016-06-13 Mon>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-14 Tue> Idiots never give up!][<2016-06-14 Tue>]] |         |      |       1 |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-15 Wed> Mathematical Methods for Quantitative Finance, Marve, Houdini][<2016-06-15 Wed>]] |         |      |       1 |       |        |    1 |     |     |        |       |       1 |             |       |       |         |       |
| [[*<2016-06-16 Thu> Dual Univers, Haskell, AI][<2016-06-16 Thu>]] |       1 |      |         |       |        |      |     |   1 |        |     1 |         |             |       |       |         |       |
| [[*<2016-06-18 Sat> 3D-coa UV'ing tutorial][<2016-06-18 Sat>]] |         |      |         |       |        |      |   1 |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-20 Mon> Writing a haskell parser for geo Houdini format][<2016-06-20 Mon>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-23 Thu> IDO][<2016-06-23 Thu>]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-24 Fri>][<2016-06-24 Fri>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-06-25 Sat> Haskell FRP, Yampa, OpenGL][<2016-06-25 Sat>]] |       1 |    1 |         |       |      1 |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:][<2016-07-04 Mon>]] |       1 |      |         |       |        |      |     |     |        |       |       1 |             |       |       |         |       |
| [[*<2016-07-06 Wed> VR stuff, Parser, Finance Currency JSON API, Jabber History][<2016-07-06 Wed>]] |       1 |      |         |     1 |        |      |     |     |        |       |       1 |             |       |       |         |       |
| [[*<2016-07-08 Fri> Anonymous records][<2016-07-08 Fri>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-09 Sat> Aeson open tabs][<2016-07-09 Sat>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-14 Thu> working on Flickr example, Haskell, JSON][<2016-07-14 Thu>]] |       1 |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-16 Sat> Houdini Geo parser][<2016-07-16 Sat>]] |       1 |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-20 Wed> Prepare lambda for Alex and robots, Parsers in HaskellBook][<2016-07-20 Wed>]] |         |      |         |     1 |        |      |     |     |      1 |     1 |         |             |     1 |       |         |       |
| [[*<2016-07-21 Thu> Continue learning Parsers, following Julia manual][<2016-07-21 Thu>]] |       1 |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators][<2016-07-23 Sat>]] |       1 |      |         |       |        |    1 |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-24 Sun> Helm-Swoop search results, Machine Learning links][<2016-07-24 Sun>]] |         |      |         |     1 |        |      |     |   1 |        |       |         |             |       |       |         |       |
| [[*<2016-07-27 Wed> Continue with Parsers][<2016-07-27 Wed>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-28 Thu> Diary time format][<2016-07-28 Thu>]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-07-28 Thu> Fabric Engine:][<2016-07-28 Thu>]] |         |      |         |       |        |      |   1 |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-05 Fri> Raspberri Pi][<2016-08-05 Fri>]] |         |      |         |       |        |      |     |     |      1 |       |         |             |       |       |         |       |
| [[*<2016-08-07 Sun> Org-mode images][<2016-08-07 Sun>]] |         |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-08 Mon> Machine Learning][<2016-08-08 Mon>]] |         |      |         |       |        |      |     |   1 |        |       |         |             |       |       |         |       |
| [[*<2016-08-18 Thu> X3: Litcube mods:][<2016-08-18 Thu>]] |         |      |         |       |        |      |     |     |        |     1 |         |             |       |       |         |       |
| [[*<2016-08-19 Fri> Anki, Dutch, Tesaurus][<2016-08-19 Fri>]] |         |      |         |       |        |      |     |     |        |       |         |             |       |       |         |     1 |
| [[*<2016-08-21 Sun> HaskellBook][<2016-08-21 Sun>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-22 Mon> Machine Learning by Tom Mitchel:][<2016-08-22 Mon>]] |         |      |         |       |        |      |     |   1 |        |       |         |             |       |       |         |       |
| [[*<2016-08-23 Tue> Rocket, Gravity, n-body][<2016-08-23 Tue>]] |         |      |       1 |       |        |    1 |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-24 Wed> Parsers, Backup, Fixing sink][<2016-08-24 Wed>]] |       1 |      |         |       |        |      |     |     |        |       |         |           1 |     1 |       |         |       |
| [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-26 Fri> continue][<2016-08-26 Fri>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-28 Sun> continue][<2016-08-28 Sun>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-30 Tue> continue][<2016-08-30 Tue>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-08-31 Wed> Rust language][<2016-08-31 Wed>]] |         |    1 |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-02 Fri> Trying out Substance Designer, Rust language, Haskell Parser][<2016-09-02 Fri>]] |       1 |    1 |         |       |        |      |   1 |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-04 Sun> Parsers][<2016-09-04 Sun>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-05 Mon> Jad Nohra gitHub][<2016-09-05 Mon>]] |         |    1 |         |       |        |    1 |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-06 Tue> Guns Germs and Steal, Haskell Parser][<2016-09-06 Tue>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |       1 |       |
| [[*<2016-09-07 Wed> Parsers, Manstein plan][<2016-09-07 Wed>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |       1 |       |
| [[*<2016-09-09 Fri> Parsers progress, Fluids:][<2016-09-09 Fri>]] |       1 |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-11 Sun> Maths][<2016-09-11 Sun>]] |         |      |         |       |        |    1 |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-13 Tue> Haskell, Category Theory][<2016-09-13 Tue>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-14 Wed> Emacs Progress Matrix][<2016-09-14 Wed>]] |       1 |      |         |     1 |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-15 Thu> Houdini Lorenz][<2016-09-15 Thu>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-16 Fri> Category Theory for Haskell programmers][<2016-09-16 Fri>]] |       1 |      |         |     1 |        |    1 |     |     |        |       |         |           1 |       |       |         |       |
| [[*<2016-09-19 Mon> Continue with Houdini Fluids][<2016-09-19 Mon>]] |         |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-21 Wed> Haskell Parsers, Houdini fluids][<2016-09-21 Wed>]] |       1 |      |       1 |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-23 Fri> Haskell, JSON, parser][<2016-09-23 Fri>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-26 Mon> Credit Cards, BF2142][<2016-09-26 Mon>]] |         |      |         |       |        |      |     |     |        |     1 |         |             |     1 |       |         |       |
| [[*<2016-09-28 Wed> Parsec links, Category Theory][<2016-09-28 Wed>]] |       1 |      |         |       |        |    1 |     |     |        |       |         |             |       |       |         |       |
| [[*<2016-09-29 Thu> Haskell Parser][<2016-09-29 Thu>]] |       1 |      |         |       |        |      |     |     |        |       |         |             |       |       |         |       |
|------------------+---------+------+---------+-------+--------+------+-----+-----+--------+-------+---------+-------------+-------+-------+---------+-------|
#+TBLFM: @2$2=vsum(@4..@>)::@2$3=vsum(@4..@>)::@2$5=vsum(@4..@>)::@2$4=vsum(@4..@>)::@2$6=vsum(@4..@>)::@2$7=vsum(@4..@>)::@2$8=vsum(@4..@>)::@2$9=vsum(@4..@>)::@2$10=vsum(@4..@>)::@2$11=vsum(@4..@>)::@2$12=vsum(@4..@>)::@2$13=vsum(@4..@>)::@2$16=vsum(@4..@>)::@2$14=vsum(@4..@>)::@2$15=vsum(@4..@>)::@2$17=vsum(@4..@>)::@3$2=(@2$2/@2$1)*100;%.1f::@3$3=(@2$3 /@2$1)*100;%.1f::@3$5=(@2$5 /@2$1)*100;%.1f::@3$4=(@2$4 /@2$1)*100;%.1f::@3$6=(@2$6 /@2$1)*100;%.1f::@3$7=(@2$7 /@2$1)*100;%.1f::@3$8=(@2$8 /@2$1)*100;%.1f::@3$9=(@2$9 /@2$1)*100;%.1f::@3$10=(@2$10/@2$1)*100;%.1f::@3$11=(@2$11/@2$1)*100;%.1f::@3$12=(@2$12/@2$1)*100;%.1f::@3$13=(@2$13/@2$1)*100;%.1f::@3$16=(@2$16/@2$1)*100;%.1f::@3$14=(@2$14/@2$1)*100;%.1f::@3$15=(@2$15/@2$1)*100;%.1f::@3$17=(@2$17/@2$1)*100;%.1f::@2$1='(apply '+ '($2..$>));N

* History
** [2015-01-12 Mon]                                                  :python:

	[[/home/madjestic/houdini/houdini/python2.7libs/dopparticlefluidtoolutils.py]]
	[[file:~/Projects/Python/Tree/Main.py][/Projects/Python/Tree/Main.py]] Fri Oct 17 23:47:43 CEST 2014 - python tree-parsing example

	[[*:%20Make%20Elegant,%20Clean-up][Sun Oct 26 00:10:42 CEST 2014
	refactoring, cleaning up Rendering.hs and Shape.hs]]

	nmcli device wifi connect Lambda password *********
	Biology (Micosis)
	[[*:%20Investigate%20how%20to%20render%20ocean%20nicely][Ocean Shader (displacement issues)]]

** [2015-02-01 Sun] 
	
	Found a nice article on GTK+, continue reading later. (Which article?! <2015-12-03 Thu> )

** [2015-09-21 Mon]                                               :rendering:
	
	Trying to make [[*PVR][PVR]] compile.  [[*PVR][Getting some linker errors:]] (1)

	<2015-11-06 Fri> solved (1)

** <2015-11-08 Sun>                                                  :opengl:
	
	#define W 0xFF, 0xFF, 0xFF, 0xFF
        static const GLubyte tex_data[] =
        {
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
        };
#undef B
#undef W

        glGenTextures(1, &tex_object[0]);
        glBindTexture(GL_TEXTURE_2D, tex_object[0]);
        glTexStorage2D(GL_TEXTURE_2D, 1, GL_RGB8, 16, 16);
        glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 16, 16, GL_RGBA, GL_UNSIGNED_BYTE, tex_data);
				...

				it looks like there are 16x16 rows x columns in the B,W,B,W... above as well as in tex-storage size delcaration

				Mipmapping gets its name from the Latin phrase multum in parvo

	Created a [[file:~/.contexts][~/.context]] for keeping clusters of activity together (dirs, pdfs, etc.)

** [2015-11-19 Thu]                                               :emacs:org:
	
	Figured out how to use parts of agenda-mode.
	http://orgmode.org/worg/org-tutorials/advanced-searching.html

	Timestamps for agenda-mode:
	http://orgmode.org/manual/Creating-timestamps.html
	(C-c ! ) inactive timestamp
	(C-c . ) timestamp

	Org-mode Agenda is awesome!
	http://orgmode.org/worg/org-tutorials/advanced-searching.html

** [2015-11-19 Thu]                                               :emacs:org:
	
	(C-c a m) Match: +TIMESTAMP_IA>="<-2w>" (show ineactive timestamps)

** <2016-01-29 Fri>                            :frp:haskell:opengl:emacs:cpp:
  
  Reading on FRP:
  http://travis.athougies.net/posts/2015-05-05-frp-made-simple.html !
  http://www.cs.jhu.edu/~roe/padl2014.pdf
  http://verify.rwth-aachen.de/proseminar/PK15/ausarbeitungen/reactive_programming.pdf
  https://www.manning.com/books/functional-reactive-programming
  https://news.ycombinator.com/item?id=6285149
  http://lambda-the-ultimate.org/node/3642

  C++ : getting the basics of Array and String operations according to C++11 standart
  Reading the STL library reference:
  [[file:~/Documents/Addison%20Wesley%20-%20The%20C%2B%2B%20standard%20library_a%20tutorial%20and%20reference.pdf][file:~/Documents/Addison Wesley - The C++ standard library_a tutorial and reference.pdf]]
  [[file:~/Projects/CPP/Junk/file2array]]
  
  Emacs Debugger:
  https://www.gnu.org/software/emacs/manual/html_node/emacs/Commands-of-GUD.html
  http://www.gnu.org/software/emacs/manual/html_node/emacs/Watch-Expressions.html
  
	OpenGL Work:
  [[~/Projects/OpenGL/sb7code/src/my_first_spinning_cube_v01]]
  
** <2016-01-30 Sat> 
  
  How to add a package to haskell-overlay:
  https://github.com/gentoo-haskell/gentoo-haskell/blob/master/projects/doc/HOWTO-contribute.rst
  
** <2016-02-07 Sun> 
   @->s[[[*<2016-02-08%20Mon>][<2016-02-08 Mon>]]]
   Yampy-Cube: https://youtu.be/T7XwTolu9YI?t=2525
   Jekor Yampa: https://youtu.be/T3xXebIr8AM?t=1000

** <2016-02-08 Mon>                                          :haskell:frp:ai:
   @<-[[[*<2016-02-07%20Sun>][<2016-02-07 Sun>]]]
   @->[[[*Yampa][Yampa]]]
   learning FRP:
   Jekor, Yampa:
   https://youtu.be/T3xXebIr8AM?t=980
   Yampy Cube:
   https://youtu.be/T7XwTolu9YI?t=2506
   
   Learning AI/Machine Learning/Deep Learning
   http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning/
   http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning-part-2/

** <2016-02-09 Tue>                                                     :nxt:
  
  Bluetooth:
  http://www.thinkwiki.org/wiki/How_to_setup_Bluetooth
  http://bricxcc.sourceforge.net/nbc/doc/nxtlinux.txt

  sudo rfcomm bind /dev/rfcomm0 00:16:53:0E:21:14
  sudo rfcomm release /dev/rfcomm0 00:16:53:0E:21:14

** <2016-02-12 Fri>                                                   :julia:
  
  Julia compilation fails
  
  The problems seems to go back to cbals incompatibility between science overlay and main portage.
  It is currently causing a dependency havoc in the system.  Julia is not ready yet.

*** <2016-05-10 Tue> Update: works when installed through github/cabal
    [[file:~/Projects/Julia/julia]]
    
** <2016-02-26 Fri>                                           :opengl:
   @->s[[[*:%20Make%20Elegant,%20Clean-up][: Make Elegant, Clean-up]]
         [[*:%20continue%20with%20Mortgage%20graphing,%20using%20VEX][: continue with Mortgage graphing, using VEX]]]
  
  Everybody seems to enjoy the Vertex Displacement Animation task that I accomplished.  It looks like a propper SIGGRAPH material.

  [[*:%20Make%20Elegant,%20Clean-up][I should polish Haskell OpenGL Tutorial]]

  [[*:%20continue%20with%20Mortgage%20graphing,%20using%20VEX][I should continue with Mortgage graphing, using VEX]]

** <2016-02-28 Sun>                                                     :nxt:
  
  LEGONXT
  ~/Projects/LEGONXT/nxt-python-2.2.2/nxt-python-2.2.2/examples $ python ./mary.py

** <2016-02-29 Mon>
  
   Probably I should proceded with Rendering Adventure

** <2016-03-02 Wed>
  @->s [[[*<2016-04-05%20Tue>][<2016-04-05 Tue>]]]
  
  Visualize a graph with Haskell
  /home/madjestic/Projects/Haskell/Mortgage/
  
** <2016-03-05 Sat> 
  
  http://www.slideshare.net/CassEveritt/approaching-zero-driver-overhead
  http://valhalla.fciencias.unam.mx/lenguajes/EOPL.pdf

** <2016-03-11 Fri>                                                 :houdini:
  
  Laplace Operator games:
  /home/madjestic/Desktop/DRS.hipnc
  [[*:%20Render%20out%20a%20vide,%20same%20as%20for%20n-bodies.][TODO : Render out a vide, same as for n-bodies.]]

** <2016-03-16 Wed> Gravity, Rocket                                 :houdini:
   @<->[[[*Rocket!][Rocket!]]
   ]
  [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc][file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]
  * colliding particles - works in principles, but with errors.  Needs a second pass.
  * I think it is fixed now (gluing is based on proximity clasterization)
    <2016-09-03 Sat>
  
** <2016-03-22 Tue>                                           :tags:entropy:
   http://orgmode.org/manual/Setting-tags.html#Setting-tags
   C-c C-q - insert a tag into a headline

   A [[https://www.emacswiki.org/emacs/SecondarySelection][secondary selection]] can be used as an interface to "Entropy".
   E.g. Select a data from a wikipedia article with a primary selection,
   select another data with a secondary selection (e.g. a list of languages
   that the article is available in) - the result shold be the variance
   of the data accross different languages.

   secondary selection:
   M-mouse1

   M-x yank-secondary
   M-mouse2

   https://www.gnu.org/software/emacs/manual/html_node/ses/Copy_002fcut_002fpaste.html
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Secondary-Selection.html

*** On Complexity and Entropy                                       :entropy:
   Added complexity is non-lineary correleated to Entropy: in other words,
   added complexity can have different net effect on complexity of a state 
   and entropy of a state as a whole:  E.g. an unorderd set of numbers is 
   much more complex to represent than an ordered set of numbers.  
   An undordered set with an associated ordering function posses a greater 
   complexity than just an unordered set by definition, yet, the net 
   complexity is reduced.
   Arguably, an ordered set is an easier object to reason about than
   an unorded set. So, overall, entropy of an unordered set is reduced 
   through added complexity.

   A complexity is understood as a amount of data necessary to fully 
   rescribe a state.  There are 2 types of complexity: algorithmic and
   data complexity.

   What is the relationship between complexity of an algorithm and data?

   Entropy is understood as a measure of disorder.  Therefore one can
   speak of complexity, associated with entropy.

   What is the relationship betweem complexity, associated with entropy
   and algorithmic complexity?

   Maximum data Entropy has maximum algorithmic complexity. Minimum Enropy
   has minimum algorithmic complexity.

   Could we talk about algorithmic complexity in terms of 
   functional composition?  Then every function could be perceived
   isolated from the rest of the system.  Therefore algorithmic complexity
   is isolated, compartmentalized.
** <2016-03-24 Thu>                                           :emacs:
   secondary eshell in emacs:
   C-u M-x eshell
** <2016-03-30 Wed>                                           :haskell:cabal:
   http://katychuang.com/cabal-guide/ - simple cabal guide

** <2016-04-02 Sat>                                           :programming:
   Started reading [[file:~/Documents/%D0%94.%20%D0%9A%D0%BD%D1%83%D1%82%20-%20%20%D0%98%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%20(%D1%82%D0%BE%D0%BC%201,2,3)%20-%202002][D.Knut, the art of programming "Искусство программирования (том 1,2,3) - 2002"]]
** <2016-04-03 Sun>                                                   :games:
   http://rephial.org/help/command
   http://rephial.org/help/playing
   angband commands
** <2016-04-04 Mon>                                           :julia:
*** TODO [#E] : write a @code_native collatz(10) for for(1:10) loop and see what the ASM code looks like
** <2016-04-05 Tue>                                           :haskell:julia:
   @<- [[[*<2016-03-02%20Wed>][<2016-03-02 Wed>]]]
   Working on a Haskell diagrams plotting example:
   http://projects.haskell.org/diagrams/doc/quickstart.html
   [[file:~/Projects/Haskell/Diagrams/test_00/Main.hs]]
   [[file:~/Projects/Haskell/Diagrams/test_00/plot.svg]]
   
   Working through Julia manual:
   http://docs.julialang.org/en/release-0.4/manual/functions/
** <2016-04-09 Sat>                                           :opencl:
   Started reading: http://www.heterogeneouscompute.org/?page_id=7
   (OpenCL book)
   [[file:~/Documents/OpenCL_Programming_Guide.pdf]] (hoknamahn's book)
   
** <2016-04-11 Mon>                                           :opengl:cpp:haskell:
** <2016-04-15 Fri>                                           :deeplearning:ai:pebble:opengl:
   Started reading deeplearning book.  It seem a nice complement to 
   Tom Mitchel's book.
   [[file:~/Documents/Machine_Learning_-Tom_Mitchell.pdf]]
   http://www.deeplearningbook.org/contents/intro.html#pf6

   Pebble SDK:
   
*** TODO [#D] : Study the Mandelbrot for Pebble example:
    https://github.com/mhungerford/pebble-mandelbrot-generator
    
    Pebble SDK:
    https://developer.pebble.com/sdk/install/linux/
    http://blog.ps0ke.de/2013/09/20/00/54/setting-up-the-pebble-development-environment-on-gentoo-linux-64bit

*** DONE : Mandelbrot OpenGL exmaple in C++: Explore uniforms.
    [[file:~/Projects/OpenGL/sb7code/src/my_first_spinning_cube_v01/Main.cpp]]
    time uniform is sent to vertex shader.
*** DONE : Do the same in haskell
    [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot/Main.hs]]
    [[/home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP/Main.hs]]
    

*** TODO [#B] : Read the Red Book:
    [[file:~/Documents/opengl_programming_guide_8th_edition.pdf]]
*** TODO [#B] : Read the book of shaders as a supplement:
    http://patriciogonzalezvivo.com/2015/thebookofshaders/00/
*** TODO [#D] : Take a look at GPipe, it seems like an interesting way to handle OpenGL
    http://tobbebex.blogspot.nl/2015/09/gpu-programming-in-haskell-using-gpipe.html
** <2016-04-21 Thu>                                           :houdini:
   [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]
   VEX compiler #define:
   http://127.0.0.1:48626/vex/vcc
** <2016-04-25 Mon>                                           :skate:houdini:
*** TODO [#E] : A skating timer:
    Raspberry Pi 
    LCD+Keyboard kit for RP http://goo.gl/e4YPJC
                            https://goo.gl/hnC9Uc
    Ribbon Switch https://www.tapeswitch.com/onlinestore/products.php?cat=11
    http://razzpisampler.oreilly.com/ch07.html Connecting a Push Switch tutorial
    
*** TODO [#C] : Ecosystem sim:
    [[/home/madjestic/Projects/Houdini/Ecosystem/Model.hipnc]]

** <2016-04-29 Fri>                                           :houdini:vfx:
   I am trying to establish an efficient way to work with Houdini, using emacs
*** DONE : create a houdini-starting script for emacs, solve urxvt
*** TODO [#B] : continue working on waterfall example
**** DONE : catch up on the latest fluid test examples:
     [[file:~/Projects/Houdini/Fluids/fluids_test]]
     it looks like the closest I've got to a waterfall is this:
     [[file:~/Projects/Houdini/Fluids/Fluid_Test_00/Model.hipnc]]

** <2016-05-04 Wed>
   file:~/Projects/Houdini/Fluids/Fluid_Test_00/Model.hipnc - a waterfall test
   /home/madjestic/Desktop/cloth_test.hipnc
** <2016-05-06 Fri>
   reading [[file:~/Documents/Linux_Format_March_2016.pdf]]
   p.62 LXF208 March 2016 - OwnCloud 8.0 with RaspberryPi

** <2016-05-09 Mon>                                           :entropy:opengl:
   [[*Entropy][Entropy]]
*** Rendering Entropy nodes/edges:
   1) rendering a circle with an outline:
      - render a circle of a radius r
      - render a circle with a snaller radius on top of it.
        the result should look like a circle with an outline.
   2) render an object, consisting of 2 circles, connected by a line.
   
*** On the data structure:
   I am probably misusing the terminology here, but whatever:
   
**** Theorem 1.0   
     Data is represented as a tree-like graph, loops are allowed, each
   piece of information is represented as a node that may be connected to
   one or more other nodes with one or more edges.

**** Theorem 1.1: FALSE
   Every node can be represented by a reduced edge: (() - \Gamma), where
   () is a Null category and \Gamma is a category. : seems to be False

**** Theorem 1.2:
   a Category consists of:
     a set of nodes
     a set of edges (or, more generally, a set of arrows)
     a partial function that takes a category as an 
       argument and produces a new category that is "connected" to the the 
       original (share nodes/arrows).  It's similar to L-systems node-replacement algorithms.
**** Theorem 1.3:
   a Category can be a member of another category.
**** Theorem 1.4:
   a Category can be a member of itself (connected to itself).

****   Category:
*****  Subcategory:
****** Nodes (Categories)
****** Edges (Arrows)
****** Partial Function: *
       Describes a function that takes a category \Gamma as an argument
       \Eta, producing a new group 

** <2016-05-11 Wed>                                                 :haskell:
   [[file:~/Projects/Haskell/Entropy/src/Main.hs]] - working on categories, applications and other goodiness.
   http://lpaste.net/163041 - interesting example with Foldable, so that both 2-tuple and a list can be an argument to a function:
   
   newtype SameTuple a = SameTuple (a, a)

   instance Foldable SameTuple where
   foldMap f (SameTuple (l, r)) = f l `mappend` f r
   
   isIn :: (Eq a, Foldable t) => a -> t a -> Bool
   isIn a xs = foldr (\x acc -> acc || x == a) False xs
   
   ---
   
   λ> 3 `isIn` SameTuple (3, 4)
   True
   λ> 3 `isIn` [3,4]
   True
   λ> 2 `isIn` SameTuple (3, 4)
   False
** <2016-05-12 Thu>
   @->[[[*<2016-05-11 Wed>][<2016-05-11 Wed>]]]
   an example with categories seems to work.
   Now I need to procede with visualizing it:

   visualize cats as squares
   visualize arrows as lines, connecting squares
*** TODO [#B] : visualize cats as squares
*** TODO [#B] : visualize arrows as lines, connecting squares
*** TODO [#C] : (extra) : anti-alias the primitives.
** <2016-05-13 Fri>                                          :haskell:opengl:
   https://github.com/tobbebex/GPipe-Core - functional opengl in haskell
** <2016-05-17 Tue>
   cool skateboard maker (link from Vlad):
   www.kaliber-skateboards.de
   
** <2016-05-19 Thu>                                           :haskell:yampa:
   @->:[[[*Yampa][Yampa]]
        [[*%5B%5B*FRP%5D%5BFRP%5D%5D][FRP]]
   ]
   https://youtu.be/-IpE0CyHK7Q?t=425 - Jekor's yampa tutorial part 1
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]
   
** <2016-05-19 Thu>
   https://nixos.org/wiki/Installing_NixOS_from_a_USB_stick
   https://nixos.org/nixos/download.html
** <2016-05-23 Mon>                                     :haskell:android:ios:
   I experimented with haskell on android:
   https://github.com/neurocyte/ghc-android
   this sort of worked on my Acer Aspire One with 32bit Ubuntu, till the 'adb' moment, at which point I stopped.
   http://keera.co.uk/blog/2014/08/13/most-inspiring-green-screen-you-will-ever-see/
   https://ghc.haskell.org/trac/ghc/wiki/Arm64
   https://ghc.haskell.org/trac/ghc/wiki/CrossCompilation
   https://ghc.haskell.org/trac/ghc/wiki/Building/CrossCompiling/iOS

   Also received an email from Ivan Perez:
   "Hi

   We use debian for android, and obviously macosx for ios.

   We are currently working on releasing a stable environment to compile mobile haskell apps for both platforms."

   
   Sounds like soon we are going to get some new toys to play with... fingers crossed.

** <2016-05-23 Mon>                                           :yampa:
   @->[[[*<2016-05-19%20Thu>][<2016-05-19 Thu>]]]
   going back to learning Yampa:
** <2016-05-24 Tue>                                                 :haskell:
   https://www.haskell.org/onlinereport/standard-prelude.html - Prelude specification,
   describes all the haskell functions bundled with Prelude.

   https://wiki.haskell.org/Simple_unix_tools - Haskell command line tools
   
** <2016-05-27 Fri>                                   :graph:haskell:entropy:
   http://projects.haskell.org/graphviz/faq.html
   http://www.graphviz.org/
   http://blog.idorobots.org/entries/you-earned-15-xp-in-getting-things-done_.html#preview-more
   http://www.1010.co.uk/org/ - crazy emacser website

   https://github.com/RefactoringTools/HaRe
   https://github.com/emacs-tw/awesome-emacs
   https://github.com/hbin/molokai-theme
*** TODO [#D] : Read about graphviz/graphviz-org-mode for emacs
    the problem that I am working on may have a nice backend / partial solution already.
    more examples of graphviz graphs: http://www.tonyballantyne.com/graphs.html
** <2016-05-31 Tue>                                                 :haskell:
   out@[[[*<2016-05-23%20Mon>][<2016-05-23 Mon>]]]
   https://en.wikibooks.org/wiki/Haskell/Understanding_arrows - arrow notation
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]
** <2016-06-05 Sun>                                                 :haskell:
   [[file:~/Projects/Haskell/FRP/frp_counter_00/Main.hs]]
   [[file:~/Projects/Haskell/FRP/yampy-cube/src/Main.hs]]

   https://www.youtube.com/watch?v=-IpE0CyHK7Q&feature=youtu.be&t=425
   https://www.youtube.com/watch?v=T7XwTolu9YI&feature=youtu.be&t=2506

   https://github.com/nh2/call-haskell-from-anything
** <2016-06-06 Mon>                                                 :haskell:
   ~/Projects/Haskell/call-haskell-from-anything/ - fails with:
   "* Missing C library: HSrts-ghc7.10.3" - both cabal and stack versions.
*** DONE : Report a bug about HSrts
    https://github.com/nh2/call-haskell-from-anything#usage
** <2016-06-07 Tue>                                           :haskell:godot:
   call haskell from everything - an interesting project but is not ready yet:
   https://github.com/nh2/call-haskell-from-anything/issues/14
   [[file:~/Projects/Haskell/call-haskell-from-anything]]

   Also seems related to the stack/stackage issue.  Stackage not ready yet?
   https://github.com/fpco/stackage/issues/1221

   Godot seems to have a bug atm:
   https://github.com/godotengine/godot/issues/5060

** <2016-06-08 Wed>
   https://en.wikibooks.org/wiki/Haskell/Applicative_functors#A_sliding_scale_of_power - very interesting explanation/excercises on Functor, Applicative and Monad
   and sollutions to exercises: https://en.wikibooks.org/wiki/Haskell/Solutions/Applicative_functors

   [1] https://hackage.haskell.org/package/repa-3.4.0.2/docs/Data-Array-Repa.html - hoknamahn mentioned an interesting link to parallel arrays

*** TODO [#D]: check it out REPA (1)
** <2016-06-09 Thu>
   search by date
   $ find ~ -iname 'Makefile' -atime -20 | grep -i haskell
   /home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/tutorial11/Makefile
** <2016-06-11 Sat> 
   https://github.com/emacs-helm/helm/wiki - helm tips
** <2016-06-12 Sun> Haskell Parsers
   @<-[[[*<2016-06-19%20Sun>%20Haskell%20parsing,%20regex][<2016-06-19 Sun> Haskell parsing, regex]]
   [[*Tree Parser][Tree Parser]]
   ]
   @->[
   [[*Parsing][Parsing]]
   [[*<2016-06-19%20Sun>%20Haskell%20parsing,%20regex][<2016-06-19 Sun> Haskell parsing, regex]]
   [[*<2016-06-20 Mon> Writing a haskell parser for geo Houdini format][<2016-06-20 Mon> Writing a haskell parser for geo Houdini format]]
   ]

   http://jakewheat.github.io/intro_to_parsing/
   http://nikobidin.com/arrows-everywhere
   https://github.com/aslatter/parsec
   https://kunigami.wordpress.com/2014/01/21/an-introduction-to-the-parsec-library/
   http://book.realworldhaskell.org/
   http://unbui.lt/#!/post/haskell-parsec-basics
   http://unbui.lt/#!/post/haskell-another-lens-tutorial
*** DONE : Look into Haskell Parsers
** <2016-06-12 Sun>                       :haskell:entropy:FRP:houdini:emacs:
   @->[[[*FRP][FRP]]]
   I ended up with OpenGL animation 'sort of working' - buffer update is busted and I should attempt to 
   follow Jekor's instructions more closely, that is use OpenGL building blocks from cuboid first and then
   refactor it to use NGL
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor.blinks_sort_of_works]]

   http://data.ceh.vn/Ebook/ebooks.shahed.biz/OS/LINUX/ - interesting collecion of linux-related books material

   [[file:~/Projects/Houdini/MARVE]]

   http://blog.idorobots.org/entries/you-earned-15-xp-in-getting-things-done_.html#preview-more emacs


*** DONE : Set Up a Pretty Calendar for emacs:
    http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html
    https://github.com/kiwanami/emacs-calfw
    https://www.emacswiki.org/emacs/CalendarMode
    https://www.emacswiki.org/emacs/DiaryMode
    http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html
*** TODO [#D] : investigate WebKit in Emacs:
    [[file:~/Projects/emacs/deepin-emacs]]
    https://www.emacswiki.org/emacs/WebKit
*** DONE : test todo 'Scheduled' setting
    SCHEDULED: <2016-06-13 Mon>
*** TODO [#C] : Continue reading :   [[file:~/Documents/GNU_Linux_Application_Programming.chm]]
*** DONE : Finish bringing cuboid code bits, according to Jekor's video:
    https://www.youtube.com/watch?v=T3xXebIr8AM
    [[file:~/Projects/Haskell/FRP/cuboid]]
    [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]
    
** <2016-06-13 Mon>                                                 :houdini:
   [[*MARVE][MARVE]]
   [[file:~/Projects/Houdini/MARVE/model.hipnc]]
** <2016-06-14 Tue> Idiots never give up!                     :houdini:emacs:
   M-x load-jabber
   M-x jabber-connect
   M-x jabber-display-roster

   M-x load-calendar
   M-x cfw:open-org-calendar
   Working on: [[*MARVE][MARVE]]
   - I managed to set up 3D Coat to open a linked file:
   [[file:~/Projects/Houdini/MARVE]]
   [[file:~/Projects/Houdini/MARVE/3d-coat/model.3b]]
   [[file:~/Projects/Houdini/MARVE/model.hipnc]]

*** DONE : export a leg mesh mockup from Houdini to 3d-coat
    SCHEDULED: <2016-06-14 Tue>
*** DONE : Tell Hok that he is a Barmaly
    SCHEDULED: <2016-06-15 Wed> 
** <2016-06-15 Wed> Mathematical Methods for Quantitative Finance, Marve, Houdini :MARVE:houdini:
   @->[[[*MARVE][MARVE]]]
   a course @coursera https://www.coursera.org/course/mathematicalmethods

   continuing with [[*MARVE][MARVE]] :
   [[file:~/.contexts/MARVE/]]
   [[file:~/Projects/Houdini/MARVE]]
   [[file:~/Projects/Houdini/MARVE/3d-coat/model.3b]]
   [[file:~/Projects/Houdini/MARVE/model.hipnc]]

** <2016-06-16 Thu> Dual Univers, Haskell, AI                    :AI:haskell:
   out@[[[*AI][AI]]]
   http://www.dualthegame.com/careers
   Novaquark, Dual Univers, space sandbox game.
   Maybe I should apply?

   https://github.com/mikeizbicki/HLearn - Haskell library for machine learning
   https://github.com/mikeizbicki/subhask - a rewrite of Prelude for numerical computing
   
** <2016-06-18 Sat> 3D-coa UV'ing tutorial
   https://www.youtube.com/watch?v=0LWnVLO5lYU - 3D-Coat UV'ing tutorial
** <2016-06-20 Mon> Writing a haskell parser for geo Houdini format
   @<-[[[*<2016-06-12 Sun> Haskell Parsers][<2016-06-12 Sun> Haskell Parsers]]
   ]
   @->[[[*<2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:][<2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:]]
   ]
   started working on a parser for Houdini geo files,
   of course I want it to be fun, so it must be written in Haskell:
   
   [[file:~/.contexts/Parser]]
   [[file:~/.contexts/Parser/Parser(Haskell)/Parsec]]

   [[file:~/.contexts/Parser/Parser(Houdini)/Model.hipnc]]
   [[file:~/Projects/Haskell_Parser/Parser/Model.hipnc]]

   [[file:~/Projects/Houdini/Parser/Parser/export/model.geo][file:~/Projects/Houdini/Parser/Parser/export/model.geo]] - Houdini cube geometry
      
   http://unbui.lt/#!/post/haskell-parsec-basics - seems like a good starting place
   https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners - also interesting

   https://artyom.me/aeson - Haskell JSON Parser, thank hok
   
   [[file:~/Pictures/parser_notes_00.png]]

*** Daggerfall
    In order to play:
    
    mount c ~/dosbox -freesize 1000
    mount d ~/dosbox/DAGGERFALL/DFCD -t cdrom -label Daggerfall
    c:
    cd \dagger
**** DONE : install Daggerfall:
     [[file:~/DAGGERFALL]]
     [[file:~/DAGGERFALL/daggerfall_legal_and_installation.pdf]]
** <2016-06-23 Thu> IDO                                               :emacs:
*** TODO [#C] : set up emacs ido mode
** <2016-06-24 Fri>
   busy with [[*FRP][FRP]]
** <2016-06-25 Sat> Haskell FRP, Yampa, OpenGL
   @->[[[*FRP][FRP]]]
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]

   # Setting a mutable variable :
   main :: IO ()
   main = do
     foo <- newIORef (0 :: Int)
     readIORef foo >>=  print
     foo <- newIORef (1 :: Int)
     readIORef foo >>=  print

  # more here:
  http://blog.jakubarnold.cz/2014/07/20/mutable-state-in-haskell.html 

  # flymake-compile
  C-c b

  stopped watching at 00:15:19
  [[file:~/Documents/FRP%20(Haskell_Yampa)%20and%20OpenGL%20with%20Cuboid%20(Part%202)%20-%20Episode%2010-T3xXebIr8AM.mkv][file:~/Documents/FRP (Haskell_Yampa) and OpenGL with Cuboid (Part 2) - Episode 10-T3xXebIr8AM.mkv]]
  
  Ivan Perez on game dev for Android:
  https://github.com/ivanperez-keera/introgameshaskell
  
** <2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1: :haskell:
   @->[[[*b1][b1]] - main
       [[*<2016-07-06 Wed> VR stuff, Parser, Finance Currency JSON API, Jabber History][<2016-07-06 Wed> VR stuff, Parser, Finance Currency JSON API, Jabber History]]
   ]
   @<-[[[*<2016-06-20 Mon> Writing a haskell parser for geo Houdini format][<2016-06-20 Mon> Writing a haskell parser for geo Houdini format]]
   ]
   https://wiki.haskell.org/Numeric_Haskell:_A_Repa_Tutorial - I should look into REPA some time

   [[file:~/Projects/Haskell/Parser/Parsec]] - writing a haskell Parser, first steps

*** Parsec study:
    https://www.ietf.org/rfc/rfc4627.txt RFC4627 (JSON RFC)
    Possible JSON values are: strings
                              numbers 
                              booleans 
                              null 
                              
                              arrays (one-dimensional)
                              objects

*** TODO [#C] : GLFW-b : b1 need to be converted from GLFW to GLFW-b: study b1 source-code meanwhile
    https://wiki.haskell.org/GLFW
    http://www.glfw.org/docs/latest/input_guide.html
*** TODO [#D] : Look into REPA
** <2016-07-06 Wed> VR stuff, Parser, Finance Currency JSON API, Jabber History
   @->[[[*: Parse a Houdini Cube example:][: Parse a Houdini Cube example:]]
   ]
   http://fixer.io/
   http://api.fixer.io/latest

*** DONE : Set Up Jabber History
    http://emacs-jabber.sourceforge.net/manual-0.8.0/Message-history.html
    (jabber-history-enabled t)
   
** <2016-07-08 Fri> Anonymous records                               :haskell:
*** DONE : Try out anonymous records:
    http://ruhaskell.org/files/meetup-2015-summer/3_Anonymous_Records.pdf
    https://hackage.haskell.org/package/record-0.4.1.1/docs/Record.html

    Result:
    It's not worth it.  Overloaded Records is worked on as a standard feature
    of ghc 8.x:
    https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1
** <2016-07-09 Sat> Aeson open tabs                                 :haskell:
   Last set of tabs open related to Aeson/Parsec :: chromium->bookmarks->last->Aeson
   
   Nested JSON:
   http://gnclmorais.com/blog/aeson-and-nested-json/ - working through an example of nesting JSON file:
   [[file:~/Projects/Haskell/Parser/Aeson/Flickr.hs]]
** <2016-07-14 Thu> working on Flickr example, Haskell, JSON        :haskell:
*** DONE : finish the example from:
    http://gnclmorais.com/blog/aeson-and-nested-json/
    [[file:~/Projects/Haskell/Parser/Aeson/Flickr.hs]]
** <2016-07-16 Sat> Houdini Geo parser                      :haskell:houdini:
   @->[[[*: Continue with Haskell Parsing][: Continue with Haskell Parsing]]]
    [[file:~/Projects/Haskell_Parser/Parser/Model.hipnc]]
    [[file:~/Projects/Haskell_Parser/Parser/export/model.geo]]
    [[file:~/Projects/Haskell/Parser/Aeson/Geo.hs]] - Haskell 
** <2016-07-20 Wed> Prepare lambda for Alex and robots, Parsers in HaskellBook
   pdf-tools:
   https://github.com/politza/pdf-tools
   
*** DONE : prepare second laptop for Alex
    DEADLINE: <2016-07-30 Sat>
** <2016-07-21 Thu> Continue learning Parsers, following Julia manual
   [[file:~/Documents/haskell-programming-0.11.2-screen.pdf::917]] Parser Combinators
   
** <2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators :maths:cs:philosophy:haskellbook:
   [[file:~/Documents/A%20Geometry%20of%20Approximation:%20Rough%20Set%20Theory%20Logic,%20Algebra%20and%20Topology%20of%20Conceptual%20Patterns.pdf::30][file:~/Documents/A Geometry of Approximation: Rough Set Theory Logic, Algebra and Topology of Conceptual Patterns.pdf]]
   @<-[[[*<2016-07-21 Thu> Continue learning Parsers, following Julia manual][<2016-07-21 Thu> Continue learning Parsers, following Julia manual]]
   ]
   @->[[[*HaskellBook][HaskellBook]]
       [[*<2016-07-27 Wed> Continue with Parsers][<2016-07-27 Wed> Continue with Parsers]]
      ]
   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/examples.hs]]
   [[docview:~/Documents/haskell-programming-0.11.2-screen.pdf::925]]

** <2016-07-24 Sun> Helm-Swoop search results, Machine Learning links
   https://github.com/ShingoFukuyama/helm-swoop M-i to switch to helm-swoop when searching (C-s, C-r)
   
   Machine Learning:
   http://neuralnetworksanddeeplearning.com/chap1.html
   http://codereview.stackexchange.com/questions/135794/neural-network-in-haskell - Neural Networks (NN) in Haskell
** <2016-07-27 Wed> Continue with Parsers
   @<-[[[*<2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators][<2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators]]
   ]
   @->[[[*: Continue working on Haskell Parser][: Continue working on Haskell Parser]]
   ]

   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs]]
   [[file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs]]
** <2016-07-28 Thu> Diary time format
   12/22/1988  Twentieth wedding anniversary!!
   &1/1.       Happy New Year!
   10/22       Ruth's birthday.
   * 21, *:    Payday
   Tuesday--weekly meeting with grad students at 10am
   Supowit, Shen, Bitner, and Kapoor to attend.
   1/13/89     Friday the thirteenth!!
   &thu 4pm    squash game with Lloyd.
   mar 16      Dad's birthday
   April 15, 1989 Income tax due.
   &* 15       time cards due.
   
*** TODO [#C] : write about Parsec/Trifecta differnce on blog.
** <2016-07-28 Thu> Fabric Engine:
*** TODO [#D] : finish a Fabric Engine tutorial when I've got nothing else to do.
   http://docs.fabric-engine.com/FabricEngine/2.3.0/HTML/GettingStartedGuide/canvastutorials.html
** <2016-08-05 Fri> Raspberri Pi
   https://www.raspberrypi.org/documentation/
** <2016-08-07 Sun> Org-mode images
   C-c C-x C-v org-mode-toggle-inline-images
** <2016-08-08 Mon> Machine Learning                                     :ai:
   [[file:~/Documents/A%20'Brief'%20History%20of%20Neural%20Nets%20and%20Deep%20Learning,%20Part%201%20%E2%80%93%20Andrey%20Kurenkov's%20Web%20World.html][file:~/Documents/A 'Brief' History of Neural Nets and Deep Learning, Part 1 – Andrey Kurenkov's Web World.html]]
   (local files, html copies), etc.
** <2016-08-18 Thu> X3: Litcube mods:
   http://forum.egosoft.com/viewtopic.php?t=370506
   http://forum.egosoft.com/viewtopic.php?t=370506
   [[file:~/Downloads/CockpitmodNGforLU.zip][file:~/Downloads/CockpitmodNGforLU.zip]] - cockpit mod.

** <2016-08-19 Fri> Anki, Dutch, Tesaurus
*** TODO [#A] : Continue converting [[file:~/Documents/Dutch/Vocabulary/total.kvtml][file:~/Documents/Dutch/Vocabulary/total.kvtml]] into Anki
** <2016-08-21 Sun> HaskellBook
*** Notes on HaskellBook:
    Polymorphism in Haskell means being able to write code in terms
    of values which may be one of several, or any, type. Polymor-
    phism in Haskell is either parametric or constrained.

    A typeclass is a set of operations deﬁned with respect to a poly-
    morphic type. When a type is an instance of a typeclass, values
    of that type can be used in the standard operations deﬁned for
    that typeclass. 

    Data constructors in Haskell provide a means of creating values
    that inhabit a given type.

    Type constructors in Haskell are not values and can only be used in
    type signatures.

    Data declarations are how we refer to the entire deﬁnition that 
    begins with the data keyword.

    Each typeclass oﬀers a standard set of functions
    that can be used across several concrete types.

    Uncurried functions: One function, many arguments
    Curried functions: Many functions, one argument apiece

    Damas-Hindley-Milner type system

    188p.
    
** <2016-08-22 Mon> Machine Learning by Tom Mitchel:
   WELL-POSED LEARNING PROBLEMS:

   Definition: A computer program is said to learn from experience E with respect
   to some class of tasks T and performance measure P, if its performance at tasks in
   T, as measured by P, improves with experience E.
   p.2 TM:ML

   [[file:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf]]
   [[file:~/Documents/tictactoe.kra]]
   [[file:~/Pictures/Mathematics/tictactoe.png][file:~/Pictures/Mathematics/tictactoe.png]]
** <2016-08-23 Tue> Rocket, Gravity, n-body
   @<-[[[*Rocket! n-body sim, particles, houdini][Rocket! n-body sim, particles, houdini]]]
   @->[[[*<2016-03-16 Wed> Gravity, Rocket][<2016-03-16 Wed> Gravity, Rocket]]
   ]
   [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc][file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]
** <2016-08-24 Wed> Parsers, Backup, Fixing sink
   @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]]
*** IN-PROGRESS : Continue working on Haskell Parser
    @<-[[[*<2016-07-27 Wed> Continue with Parsers][<2016-07-27 Wed> Continue with Parsers]]]
    @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]]
    "Understanding the parsing process", p.918
    [[file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs][file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs]]
    [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs][file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs]]
    http://unbui.lt/#!/post/haskell-parsec-basics
    https://artyom.me/aeson
*** DONE : Fill in the holes betwee the tiles near the sink with fugas (in the schoor)
    DEADLINE : <2016-08-24 Wed>
*** DONE [#A] : Backup pictures from MacBookPro to a HDD
*** DONE [#A] : Clone the backup HDD    
    SCHEDULED: <2016-09-05 Mon>
** <2016-08-25 Thu> Continue with parsing:
   [[*: Continue working on Haskell Parser][: Continue working on Haskell Parser]]
** <2016-08-26 Fri> [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]   
** <2016-08-28 Sun> [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
** <2016-08-30 Tue> [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
** <2016-08-31 Wed> Rust language
   The language looks like an intersting blend between C and Haskell.
   https://www.reddit.com/r/haskell/comments/47rjr4/comparing_haskell_and_rust_which_to_choose_when/

   [[~/Projects/Rust/hello_world/main.rs]] - Rust Hello World!

*** TODO [#C] : Take a look at Phazon's library sometime:   
   https://github.com/phaazon/luminance-rs - Phazon's implementation of Luminance in Rust
   https://github.com/phaazon/luminance    - Phazon's Luminance graphics lib

** <2016-09-02 Fri> Trying out Substance Designer, Rust language, Haskell Parser
   [[file:~/Documents/Allegorithmic/Substance%20Designer/5/test.sbs][file:~/Documents/Allegorithmic/Substance Designer/5/test.sbs]] - playing with basic materials
*** Houdini Plugin for Substance Designer
INSTALLER_PATH=`pwd`

cd ~/houdini/houdini/dso
PLUGIN_PATH=`pwd`

echo "Welcome to the Substance Plugin for Houdini Installer"
echo "This will install the plugin to ${PLUGIN_PATH}"
while : ; do
    echo "Would you like to continue? [y or n]"
    read ans
    case $ans in
	y|Y)
	    break
	    ;;
	n|N)
	    echo "Installation cancelled."
	    exit 1
	    ;;
	*)
	    echo "Please enter y or n"
	    ;;
    esac
done

cd ${PLUGIN_PATH}
cp -r ${INSTALLER_PATH}/files/* .
echo "Installation Complete"



*** TODO [#C] : Add a rust.el to emacs same as haskell and others
*** IN-PROGRESS [#C] : Continue with Rust basics:
    https://doc.rust-lang.org/book/getting-started.html
    https://doc.rust-lang.org/book/the-stack-and-the-heap.html
    [[/home/madjestic/Projects/Rust/hello_world_new/]] Rust hello world project
    
*** TODO [#A] : Continue with Haskell Parsing
    @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]]

** <2016-09-04 Sun> Houdini Ocean, Haskell Parsers
*** Houdini Ocean, CmiVFX
   @->[[[*: Create Ocean effect in Houdini][: Create Ocean effect in Houdini]]
   ]

   [[file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids][file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids]]
   /home/madjestic/Projects/Houdini/Ocean/initial.hipnc
   [[file:~/Projects/Houdini/Ocean][file:~/Projects/Houdini/Ocean]]

   @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
   ]
** <2016-09-05 Mon> Jad Nohra gitHub                            :programming:
   https://github.com/jadnohra/tag
   https://github.com/jadnohra/learn

*** Emacs, save point
   Save Point Position
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Registers.html
   C-x r SPC r   
     Record the position of point and the current buffer in register
   
   C-x r j r
     Jump to the position and buffer saved in register

*** Perlin Noise:
    I would like to understand how does noise function work:
    http://flafla2.github.io/2014/08/09/perlinnoise.html
    https://en.wikipedia.org/wiki/Perlin_noise

*** Notes on Entropy
    @->[[[*<2016-09-06 Tue> Thoughts on Entropy:][<2016-09-06 Tue> Thoughts on Entropy:]]]

   [[/home/madjestic/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/][/home/madjestic/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/]]

** <2016-09-06 Tue> Guns Germs and Steal, Haskell Parser    :haskell:history:
*** Reading Guns Germs and Steal
   [[file:~/Documents/Jared%20Diamond%20-%20Guns%20Germs%20and%20Steel.pdf][file:~/Documents/Jared Diamond - Guns Germs and Steel.pdf]]

*** Haskell Parser
   (return 5) >>= (\x -> return x) -- a simple 'shuvel' example

   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs]]
   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/model.geo]]

**** typeClass use example:
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
module GeoParser where

import qualified Text.Parsec as P
import Text.Parsec ((<?>))
import qualified Data.ByteString.Lazy.Char8 as BC       
import Control.Applicative
import Control.Monad.Identity (Identity)
import qualified Data.ByteString.Lazy as B       

parse rule text = P.parse rule "source" text  
      
parse1 rule text = do
  let foo = P.parse rule "source" text
  return foo

jsonFile :: FilePath
jsonFile = "model.geo"            

getJson :: IO B.ByteString
getJson = B.readFile jsonFile          

-- parse (P.char '[') text
getText = do
  textJson <- getJson
  let text = BC.unpack textJson -- here file gets read as a bytesting and byte8 representation is converted into [Char]
  return text
   
sepByComma :: P.Parsec String () ()
sepByComma = do
  P.spaces
  P.char ','
  P.spaces
  return ()

class FromParserType a where
      toString :: Either P.ParseError a -> [Char]
instance FromParserType [Char] where
         toString :: Either P.ParseError [Char] -> [Char]
         toString (Right x) = x
         toString (Left _ ) = "source"
instance FromParserType ([Char], [Char], [Char]) where
         toString :: Either P.ParseError ([Char], [Char], [Char]) -> [Char]
         toString (Right (x,y,z)) = x ++ "." ++ y ++ "." ++ z
         toString (Left _ ) = "source"
instance FromParserType () where
         toString :: Either P.ParseError () -> [Char]
         toString _ = "ok"


-- fileVersion :: P.ParsecT String () Identity ([Char], [Char], [Char])
fileVersion = do
            P.char '[' `P.endBy` P.char '\n'
            P.char '\t' >> P.char '\"'
            P.many1 P.letter >>  P.char '\"'>> sepByComma >> P.char '\"'
            majorVer <- P.many1 P.digit
            P.char '.'
            minorVer <- P.many1 P.digit
            P.char '.'
            buildVer <- P.many1 P.digit
            P.char '\"' >> P.char ',' `P.endBy` P.char '\n'
            return ([majorVer, minorVer, buildVer])

hasIndex = do
         P.char '\t' >> P.char '\"'
         P.many1 P.letter >>  P.char '\"'>> sepByComma
         indexVal <- P.many1 P.letter
         return (indexVal)
         
data Geo = Geo { fileversion :: String
               , hasindex    :: String}

-- main = do
--      text <- getText
--      print text
--      bar <- parse1 (fileVersion) text
--      print $ toString bar     

** <2016-09-07 Wed> Parsers, Manstein plan :history:
*** TODO [#D] : Read about Manstein plan on wiki
    https://en.wikipedia.org/wiki/Manstein_Plan

*** TODO [#C] : Refactor GeoParser with Trifecta:
    SCHEDULED : <2016-09-07 Wed> <2016-09-08 Thu>
    [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParserTrifecta.hs][file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParserTrifecta.hs]]
    [[file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs]]
    [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/model.geo][file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/model.geo]]
    
** <2016-09-09 Fri> Parsers progress, Fluids                :haskell:houdini:

   [[file:img/parsing_progress_00.png][file:~/org/img/parsing_progress_00.png]]
   - it seems like most basics are covered (short of aeson).
     I should continue with parsing the geo file in one go,
     populating relevant data structure in the process,
     returning the resulting data.
     [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParser.hs]]

    [[/home/madjestic/Documents/cmiVFX%20-%20Houdini%20Advanced%20FLIP%20Fluid%20Systems/cmivfx%20Houdini%20AdFLIP.mp4]]
    @->[[[*<2016-09-10 Sat>][<2016-09-10 Sat>]]]

** <2016-09-10 Sat>
   stopped at 9:02 @->[[[*Fluids][Fluids]]]
** <2016-09-11 Sun> Maths :math:
** <2016-09-12 Mon> cont.
   Reading G.H.Hardy "A Mathematician's Apology" :
   [[file:~/Documents/Hardy-AMathematiciansApology.pdf][file:~/Documents/Hardy-AMathematiciansApology.pdf]] p.101
   Appearance and Reality. F.H.Bradley
** <2016-09-13 Tue> Haskell, Category Theory
   Bartosz Milewski, Category Theory 1.2
   https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/
   https://www.youtube.com/watch?v=p54Hd7AmVFU&list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_&index=2
** <2016-09-14 Wed> Emacs Progress Matrix
*** DONE : set up formulas for Progress Matrix   
    http://orgmode.org/org.html#Advanced-features vsum
    [[*Progress Matrix][Progress Matrix]]
** <2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids
   [[file:~/Projects/Houdini/Lorenz/lorenz.hipnc][file:~/Projects/Houdini/Lorenz/lorenz.hipnc]] - made it pretty, just hit play

   @<-[[[*: Create Ocean effect in Houdini][: Create Ocean effect in Houdini]]]
   [[file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/model.hipnc][file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/model.hipnc]]
   [[file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/cmivfx_Houdini_AdFLIP.mp4][file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/cmivfx_Houdini_AdFLIP.mp4]] 22:54
   /home/madjestic/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/PRJ_Houdini_FLIP_Fluid_Systems/PRJ_Houdini_Ocean_Waves/chapter_1/houdini_files
   [[file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/PRJ_Houdini_FLIP_Fluid_Systems/PRJ_Houdini_Ocean_Waves/chapter_1/houdini_files/ocean_waves_v02.hip][file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/PRJ_Houdini_FLIP_Fluid_Systems/PRJ_Houdini_Ocean_Waves/chapter_1/houdini_files/ocean_waves_v02.hip]]

** <2016-09-16 Fri> Category Theory for Haskell programmers
   @->[[[*<2016-09-28 Wed> Parsec links, Category Theory][<2016-09-28 Wed> Parsec links, Category Theory]]]
*** DONE [#A] : Finish prioritizing tasks in Agenda mode   
*** TODO [#B] : Continue with watching Category Theory for Haskell programmers
   https://youtu.be/p54Hd7AmVFU?t=1594
** <2016-09-19 Mon> Continue with Houdini Fluids
   @->[[[*<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids][<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids]]]
   file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/cmivfx_Houdini_AdFLIP.mp4 15:06
** <2016-09-21 Wed> Haskell Parsers, Houdini fluids
   @->[[[*Parsers][Parsers]]
       [[*Haskell GeoParser:][Haskell GeoParser:]]
       [[*<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids][<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids]]]
** <2016-09-23 Fri> Haskell, JSON, parser
   https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/json - pizza example
** <2016-09-26 Mon> Credit Cards, BF2142
   https://www.icscards.nl/abnamrogb/login
   Login to ABNAmro -> Tools -> Credit Cards Online

   https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Registers.html marker registers position
   C-x r SPC r - save position in register 'r'
   C-x r j r   - jump to position 'r'

   https://battlelog.co/post.php?id=14194 BF2142
** <2016-09-28 Wed> Parsec links, Category Theory
   @<-[[[*<2016-09-16 Fri> Category Theory for Haskell programmers][<2016-09-16 Fri> Category Theory for Haskell programmers]]]
   https://github.com/madjestic/nu/blob/master/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/GeoParser.hs
   https://artyom.me/aeson
   http://book.realworldhaskell.org/read/using-parsec.html
   https://gist.github.com/zearen-wover/1692518
   http://newartisans.com/2012/08/parsing-with-haskell-and-attoparsec/
   http://stackoverflow.com/questions/2705386/parsec-haskell-lists
   https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/attoparsec
   https://hackage.haskell.org/package/parsec-3.1.11/docs/src/Text.Parsec.Char.html#oneOf
   http://unbui.lt/#!/post/haskell-parsec-basics
   
   https://goo.gl/Vm5K7e Category Theory 2.1
   epic  - surjectiv
   monic - injective

   epimorphism
   monomorphism
   https://www.youtube.com/watch?v=aZjhqkD6k6w Category Theory 3.1

   Emacs folding mode (yafolding-mode) M-RETg - yafolding-toggle-element
   
*** IN-PROGRESS [#A] : Continue with parsing: introduce Aeson for parsing JSON part of Geo (topology), based on Pizza example:
    https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/json
** <2016-09-29 Thu> Haskell Parser
   [[/home/madjestic/Projects/Haskell/Parser/Aeson/Flickr.hs]]
   [[file:~/Projects/Haskell/Parser/Aeson/photos.json::"farm":%207,]]
   http://gnclmorais.com/blog/aeson-and-nested-json/

   [[/home/madjestic/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/GeoParser.hs]]
   [[file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/model.geo::"indices",%5B1,5,4,0,2,6,5,1,3,7,6,2,0,4,7,3,2,1,0,3,5,6,7,4%5D]]
   https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/json
   
*** TODO [#A] : I need to add Aeson to GeoParser.hs - specify nested JSON desctiption as in Flickr.hs example.
