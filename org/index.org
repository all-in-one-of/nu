* Latex
  https://www.emacswiki.org/emacs/AUCTeX
* AI
  @<-:[[[*<2016-02-08%20Mon>][<2016-02-08 Mon>]]
       [[*<2016-08-22 Mon> Machine Learning by Tom Mitchel:][<2016-08-22 Mon> Machine Learning by Tom Mitchel:]]
  ]
  While playing with Gnus, I've recovered an old e-mail from Richard,
	he sent me a few pdf's on machine learning, among which was:
	[[file:~/Documents/Machine%20Learning%20in%20Action.pdf][file:~/Documents/Machine Learning in Action.pdf]]

  [[*Stylistic%20Analysis,%20Bias%20filtering,%20etc][Stylistic Analysis, Bias filtering, etc]]

  Learning AI/Machine Learning/Deep Learning
  http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning/
  http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning-part-2/

  Haskell Machine Learning:
  https://github.com/mikeizbicki/HLearn - Haskell library for machine learning
  https://github.com/mikeizbicki/subhask - a rewrite of Prelude for numerical computing

  Started working on a tic-tac-toe game as suggested by Tom Mitchel's book:
  [[file:~/Documents/tictactoe.kra]]
  [[file:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf]]
  [[docview:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf::25]]

* Games
  Witcher Steam: optirun -b primus %command%
  ~/Projects/Games/HoMM3/Heroes of Might and Magic III Complete Edition [GOG]
  ~/Projects/Games/wanger - maybe convert to ISO with app-cdr/iat ?
  (related thread:)
  https://forums.gentoo.org/viewtopic-t-797744-start-0.html

* Assembler
  [[*test][test]]
	I started doing some examples from [[file:~/Documents/nasm_unix.pdf][Столяров Ассемблер]]
	[[/home/madjestic/Projects/ASM]]

* b1
  @<-[[[*<2016-07-04%20Mon>%20I%20should%20look%20into%20Repa,%20Looking%20into%20Parsec,%20Leaving%20links%20for%20GLFW%20to%20look%20into%20later%20on%20b1:][<2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:]]]
 	Stock Exchange program, written in Haskell
  https://github.com/btmura/b1
  [[file:~/Projects/b1_glfw-b/b1/src/B1/Program/Chart/Main.hs][file:~/Projects/b1_glfw-b/b1/src/B1/Program/Chart/Main.hs]]
* Bash
	an interesting example of "loop over all files in a directory 
	and do stuff to each file:"
	[[file:/usr/local/include/Field3D/relink.sh]]
	[[~/Documents/Bourne_Shell_Scripting.pdf]]
* Bookmarks:
** Programming
*** Haskell
		[[https://github.com/madjestic/mu/tree/master/Projects/Haskell/Junk/heterogenous_lists][finished a small heterogenous collections example.]]
		[2014-11-10 Mon]
		
		[[*edX:%20FP101x][edX]] A course I intend to finish
		Mon Nov 10 22:40:49 CET 2014

		Monads, Monoids, Functors:
		http://learnyouahaskell.com/making-our-own-types-and-typeclasses
		http://learnyouahaskell.com/functors-applicative-functors-and-monoids
		http://learnyouahaskell.com/a-fistful-of-monads

**** FFI
[[http://www.haskell.org/haskellwiki/FFI_cook_book][FFI Cook Book]]
[[http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html][RealWorldHaskell FFI]]

** Emacs
*** Org Mode
**** Links
		 [[http://orgmode.org/manual/Handling-links.html][Handling Links]]
*** Mail Mode
		http://www.emacswiki.org/emacs/GnusGmail
		https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org
		https://eschulte.github.io/emacs24-starter-kit/starter-kit-gnus.html
		<2015-12-02 Wed>

		The initial setup was a breeze.
*** Jabber Mode
		http://www.emacswiki.org/emacs/JabberEl
		<2015-12-02 Wed>

* Books
	[[/home/madjestic/Documents/Physically_Based_Rendering.pdf][Physically Based Rendering]]
	[[/home/madjestic/Documents/Naming_Infinity.pdf][Kolmogorov: "Imena beskonechnosti"
	Naming Infinity]]
	sonin.ru
	Мифы экономики
	[[/home/madjestic/Documents/Freakonomics.djvu][Freakonomics]]	
	libgen.ru - fake DNA

* Cognitive science
	P != NP
	http://en.wikipedia.org/wiki/P_versus_NP_problem

	Vertex Cover problem:
	http://en.wikipedia.org/wiki/Vertex_cover

	Multivariad Revolving algorythmic complexity (book)

	http://fpt.wikidot.com/

	https://www.mturk.com/mturk/welcome

	http://en.wikipedia.org/wiki/Computers_and_Intractability (book on algorithms)

	http://www.amazon.com/Computers-Intractability-NP-Completeness-Mathematical-Sciences/dp/0716710455

	Theory of the mind:
	- How do agents know what other agents know?
	- How do you simulate orders of the mind?

	Prediction building part of the brain is not a result of processing by
	Sensor-Motoric part of the brain.

	Satisfaction of search problem.

	http://www.rageproject.eu/

	Higher-order theory of mind in Tacit Communication Game
	http://www.harmendeweerd.nl/papers/20140908_Tacit_Communication_Game.pdf

** Music and congnition II
	 
	~4% of the population share amusia

	Scale, Contour, interval, Rhythm, Meter (Memory)
	Pitch test

	Dysmusia vs. Dysmelodia

	Information content of a note

	florence foster jenkins (amusic opera singer)

	Bayesuan generative models

	posterior       = likelihood, priority
	                  P(cause|signal)*P(cause)/P(signal)
	P(cause|signal)
	...

	P(M): the likelhood  of individual metres (estimated from a corpus of data)

	

	Melody segmentation:
	
	Unexpected note - high information content, low probability

	On Entropy in Music:
	http://ir.uiowa.edu/cgi/viewcontent.cgi?article=1844&context=etd (p.7)

	https://mitpress.mit.edu/books/platos-camera

	Steven Pinker
	http://www.newrepublic.com/

* Computer Science
  Great Dutch:
  https://en.wikipedia.org/wiki/Edsger_W._Dijkstra - first compiler for ALGOL-60
  Haskellers:
  http://maartenfokkinga.github.io/utwente/
  http://www.cs.uu.nl/staff/doaitse.html

* Coursera
** Machine Learning  
   [[*Machine Learning][-> Machine Learning]]
   [[*AI][-> AI]]
   [[*2016-08-22 Mon Machine Learning by Tom Mitchel:][-> 2016-08-22 Mon Machine Learning by Tom Mitchel:]]
   
*** Week 2 Logistic Regress
*** Week 3 Neural Networks and multiclass classification
**** Excercise
     [[file:~/Documents/machine-learning-ex3][file:~/Documents/machine-learning-ex3]]
* Dutch
  http://context.reverso.net/vertaling/nederlands-engels
  http://www.verbix.com/webverbix/go.php?T1=uitkomen&Submit=Go&D1=24&H1=124
  
* Editing a movie:
	(lossless codec)
	ffmpeg -i model.rop_comp1.%04d.png -c:v huffyuv out.avi
	then import and re-export through pitivi

* Emacs Calendar: cfw-calendar
  cfw-calendar https://github.com/kiwanami/eWmacs-calfw
  # TIPS:
  r - refresh view, redraw cells (also re-scale to fit the window)
** Extras
  http://blog.idorobots.org/entries/you-earned-15-xp-in-getting-things-done_.html#preview-more - gamification, it turned out to be not so great.
  I think a better idea would be to count entries by date and accumulate days per tag, hence giving an overall score.
  TODOs do not need a score, that's a stupid idea.
  http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html
  http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html
  https://github.com/kiwanami/emacs-calfw
  https://www.emacswiki.org/emacs/CalendarMode
  https://www.emacswiki.org/emacs/DiaryMode

  M-x load-calendar
  M-x cfw:open-org-calendar
  . - go to today: https://www.gnu.org/software/emacs/manual/html_node/emacs/Specified-Dates.html

  https://www.gnu.org/software/emacs/manual/html_node/emacs/Diary.html (dates format)

* Entropy
** Machine Learning
   @<-[
   ]
	 http://www.cs.cmu.edu/~tom/mlbook.html	 

	 [[file:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf]]
	 "...or personal software assistants learning the evolving interests of their users in order to highlight especially relevant stories from the online morning newspaper."

	 Definition: A computer program is said to learn from experience E with respect
	 to some class of tasks T and performance measure P, if its performance at tasks in
	 T, as measured by P, improves with experience E.

	 three features: the class of tasks, the measure of performance to be improved, and
	 the source of experience.

	  a database system that allows users to update data entries

		"learning" -  the class of programs that improve through experience. 

		problem of credit assignment, or determining the degree to which each move in
		the sequence deserves credit or blame for the final outcome. 

		The first design choice we face is to choose the type of training experience from
		which our system will learn.
		A second important attribute of the training experience is the degree to which
		the learner controls the sequence of training examples. 
		A third important attribute of the training experience is how well it repre-
		sents the distribution of examples over which the final system performance P must
		be measured.

		most current theory of machine learning rests on the crucial assumption that
		the distribution of training examples is identical to the distribution of test ex-
		amples.

		On the other hand, the more expressive the representation, the more training data
		the program will require in order to choose among the alternative hypotheses it
		can represent

		 the approach of iteratively estimating training values based on estimates of
		 successor state values can be proven to converge toward perfect estimates of V_train

		 performance system, critic; generalizer, and experiment generator. Many machine learning systems can-be usefully characterized in 

** Database engines (SQL/NoSQL)
	 https://www.digitalocean.com/community/tutorials/understanding-sql-and-nosql-databases-and-different-database-models
	 https://www.digitalocean.com/community/tutorials/a-comparison-of-nosql-database-management-systems-and-models
	 https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems
	 <2016-01-04 Mon>
	 Finished reading: apparently SQLite is the best choice for me:
	 Some extra reading on the topic:
	 http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/
	 <2016-01-11 Mon>
** <2016-09-06 Tue> Thoughts on Entropy:   
   
   It's, basically, a set of linked lists.  It's a tree, where a leaf can
   reference any another part of a tree (a node, a sub-tree).  Hence, 
   it's a fractal, where any such node can be 'evaluated' and replaced
   by such subtree.  The number of such iterations is controlled by a user,
   but should be, preferably, limited to a controllable number of branches.

   Org-mode prototype of this should be able to replace an org-link, linking
   another org-entry, with respective org-entry.  If the newly replaced entry
   contains more links to org-entries, they can be evaluated again.

   The graphical interface should present a visually pleasing picture
   of connected nodes of a tree-like structure with GUI exposing a limited
   necessary functionality.  This can be based on an org file, compatible
   with emacs org-mode.  I.o.w. a GUI is a front-end, providing extra
   visualisation features, which org-mode lacks, but org-mode remains
   a back-end and a prototyping engine.


   The initial (org-mode) prototype can be achieved with a parser, which
   parses the current org-mode file and replaces org-links with respective
   entries and saves the file in read-only mode, saves a copy of the original
   file.  The user then needs to revert the buffer to reflect the new changes.

   Afterwords the original needs to be restored.
   
   This will be a functinal equivalent of the solution.

* FRP
  @->[[[*FRP][FRP]]
      [[*<2016-05-19%20Thu>][<2016-05-19 Thu>]]
      [[*<2016-06-12%20Sun>][<2016-06-12 Sun>]]
  ]
     I ended up with OpenGL animation 'sort of working' - buffer update is busted and I should attempt to 
   follow Jekor's instructions more closely, that is use OpenGL building blocks from cuboid first and then
   refactor it to use NGL
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor.blinks_sort_of_works]]
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]

    Jekor, Yampa:
    https://youtu.be/-IpE0CyHK7Q?t=425 - Jekor's yampa tutorial part 1
    [[file:~/Documents/FRP%20(Haskell_Yampa)%20with%20the%20game%20Cuboid%20(Part%201)%20-%20Episode%209--IpE0CyHK7Q.mkv][file:~/Documents/FRP (Haskell_Yampa) with the game Cuboid (Part 1) - Episode 9--IpE0CyHK7Q.mkv]]

    https://youtu.be/T3xXebIr8AM?t=980 - Jekor's yampa tutorial part 2
    [[file:~/Documents/FRP%20(Haskell_Yampa)%20and%20OpenGL%20with%20Cuboid%20(Part%202)%20-%20Episode%2010-T3xXebIr8AM.mkv][file:~/Documents/FRP (Haskell_Yampa) and OpenGL with Cuboid (Part 2) - Episode 10-T3xXebIr8AM.mkv]]
    :: stopped at 00:15:19
    Yampy Cube:
    https://youtu.be/T7XwTolu9YI?t=2506

    [[file:~/Projects/Haskell/yampaTutorial/yampa.pdf]]

** <2016-06-25 Sat>
    stopped watching at 00:15:19
    [[file:~/Documents/FRP%20(Haskell_Yampa)%20and%20OpenGL%20with%20Cuboid%20(Part%202)%20-%20Episode%2010-T3xXebIr8AM.mkv][file:~/Documents/FRP (Haskell_Yampa) and OpenGL with Cuboid (Part 2) - Episode 10-T3xXebIr8AM.mkv]]

    It's working, but need to make it work with NGL now

* Genome
	 [[http://en.wikipedia.org/wiki/Human_Genome_Project][Human Genome Project]] on wiki
	 [[http://en.wikipedia.org/wiki/Ploidy#Haploid_and_monoploid][Ploidy]] on wiki
	 [[http://en.wikipedia.org/wiki/Cytokinesis][Cytokinesis]] on wiki
	 [[http://en.wikipedia.org/wiki/Fission_(biology)][Binary Fission]] on wiki
** GTK+
	 [[http://www.micahcarrick.com/gtk-glade-tutorial-part-1.html]]

* Gentoo
  [[file:todo.org::*Create%20a%20custom%20overlay][Create a custom overlay]]

* Godot Engine
** Animated Ocean surface:
	 Something along the lines with:
	 program a new object in C++, sample verted positions..:
	 [[https://github.com/okamstudio/godot/wiki/advanced]]
	 [[https://github.com/okamstudio/godot/wiki/class_mesh]]

* HaskellBook
  @<-[[[*<2016-07-23%20Sat>%20Theory%20of%20Perception:%20The%20theory%20of%20Approximation%20Spaces,%20and%20Rough%20Sets%3B%20Parser%20Combinators][<2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators]]
     ]
  [[file:~/Documents/haskell-programming-0.11.2-screen.pdf][HaskellBook]]

* Haskell tips
** Commenting code:
  {-| @Event t a@ represents a stream of events as they occur in time.
Semantically, you can think of @Event t a@ as an infinite list of values
that are tagged with their corresponding time of occurence,

> type Event t a = [(Time,a)]
-}

this code should be shown in haddock

** Comments with shm:
	 M-; # comment text region
	 (with commented region selected) M-; # uncomment text region
** Tags:
	 to generate tags use:
	 ~/bin/tags
*** hothasktags
find . | egrep '\.hs$' | xargs hasktags > TAGS
[[file:~/bin/tags][file:~/bin/tags]]

** Executable size
[[http://stackoverflow.com/questions/6115459/small-haskell-program-compiled-with-ghc-into-huge-binary][Don Stuart on stack exchange]]

** a working GLFW/reactive-banana example?
   stack overflow question
** automatically add a type signature
   C-u C-c C-t
** flymake-compile
   C-c b

* Haskell Tutorial
  @->[[[file:~/Projects/Haskell/haskell-tutorial][haskell-tutorial]]]
** <2016-05-23 Mon>
  https://en.wikibooks.org/wiki/Haskell/Getting_set_up
  [[file:~/Projects/Haskell/haskell-tutorial/Lists_and_tuples/Main.hs]]

* Houdini
  [[*Rocket! n-body sim, particles, houdini, Godika][@<Rocket! n-body sim, particles, houdini, Godika]]
  [[*mantra][@<>mantra]]
	/home/madjestic/Projects/Houdini/Fractals/model.hipnc
	- fractals
	- line intersection

		[2015-10-27 Tue]
		Continue reading about VRAY procedural:
		http://www.peterclaes.be/blog/?tag=vrayprocedural

  - FLIP:
   [[file:~/Documents/FLIP%20Fluids%20(Jeff%20Wagner)%20_%20Houdini%20ILLUME%20Webinar-182074285.mp4][file:~/Documents/FLIP Fluids (Jeff Wagner) _ Houdini ILLUME Webinar-182074285.mp4]]
   [[file:~/Documents/FLIP%20Part%20Two%20(Jeff%20Wagner)%20_%20Houdini%20ILLUME%20Webinar-189254805.mp4][file:~/Documents/FLIP Part Two (Jeff Wagner) _ Houdini ILLUME Webinar-189254805.mp4]]
   [[file:~/Documents/FLIP_webinar_share_files][file:~/Documents/FLIP_webinar_share_files]]

  - Mandepbrot, FRP, OpenGL, Yampa:
    [[*: @Yampa @SDL2 @Mandelbrot Re-write to support key-hold][: @Yampa @SDL2 @Mandelbrot Re-write to support key-hold]]

  [[file:todo.org::*:%20Waves%20tutorial%20sidefx][< : Waves tutorial sidefx]]
  [[file:todo.org::*:%20Waves%20tutorial%20cmivfx%202%20%5B%5Bfile:index.org::*Houdini%5D%5BHoudini%5D%5D][< : Waves tutorial cmivfx 2 Houdini]]
*** Hooking up a PS3 controller to mu
		It's working.
		Event stream can be read from [[file:/dev/input/js0]]
		Fri May 30 00:31:18 CEST 2014
*** Reading joystick input: :python: :ps3: :houdini:               :joystick:

		http://scaryreasoner.wordpress.com/2008/02/22/programming-joysticks-with-linux/
		https://www.kernel.org/doc/Documentation/input/joystick-api.txt
		http://stackoverflow.com/questions/16032982/getting-live-info-from-dev-input

		[2015-10-25 Sun]
		As a temporary measure: https://github.com/ArthurYidi/Houdini-Joystick
    
		Sony PLAYSTATION(R)3 Controller (/dev/input/js0)
    
    <2016-02-08 Mon>
    In order to use:
    houdini joystick-examples.hip
    python joystick.py
    Use Chop Pipe In to read the joystick data.


*** Rendering ocean nicely
    (cmivfx tutorial)
    https://rutracker.org/forum/viewtopic.php?t=5114569
    https://rutracker.org/forum/viewtopic.php?t=5079199
    https://rutracker.org/forum/viewtopic.php?t=4257762
    [[file:todo.org::*:%20Work%20on%20a%20small%20example%20of%20gushing%20water%20effect][>: Work on a small example of gushing water effect]]
    [[file:todo.org::*:%20Set%20up%20water%20shader][>: Set up water shader]]
* iptables
	https://wiki.archlinux.org/index.php/Iptables
	https://wiki.gentoo.org/wiki/Iptables#IPv6.5B2.5D.5B.E2.80.93_1.5D
	http://www.howtogeek.com/177621/the-beginners-guide-to-iptables-the-linux-firewall/

	quick search shows that iptables requires to set up the rules for each connection
	individually, which seems tedious.  https://github.com/themighty1/lpfw seems to 
	address that, however it seems to support IPv4 only.... investigate further.

* IRC
	IRCnet Server : open.ircnet.net

* JS
  http://elm-lang.org/
  Haskell-like language for Web-GUIs
* Ocean Effect
** IN-PROGRESS [#A] : Create Ocean effect in Houdini
   @<->[[[*<2016-09-04 Sun> Houdini Ocean, CmiVFX][<2016-09-04 Sun> Houdini Ocean, CmiVFX]]
   ]
*** Study Materials   
    [[file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids][file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids]]
    [[file:~/Documents/cmiVFX%20-%20Houdini%20Fluid%20Effects%20For%20TDs][file:~/Documents/cmiVFX - Houdini Fluid Effects For TDs]]
    [[file:~/Documents/Digital%20Tutors%20-%20Introduction%20to%20Fluid%20Simulations%20in%20Houdini][file:~/Documents/Digital Tutors - Introduction to Fluid Simulations in Houdini]]
    [[file:~/Documents/Introduction%20to%20Fluid%20Mechanics.pdf][file:~/Documents/Introduction to Fluid Mechanics.pdf]]
    
*** Work Materials
   /home/madjestic/Projects/Houdini/Ocean/initial.hipnc
   [[file:~/Projects/Houdini/Ocean][file:~/Projects/Houdini/Ocean]]

* How to use Journal?

** Basics

M-return       | to start a new entry |
M-right/M-left | to change the depthe of insertion |
C-u M-! date   | to insert date |

*** Haskell
		[[*Haskell%20tips][Haskell tips]]
** New Deep Entry

** TODOs

	 S-right/S-left to change the status

	 C-c . to insert timestamp

** List and markup
  1 one
  1 two
*bold*
/italic/
=code=

** Links [[*Links][*]]
   C-c l     (org-store-link)       | to store link to current location
   C-c C-L to store the link        |
   C-c C-l to inser the link        |
   C-c C-l on existin link to edit  |
   [[http://orgmode.org/manual/Handling-links.html][on_Links]]
   [[http://orgmode.org/manual/External-links.html][gentoo]]
   [[docview:~/Downloads/Abbelian_Categories.pdf::100][PDF]]
	 [[docview:~/Projects/gmsg/basic_des/basic.pdf::1][open_pdf with docview]]
	 S-enter create a symlink to a current file in dired

* HNGL
*** on HNGL

>> Fri Dec 20 11:07:18 CET 2013
>> Fri Dec 20 16:58:16 CET 2013
>> Journal #3 (#1 and #2 got lost -_-)

Editable -> Instancable -> Drawabale


Graphics.HNGL.Rendering
Graphics.HNGL.Data



toInstancable :: Editable -> Instancable

toDrawable :: Instancable -> Drawable

draw :: Drawable -> IO ()

toAnimatable :: Drawable -> Animation -> Animatable

data Animation = Time Freq

data Time = Float

data Freq = Float

animate :: Animatable -> IO ()
*** HNGL progress
[[file:todo.org::*:%20simplify%20tutorial10%20to%20only%20do%20what%20it's%20supposed%20to%20do:][: simplify tutorial10 to only do what it's supposed to do:]]
[[file:todo.org::*:%20port%20the%20code%20to%20GLFW%20->%20GLFW-b][: port the code to GLFW -> GLFW-b]]
[[https://github.com/madjestic/Haskell-OpenGL-Tutorial/issues/2][proposed by listx]]
[[http://hackage.haskell.org/package/GLFW-0.5.2.0/docs/Graphics-UI-GLFW.html][GLFW on Hackage]]
[[http://hackage.haskell.org/package/GLFW-b][GLFW-b on hackage]]
[[http://www.tapdancinggoats.com/opengl-in-haskell-glfw-b-boilerplate.htm][GLFW-b Boilerplate]]
[[http://www.tapdancinggoats.com/haskell-life-repa.htm][Conway's Game of Life with GLFW-b]]
[[file:todo.org::*:%20introduce%20support%20for%20vertex%20colors][: introduce support for vertex colors]]
[[file:todo.org::*:%20Vertex2%20->%20Vertex4][: Vertex2 -> Vertex4]]
[[file:todo.org::*:%20polivariadic%20createWindow:][: polivariadic createWindow:]]
[[file:todo.org::*:%20polivariadic%20intiResources:][: polivariadic intiResources:]]
**** Wed Jan 29 00:35:22 CET 2014 on Rendering.hs, missing square
I eddited the [[~/Projects/Haskell/OpenGL/Haskell-OpenGL-Tutorial/tutorial04/NGL/Rendering.hs][Rendering.hs]] file with intention to introduce a second 
vertex array object to store color data, the code compiles, but the
blue square seems to be missing now - need to investigate the situation.
Too tired now.

> Fixed.

[[file:todo.org::*:%20Texture%20Support][< : Texture Support]]
[[file:todo.org::*:%20Make%20Elegant,%20Clean-up][< : Make Elegant, Clean-up]]

* Kappa Quick Notes
	Quick notes:

** ### VIM TIPS           ###
   
1) <Ctrl>+l to switch off highlights in vim
2) ds" - to remove "" around a word
3) \\cc   - comment out
3.5) \\cu - uncomment
4) cs]} - surround with {}
5) :%s/foo/bar/g - exchange all instances of foo with bar
6) ctrl+R - redo
   
2) Start ghci with gloss, so that it does not hang:
ghci -fno-ghci-sandbox 

** ### SYSTEM MAINTENANCE ###

   [[file:~/Documents/fwunixref.pdf][Unix Linux Reference Card Cheatsheet]]
   http://www.gauravkgupta.com/7-neat-linux-tricks-newbies-need-know/

   3) UPDATE PORTAGE:
   Emerge --sync
   emerge --update --deep --with-bdeps=y --newuse world
   emerge --update --deep --newuse world
   # delete unused dependencies:
   emerge --depclean 
   # rebuild missing dependencies
   # revdep-rebuild
   revdep-rebuild -ip

   # timer/date update
   nu madjestic # hwclock --set --date="12/21/2015 19:23:00"
   nu madjestic # hwclock --hctosys --localtime
   nu madjestic # ntpdate pool.ntp.org


   # Backup using dd's
   dd if=/dev/sda of=/dev/sdb bs=4096 conv=noerror,sync

** ### Kernel Upgrade     ###
   # copy old config

	 make oldconfig
	 make modules_prepare
	 make && make modules_install
	 cp ./arch/x86/boot/bzImage /boot/kernel-3.10.7-gentoo
	 eselect kernel list
	 eselect kernel set 1
	 grub2-mkconfig -o /boot/grub/grub.cfg

** ### EMACS TIPS         ###
   @<->[
   [[*Emacs%20tips][Emacs tips]]
   ]
   # turn off line-wrapping:
   M-x toggle-truncate-linesd
   
   # break long lines automatic
   M-x auto-fill-mode

** ### MISC               ###
4) Find out your own IP:
wget -q -O - checkip.dyndns.org|sed -e 's/.*Current IP Address: //' -e 's/<.*$//'
5)check running services:
rc-status
6)make ghc keep intermediary files: it will create (won't delete technically) /tmp/ghc${pid} with intermediate files
ghc -keep-tmp-files foo.hs

** ### PYTHON             ###
python -m cProfile foo.py

** ### iptables           ###
/etc/init.d/iptables 
/etc/conf.d/iptables

** ### GIT                ###
http://git-scm.com/book/en/Git-on-the-Server-Hosted-Git

# add all files in 
git add ./Projects
# commit added files
git commit -a
# write the changes
git push

# list latest commits:
git log | head
# commit aed9a0bd3e6ce9168af728991ae85a754a25573a
# Author: madjestic <madjestic13@gmail.com>
# Date:   Mon Dec 28 01:29:18 2015 +0100

#     adding things before breaking things

# commit 3a7658b872396f377ac6473f2c827bff0e0d7160
# Author: madjestic <madjestic13@gmail.com>
# Date:   Tue Dec 15 09:37:05 2015 +0100

# list files in a commit:
git ls-tree --name-only aed9a0bd3e6ce9168af728991ae85a754a25573a
<2015-12-28 Mon>

# syncing a fork:
[[https://help.github.com/articles/syncing-a-fork/][Syncing a fork]]

# UnrealEngine4 
[[https://github.com/EpicGames/UnrealEngine/blob/promoted/Engine/Build/BatchFiles/Linux/README.md]]

** ### XMONAD             ###
# application fast start
# WINDOWS button is the one with the MSWindows logo on it
WINDOWS-p

** ### EMACS              ###
*** ## CPP
		# Enable semantic auto-complete (?)
		semantic-complete-self-insert
		# Browses the local document with your browser. On a module import line, the document of the module is browsed. On a function or type, its document is browsed.
		M-C-d 
		# Envoke help on a topic:
		C-h f iedit-mode <RET>
		# Assigning keys
		(global-set-key (kbd "C-c a") 'doodlebug)
		# not sure what it is but may be useful:
		(lookup-key (current-global-map) (kbd "C-c a"))
		# Turn on/off line breaks:
		(toggle-truncate-lines)

		# A Backup Script with rsnapshot
		#!/bin/sh
		#
		#echo "### RSNAPSHOT DAILY ###"
		#mount /mnt/backup && rsnapshot -c /etc/rsnapshot.d/daily.conf daily || echo "Backup failure"
		#umount /mnt/backup
		#echo
		qmake -o Makefile triangle.pro

** ### STEAM              ###
	 MESA_GL_VERSION_OVERRIDE=4.0 MESA_GLSL_VERSION_OVERRIDE=400 %command%
** ### MISC               ###
	 ffmpeg -i movie.%04d.png -c:v libx264 -r 30 out_x264.avi

* Kind of interesting
  [[*2017-05-05 Fri Links][2017-05-05 Fri Links]]
    Build Your Own Lisp:
    http://buildyourownlisp.com/chapter1_introduction#about
* Life Hacks
** Tax-return related papers:
	  Annual Mortgage Statement 
		Jaaropgraaf
		Student Costs
		WOZ
** Delivery Service
	 +31686093284
** Building company (the guy who made a good impression of himself)
   "kenza bouw b.v."
   Vredeweg 5a
   1505 hh zaandam

* Linux Format
  [[file:~/Documents/Linux_Format_March_2016.pdf]]
* mantra
  [[file:todo.org::*:%20Investigate%20Mario's%20glass%20shader:][<{#B}:	Investigate Mario's glass shader:]]
  [[*Houdini][<>Houdini]]
	Houdini Help:
	http://127.0.0.1:48626/render/
	http://127.0.0.1:48626/vex/contexts/shading_contexts

** tests
	 [[/home/madjestic/Projects/Houdini/Mantra/tests/test_01.hipnc]]
	 A simple sphere, occlusion, GI.

	 [[/home/madjestic/Projects/Houdini/Mantra/tests/test_02.hipnc]]
	 particles shaded as speric volumes
	 
	 [[/home/madjestic/Projects/Houdini/Mantra/tests/test_03.hipnc]]
	 Basic shapes, experiments with shading
	 
** PBR
	 [[/home/madjestic/Documents/pbr.pdf]]
	 Physically Based Rendering
	 <2016-01-05 Tue>
** Wireframe rendering
	 [[/home/madjestic/Projects/Houdini/Render/Wire_Frame_Render/model.hipnc]]
	 <2016-01-05 Tue>

* Markov Chains...
	http://www.dartmouth.edu/~chance/teaching_aids/books_articles/probability_book/Chapter11.pdf
* MARVIN
  Modelling a MARVIN character from HGTG
  [[file:~/Projects/Houdini/MARVE]]
  [[file:~/Projects/Houdini/MARVE/3d-coat/model.3b]]
  [[file:~/Projects/Houdini/MARVE/model.hipnc]]
  [[file:~/.contexts/MARVE]]

* Mathematics
	The Zakon Series on Mathematical Analysis
	[[~/Documents/Mathematics/zakon-basic-a4-one.pdf][Basic Concepts of Mathematics]]
	[[file:~/Documents/Mathematics/multivariable.pdf][Multivariable Calculus by David Guichard]]

** W.S. Jevons
	 [[https://en.wikipedia.org/wiki/William_Stanley_Jevons]]
	 [[https://www.marxists.org/reference/subject/economics/jevons/mathem.htm]]

** MST124: Essential Mathematics 1
** DONE :	[[file:~/Documents/MST124/TMA02/mst124_unit4.pdf][Unit 4]] (textbook)
** DONE :	[[file:~/Documents/MST124/TMA02/TMA_02.pdf][TMA 02]]
** DONE : TMA_03
** DONE : [[https://learn2.open.ac.uk/mod/quiz/attempt.php?attempt%3D965296&page%3D1&scrollpos%3D0#q3][Unit 9 Practice Quiz]]
** DONE : [[https://learn2.open.ac.uk/mod/quiz/attempt.php?attempt%3D965295&page%3D1&scrollpos%3D0#q5][ICMA44]]
** DONE : [[file:~/Documents/MST124/TMA04/mst124_14b_tma04.pdf][TMA_04]]
** MST125: Essential Mathematics 2
	One characteristic of a reflection that distinguishes it from a rotation or a
	translation is that it reverses vertex order.

	An isometry maps any polygon to a polygon of the same size and
	shape. In particular, the vertices of the polygon are mapped to the
	vertices of the image polygon.

	A linear transformation leaves the origin fixed.

	If an implication is true, then its converse is either true or false.

** One-to-one linear transformations
	 Determinant of One-to-one linear transformations does not equal 0.
	 One-to-one linear transformations preserve linearity
	 One-to-one linear transformations map lines to lines

** DONE : p 48

** Principia Mathemtica
	Analysis and Geometry, Theory of agregates (Cantor)
	Symbolic Logic (Peano)
	

** Guerrilla Math Study Group (GMSG)
	 [[https://sites.google.com/site/guerrillamathstudygroup/][google sites link]]

* MIDI
	Ardouro
	BitWig

	[[http://proaudio.tuxfamily.org/wiki/index.php?title%3DRealtime_(RT)_Kernel][http://proaudio.tuxfamily.org/wiki/index.php?title=Realtime_(RT)_Kernel]]
	https://wiki.gentoo.org/wiki/Project:Sound/How_to_Enable_Realtime_for_Multimedia_Applications
	https://packages.gentoo.org/packages/media-plugins/calf

	https://forums.gentoo.org/viewtopic-p-7330590.html?sid=1fa73569fe3439e99b81625808e0f794
	http://gentoostudio.org/?p=maninstall&s=kernel
	http://www.gentoo-wiki.info/Jack

** <2016-05-06 Fri>
   run qjackctl, connect midi devices, link them.
	 <2015-12-27 Sun>
** <2016-05-28 Sat>
   plug in the Keyboard, check if dmesg sees it
   qjackctl
   qsynth

   link the MiniKeystation32 input to qsynth output in qjackctl

   Enjoy!

* NAS
  https://forums.freenas.org/index.php?threads/hardware-recommendations-read-this-first.23069/
** Motherboard
   ~150$
   Supermicro X9s
   http://www.supermicro.com/products/motherboard/Xeon/C202_C204/X9SCM-F.cfm

** CPU
   ~65$
   Pentium G2020 (socket 1155) and G3220 (socket 1150) 
   http://www.amazon.com/Intel-Pentium-Processor-G3220-BX80646G3220/dp/B00EF1G9DW/ref=sr_1_1?s=electronics&ie=UTF8&qid=1409098728&sr=1-1

   ~ 50$
   http://www.ebay.com/sch/i.html?_from=R40&_trksid=m570.l1313&_nkw=LGA-1150+Pentium+G3258&_sacat=0

** Case
   ~100
   Fractal Design R4
   http://www.ebay.com/sch/i.html?_from=R40&_trksid=m570.l1313&_nkw=Fractal+Design+R4&_sacat=0

** RAM
   ~50-100$
   ECC RAM 16GB

* OpenGL notes
	Coordinate Systems, Spaces:
	http://www.songho.ca/opengl/gl_projectionmatrix.html
	http://learnopengl.com/#!Getting-started/Coordinate-Systems

	taking the cross product of the forward vector and our sideways
	vector to produce a third that is orthogonal to both and that represents up with respect to
	the camera.

	[2015-10-13 Tue]
	Continue reading on p.137 - Data structures and buffers.

	glBufferSubData(), glNamedBufferSubData() - map a datastore to a Buffer,
	(defined with  glBufferStorage() glNamedBufferStorage() )

	glMapBuffer(), glMapNamedBuffer() - map an arbitrary memory address to a Buffer.
	glMapBufferRange(), glMapNamedBufferRange()

* Parsing
  @<-[[[*<2016-06-19%20Sun>%20Haskell%20parsing,%20regex][<2016-06-19 Sun> Haskell parsing, regex]]
      [[*<2016-06-12%20Sun>%20Haskell%20Parsers][<2016-06-12 Sun> Haskell Parsers]]
      [[*<2016-08-24 Wed> Parsers, Backup, Fixing sink][<2016-08-24 Wed> Parsers, Backup, Fixing sink]]
      [[*Study material:][Study material:]]
      [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
  ]

  @->[
  [[*Tree Parser][Tree Parser]]
  [[*Study material:][Study material:]]
  [[*Work material:][Work material:]]
  ]
  
  http://jakewheat.github.io/intro_to_parsing/
  http://nikobidin.com/arrows-everywhere
  https://github.com/aslatter/parsec
  https://kunigami.wordpress.com/2014/01/21/an-introduction-to-the-parsec-library/
  http://book.realworldhaskell.org/
  http://unbui.lt/#!/post/haskell-parsec-basics
  http://unbui.lt/#!/post/haskell-another-lens-tutorial
  
  https://github.com/ChrisKuklewicz/regex-tdfa
  https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners a parsing tutorial/intro
  
  https://courses.edx.org/courses/DelftX/FP101x/3T2014/courseware/f2b543ac0250428aa0a3f141797b35ae/022f142c0b5d4b4bb9488112c8afc9cc/
  Edx - Functional parsers and monads.

** Haskell GeoParser:  
   [[file:img/parsing_progress_00.png][file:~/org/img/parsing_progress_00.png]]
   - it seems like most basics are covered (short of aeson).
     I should continue with parsing the geo file in one go,
     populating relevant data structure in the process,
     returning the resulting data.
     [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParser.hs]]


** DONE : for a cluster of connected points it id attr, 
	 pick the point with the lowest id

	 (lowest point should have the list with all nodes above)
** Tree Parser
   @->[
   [[*<2016-06-12 Sun> Haskell Parsers][<2016-06-12 Sun> Haskell Parsers]]
   [[*Parsing][Parsing]]
   ]
** IN-PROGRESS [#C] : create a point attribute (String -> Tree)
	 Tree -> Tree of id's -> flatten -> point string attr

* PVR
	export PVR_PYTHON_PATH="/usr/include/python2.7/"
	scons lib
	scons pylib

	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lboost_python
	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lpython2.6

	[2015-09-22 Tue]
	[[file:~/Projects/pvr/CMakeLists.txt]] works now, submitted to github
	# Compile flags
	...
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pipe -fPIC -fpermissive")
	...

	... however, (~/Projects/pvr/libpvr) 'scons pylib' from 
	https://github.com/pvrbook/pvr still fails:
	Linking    build/linux2/g++/m64/release/python26/_pvr.so
	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lboost_python
	/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.5/../../../../x86_64-pc-linux-gnu/bin/ld: cannot find -lpython2.6
	collect2: error: ld returned 1 exit status
	scons: *** [build/linux2/g++/m64/release/python26/_pvr.so] Error 1
	scons: building terminated because of errors.
	
	, finish digging here: [[file:~/Projects/pvr/libpvr/BuildSupport.py]]

	[2015-09-23 Wed]
	compilation issues solved by:
	ln -s ./libboost_python-2.7.so ./libboost_python.so
	ln -s ./libpython2.7.so ./libpython2.6.so

	[2015-09-24 Thu]
	Solved:
	[[https://github.com/pvrbook/pvr/pull/12]] (Build instructions for Gentoo)

	[2015-10-12 Mon]
	~/Projects/pvr_fork@madjestic/pvr/scenes/book/chapter_1 $ python fig_1_1.py

* Python
  [[file:todo.org::*:%20Write%20a%20python%20daemon%20%5B%5Bfile:index.org::*Python%5D%5B@Python%5D%5D][@<{#C}: Write a python daemon]]
* RAID 10 project
  @->[
  [[file:todo.org::*:%20Build%20RAID-10.%20Project%20Ksi:][{#E}: Build RAID-10.  Project Ksi:]]
  [[file:todo.org::*:%20Project%20Omicron:][{#E}: Project Omicron:]]
  ]

* Rocket! n-body sim, particles, houdini, Godika
  [[*<2016-03-16 Wed> Gravity, Rocket][@<<2016-03-16 Wed> Gravity, Rocket]]
  [[*<2016-08-23 Tue> Rocket, Gravity, n-body][@<<2016-08-23 Tue> Rocket, Gravity, n-body]]
  [[*: Render out a video, same as for n-bodies.][@<: Render out a video, same as for n-bodies.]]
  [[file:todo.org::*:%20Investigate%20Mario's%20glass%20shader:][@<{#B}:	Investigate Mario's glass shader:]]

	A simple game project: similar to Angry birds, but in space with planets.  A dynamics-based (gravity, gravitational pool of planets).
	<2015-12-04 Fri>

  @->[[[file:todo.org::*:%20Continue%20with%20Gravity/Rocket%20Houdini%20project:][: Continue with Gravity/Rocket Houdini project:]]]
** Work Files:  
   [[file:~/Projects/Houdini/Godika]]
   [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc][file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]

* sb7code reading, examples
	OpenGL Super Bible ed.7
	Projects/OpenGL/sb7code/src/book - Makefile works now

	[2015-09-23 Wed]
	hack cpp/emacs environment: http://tuhdo.github.io/c-ide.html
	read on the bible: [[file:~/Documents/Programming/OpenGL/Graham%20Sellers,%20Richard%20S.%20Wright%20Jr.,%20Nicholas%20Haemel%20-%20OpenGL%20SuperBible%20Comprehensive%20Tutorial%20and%20Reference,%207th%20Edition%20-%202015/OpenGL_Bible.pdf][file:~/Documents/Programming/OpenGL/Graham Sellers, Richard S. Wright Jr., Nicholas Haemel - OpenGL SuperBible Comprehensive Tutorial and Reference, 7th Edition - 2015/OpenGL_Bible.pdf]]

	try the ../book code in VS, see if it autocompletes struct APPINFO

* Social
  Dmitry-Vladimirovich Novikov, Judge (kamikazedead)
  https://new.vk.com/id224027681 

* Showreeel / Demoreel
	[[/home/madjestic/Projects/Houdini/Mantra/tests]]
	<2016-01-02 Sat>
* SIGGRAPH
  [[*SIGGRAPH 2015][SIGGRAPH 2015]]
  [[*SIGGRAPH 2017][SIGGRAPH 2017]]
* SIGGRAPH 2015
** Paper ideas
*** Feature-preserving curve resampling
*** Lindenmayer: Procedurally-assisted LOD generation.
* SIGGRAPH 2017
  [[file:~/Documents/acmsiggraph][file:~/Documents/acmsiggraph]] - ACM template
  [[*VDA Virtual Bones][VDA Virtual Bones]]

  http://s2017.siggraph.org/technical-papers-submissions#quickset-tech_papers_accordion_0
  http://s2017.siggraph.org/technical-papers-submissions
  [[file:~/Documents/Vertex-count-agnostic_Morph_Targets.pdf][file:~/Documents/Vertex-count-agnostic_Morph_Targets.pdf]]
  http://gamedev.stackexchange.com/questions/97378/moving-skeletal-animation-blending-logic-to-gpu-worth-it
  http://www.gamedev.net/topic/654004-gpu-skinned-skeletal-animation-tutorial/
  https://www.opengl.org/discussion_boards/showthread.php/185805-Skinning-on-the-GPU-vs-the-CPU

* Study
** M140: Introducing Statistics
*** DONE : TMA02:
*** DONE 26 April 2014
**** DONE : TMA02: Q1: 
Computer Book 1: pp.35-48
surgeons.mtw (box-plotting in Minitab)
**** DONE : TMA02: Q2
***** DONE : Book2 pp.39-47 (on different sampling types)
finished at p.44.
done
Sat Apr 26 16:03:45 CEST 2014


**** DONE : TMA02: Q3
*** DONE : TMA03
*** DONE : [[file:~/Documents/M140/TMA04/m140_tma04.pdf][TMA04]]
*** DONE : [[https://learn2.open.ac.uk/mod/quiz/attempt.php?attempt%3D963365][ICMA43]]

*** DONE : Learn Basic R
   It looks like it's a dead end.
	 
	 Julia is a much stronger alternative.  It's much faster than R, Julia is
	 a propper programmin language, has bindings or interfaces to C++,Python

	 Haskell is a much stronger alternative too.  Obviously.
** edX: FP101x
  @->[
  [[*Parsing][Parsing]]
  ]
	[[https://courses.edx.org/courses/DelftX/FP101x/3T2014/courseware/7c7ec15948b84b1a9c14673bddbcf8aa/9441ebb13fad49dca4dee53107b3ce5a/][Continue with HW]]
	Mon Nov 10 22:38:53 CET 2014

* Stylistic Analysis, Bias filtering, etc
	 http://en.wikipedia.org/wiki/Natural_language_processing
	 http://en.wikipedia.org/wiki/Sentiment_analysis
	 http://www.kaspik.com/ (web sentiment analysis)

	 N.Chomsky: "Three models for the description of language"
	 http://chomsky.info/articles/195609--.pdf

	 http://www.its.caltech.edu/~matilde/GraphGrammarsLing.pdf

	 [[http://www.cs.dartmouth.edu/reports/TR2014-754.pdf][StyleCheck: An Automated Stylistic Analysis Tool (PDF)]]

	 [[file:~/Pictures/Human_Language_Families_ru.png]]

	 [[https://ru.wikipedia.org/wiki/%25D0%25A2%25D0%25B8%25D0%25BF%25D0%25BE%25D0%25BB%25D0%25BE%25D0%25B3%25D0%25B8%25D1%258F_(%25D0%25BB%25D0%25B8%25D0%25BD%25D0%25B3%25D0%25B2%25D0%25B8%25D1%2581%25D1%2582%25D0%25B8%25D0%25BA%25D0%25B0)][Типология (лингвистика)]]

	 [[https://ru.wikipedia.org/wiki/%25D0%2590%25D0%25BA%25D1%2582%25D0%25B8%25D0%25B2%25D0%25BD%25D1%258B%25D0%25B5_%25D1%258F%25D0%25B7%25D1%258B%25D0%25BA%25D0%25B8][Активные языки]]

	 [[https://en.wikipedia.org/wiki/Ferdinand_de_Saussure][Ferdinand de Saussure]]

	 [[https://en.wikipedia.org/wiki/Roman_Jakobson][Roman Jakobson]]

	 [[https://en.wikipedia.org/wiki/Russian_formalism][Russian formalism]]

	 [[https://en.wikipedia.org/wiki/Stylistics_(field_of_study)][Stylistics (field of study)]]

	 [[https://en.wikipedia.org/wiki/Stylistics_(field_of_study)][Stylistics (field of study)]]

*** Related Read:
		http://en.wikipedia.org/wiki/Framework_Programmes_for_Research_and_Technological_Development
		http://en.wikipedia.org/wiki/European_Atomic_Energy_Community

* SDL2
  https://github.com/palf/haskell-sdl2-examples
  http://lazyfoo.net/tutorials/SDL/index.php
  https://thebookofshaders.com/03/
* Tic-Tac-Toe
  @->[[[*AI][AI]]]
  A 'Hello World!' of Machine Learning:
  [[file:~/Documents/tictactoe.kra]]
* Unreal Engine
	- contacted popcornfx:
		The Linux build is not here for now, but should not be a problem, once we get the plugin stabilized on Win64, we will begin to build for other platform.
	  The PopcornFX Editor is currently only compatible with Windows, but stay in touch...

	urls:
	https://docs.unrealengine.com/latest/INT/GettingStarted/FromUnity/index.html
	https://docs.unrealengine.com/latest/INT/Gameplay/ClassCreation/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Classes/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Functions/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Properties/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Structs/index.html
	https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Interfaces/index.html

** 101
	 export LD_LIBRARY_PATH=.
	 ./UE4Editor ~/Projects/Unreal_Projects/MyProject4/MyProject4.uproject
	 primusrun ./UE4Editor ~/Projects/Unreal_Projects/MyProject/MyProject.uproject -opengl4

* VR
  Virtual Reality
  http://osvr.github.io/contributing/
  http://www.osvr.org/hdk2.html
  http://www.vrdb.com/
  https://github.com/OSVR

* VDA Virtual Bones
  [[*SIGGRAPH 2017][SIGGRAPH 2017]]
  [[file:~/Documents/VDA][file:~/Documents/VDA]]
  [[file:~/Documents/VDA/acm/acmsiggraph/template.tex][file:~/Documents/VDA/acm/acmsiggraph/template.tex]]

  plot_00 : 
  [[file:~/Documents/VDA/acm/acmsiggraph/data/plot_00.gnu][file:~/Documents/VDA/acm/acmsiggraph/data/plot_00.gnu]]

* Waterfall
  @<-[
  [[*:%20Set%20up%20water%20shader][: Set up water shader]]
  [[*:%20continue%20working%20on%20waterfall%20example][: continue working on waterfall example]]
  [[*%5B2015-01-12%20Mon%5D][{2015-01-12 Mon}]]
  [[*:%20Investigate%20how%20to%20render%20ocean%20nicely][: Investigate how to render ocean nicely]]
  ]

  links:
  https://rutracker.org/forum/viewtopic.php?t=5114569
  https://rutracker.org/forum/viewtopic.php?t=5079199
  https://rutracker.org/forum/viewtopic.php?t=4257762

* on Blogs
** TurtlesTurtlesTurtles
**** DONE Update the content, according to the latest state of NGL tutorial
**** DONE : Write a prime number calculator.
** PuurBliss.NL
    [[file:todo.org::*:%20work%20on%20logo%20%5B%5Bfile:index.org::*PuurBliss.NL%5D%5BPuurBliss.NL%5D%5D][< : work on logo PuurBliss.NL]]
* History
** 2015-01-12 Mon

	[[/home/madjestic/houdini/houdini/python2.7libs/dopparticlefluidtoolutils.py]]
	[[file:~/Projects/Python/Tree/Main.py][/Projects/Python/Tree/Main.py]] Fri Oct 17 23:47:43 CEST 2014 - python tree-parsing example

	[[*:%20Make%20Elegant,%20Clean-up][Sun Oct 26 00:10:42 CEST 2014
	refactoring, cleaning up Rendering.hs and Shape.hs]]

	nmcli device wifi connect Lambda password *********
	Biology (Micosis)
	[[*:%20Investigate%20how%20to%20render%20ocean%20nicely][Ocean Shader (displacement issues)]]

** 2015-02-01 Sun
	
	Found a nice article on GTK+, continue reading later. (Which article?! <2015-12-03 Thu> )

** 2015-09-21 Mon

	Trying to make [[*PVR][PVR]] compile.  [[*PVR][Getting some linker errors:]] (1)

	<2015-11-06 Fri> solved (1)

** 2015-11-08 Sun
	
	#define W 0xFF, 0xFF, 0xFF, 0xFF
        static const GLubyte tex_data[] =
        {
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
            B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,
            W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,
        };
#undef B
#undef W

        glGenTextures(1, &tex_object[0]);
        glBindTexture(GL_TEXTURE_2D, tex_object[0]);
        glTexStorage2D(GL_TEXTURE_2D, 1, GL_RGB8, 16, 16);
        glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 16, 16, GL_RGBA, GL_UNSIGNED_BYTE, tex_data);
				...

				it looks like there are 16x16 rows x columns in the B,W,B,W... above as well as in tex-storage size delcaration

				Mipmapping gets its name from the Latin phrase multum in parvo

	Created a [[file:~/.contexts][~/.context]] for keeping clusters of activity together (dirs, pdfs, etc.)

** 2015-11-19 Thu
	Figured out how to use parts of agenda-mode.
	http://orgmode.org/worg/org-tutorials/advanced-searching.html

	Timestamps for agenda-mode:
	http://orgmode.org/manual/Creating-timestamps.html
	(C-c ! ) inactive timestamp
	(C-c . ) timestamp

	Org-mode Agenda is awesome!
	http://orgmode.org/worg/org-tutorials/advanced-searching.html

** 2015-11-19 Thu
	
	(C-c a m) Match: +TIMESTAMP_IA>="<-2w>" (show ineactive timestamps)

** 2016-01-29 Fri
  
  Reading on FRP:
  http://travis.athougies.net/posts/2015-05-05-frp-made-simple.html !
  http://www.cs.jhu.edu/~roe/padl2014.pdf
  http://verify.rwth-aachen.de/proseminar/PK15/ausarbeitungen/reactive_programming.pdf
  https://www.manning.com/books/functional-reactive-programming
  https://news.ycombinator.com/item?id=6285149
  http://lambda-the-ultimate.org/node/3642

  C++ : getting the basics of Array and String operations according to C++11 standart
  Reading the STL library reference:
  [[file:~/Documents/Addison%20Wesley%20-%20The%20C%2B%2B%20standard%20library_a%20tutorial%20and%20reference.pdf][file:~/Documents/Addison Wesley - The C++ standard library_a tutorial and reference.pdf]]
  [[file:~/Projects/CPP/Junk/file2array]]
  
  Emacs Debugger:
  https://www.gnu.org/software/emacs/manual/html_node/emacs/Commands-of-GUD.html
  http://www.gnu.org/software/emacs/manual/html_node/emacs/Watch-Expressions.html
  
	OpenGL Work:
  [[~/Projects/OpenGL/sb7code/src/my_first_spinning_cube_v01]]
  
** 2016-01-30 Sat
  
  How to add a package to haskell-overlay:
  https://github.com/gentoo-haskell/gentoo-haskell/blob/master/projects/doc/HOWTO-contribute.rst
  
** 2016-02-07 Sun
   @->s[[[*<2016-02-08%20Mon>][<2016-02-08 Mon>]]]
   Yampy-Cube: https://youtu.be/T7XwTolu9YI?t=2525
   Jekor Yampa: https://youtu.be/T3xXebIr8AM?t=1000

** 2016-02-08 Mon
   @<-[[[*<2016-02-07%20Sun>][<2016-02-07 Sun>]]]
   @->[[[*Yampa][Yampa]]]
   learning FRP:
   Jekor, Yampa:
   https://youtu.be/T3xXebIr8AM?t=980
   Yampy Cube:
   https://youtu.be/T7XwTolu9YI?t=2506
   
   Learning AI/Machine Learning/Deep Learning
   http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning/
   http://www.andreykurenkov.com/writing/a-brief-history-of-neural-nets-and-deep-learning-part-2/

** 2016-02-09 Tue
  
  Bluetooth:
  http://www.thinkwiki.org/wiki/How_to_setup_Bluetooth
  http://bricxcc.sourceforge.net/nbc/doc/nxtlinux.txt

  sudo rfcomm bind /dev/rfcomm0 00:16:53:0E:21:14
  sudo rfcomm release /dev/rfcomm0 00:16:53:0E:21:14

** 2016-02-12 Fri
  
  Julia compilation fails
  
  The problems seems to go back to cbals incompatibility between science overlay and main portage.
  It is currently causing a dependency havoc in the system.  Julia is not ready yet.

*** <2016-05-10 Tue> Update: works when installed through github/cabal
    [[file:~/Projects/Julia/julia]]
    
[[*test][test]]
** 2016-02-26 Fri
   @->s[[[*:%20Make%20Elegant,%20Clean-up][: Make Elegant, Clean-up]]
         [[*:%20continue%20with%20Mortgage%20graphing,%20using%20VEX][: continue with Mortgage graphing, using VEX]]]
  
  Everybody seems to enjoy the Vertex Displacement Animation task that I accomplished.  It looks like a propper SIGGRAPH material.

  [[*:%20Make%20Elegant,%20Clean-up][I should polish Haskell OpenGL Tutorial]]

  [[*:%20continue%20with%20Mortgage%20graphing,%20using%20VEX][I should continue with Mortgage graphing, using VEX]]

** 2016-02-28 Sun
  
  LEGONXT
  ~/Projects/LEGONXT/nxt-python-2.2.2/nxt-python-2.2.2/examples $ python ./mary.py

** 2016-02-29 Mon
  
   Probably I should proceded with Rendering Adventure

** 2016-03-02 Wed
  @->s [[[*<2016-04-05%20Tue>][<2016-04-05 Tue>]]]
  
  Visualize a graph with Haskell
  /home/madjestic/Projects/Haskell/Mortgage/
  
** 2016-03-05 Sat
   http://www.slideshare.net/CassEveritt/approaching-zero-driver-overhead
   http://valhalla.fciencias.unam.mx/lenguajes/EOPL.pdf

** 2016-03-11 Fri
  
  Laplace Operator games:
  /home/madjestic/Desktop/DRS.hipnc
  [[*:%20Render%20out%20a%20vide,%20same%20as%20for%20n-bodies.][TODO : Render out a vide, same as for n-bodies.]]

** 2016-03-16 Wed Gravity, Rocket
   @<->[[[*Rocket!][Rocket!]]
   ]
  [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc][file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]
  * colliding particles - works in principles, but with errors.  Needs a second pass.
  * I think it is fixed now (gluing is based on proximity clasterization)
    <2016-09-03 Sat>

[[*test][test]]
** 2016-03-22 Tue
   http://orgmode.org/manual/Setting-tags.html#Setting-tags
   C-c C-q - insert a tag into a headline

   A [[https://www.emacswiki.org/emacs/SecondarySelection][secondary selection]] can be used as an interface to "Entropy".
   E.g. Select a data from a wikipedia article with a primary selection,
   select another data with a secondary selection (e.g. a list of languages
   that the article is available in) - the result shold be the variance
   of the data accross different languages.

   secondary selection:
   M-mouse1

   M-x yank-secondary
   M-mouse2

   https://www.gnu.org/software/emacs/manual/html_node/ses/Copy_002fcut_002fpaste.html
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Secondary-Selection.html

*** On Complexity and Entropy
** 2016-03-24 Thu
   secondary eshell in emacs:
   C-u M-x eshell
** 2016-03-30 Wed
   http://katychuang.com/cabal-guide/ - simple cabal guide

** 2016-04-02 Sat
   Started reading [[file:~/Documents/%D0%94.%20%D0%9A%D0%BD%D1%83%D1%82%20-%20%20%D0%98%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%20(%D1%82%D0%BE%D0%BC%201,2,3)%20-%202002][D.Knut, the art of programming "Искусство программирования (том 1,2,3) - 2002"]]
** 2016-04-03 Sun
   http://rephial.org/help/command
   http://rephial.org/help/playing
   angband commands
** 2016-04-04 Mon Julia
   [[file:todo.org::*:%20write%20a%20@code_native%20collatz(10)%20for%20for(1:10)%20loop%20and%20see%20what%20the%20ASM%20code%20looks%20like][>: write a @code_native collatz(10) for for(1:10) loop and see what the ASM code looks like]]
** 2016-04-05 Tue
   @<- [[[*<2016-03-02%20Wed>][<2016-03-02 Wed>]]]
   Working on a Haskell diagrams plotting example:
   http://projects.haskell.org/diagrams/doc/quickstart.html
   [[file:~/Projects/Haskell/Diagrams/test_00/Main.hs]]
   [[file:~/Projects/Haskell/Diagrams/test_00/plot.svg]]
   
   Working through Julia manual:
   http://docs.julialang.org/en/release-0.4/manual/functions/
** 2016-04-09 Sat
   Started reading: http://www.heterogeneouscompute.org/?page_id=7
   (OpenCL book)
   [[file:~/Documents/OpenCL_Programming_Guide.pdf]] (hoknamahn's book)
   
** 2016-04-15 Fri Pebble
   Started reading deeplearning book.  It seem a nice complement to 
   Tom Mitchel's book.
   [[file:~/Documents/Machine_Learning_-Tom_Mitchell.pdf]]
   http://www.deeplearningbook.org/contents/intro.html#pf6

   Pebble SDK:
   
   [[file:todo.org::*:%20Study%20the%20Mandelbrot%20for%20Pebble%20example:][>: Study the Mandelbrot for Pebble example:]]
   [[file:todo.org::*:%20Mandelbrot%20OpenGL%20exmaple%20in%20C++:%20Explore%20uniforms.][>: Mandelbrot OpenGL exmaple in C++: Explore uniforms.]]
   [[file:todo.org::*:%20Do%20the%20same%20in%20haskell][>: Do the same in haskell]]

   [[file:todo.org::*:%20Read%20the%20Red%20Book:][>: Read the Red Book:]]
   [[file:todo.org::*:%20Read%20the%20book%20of%20shaders%20as%20a%20supplement:][>: Read the book of shaders as a supplement:]]
   [[file:todo.org::*:%20Take%20a%20look%20at%20GPipe,%20it%20seems%20like%20an%20interesting%20way%20to%20handle%20OpenGL][>: Take a look at GPipe, it seems like an interesting way to handle OpenGL]]
** 2016-04-21 Thu
   [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]
   VEX compiler #define:
   http://127.0.0.1:48626/vex/vcc
** 2016-04-25 Mon Scating, Ecosystem sim
   [[file:todo.org::*:%20A%20skating%20timer:][>: A skating timer:]]
   [[file:todo.org::*:%20Ecosystem%20sim:][>: Ecosystem sim:]]
** 2016-04-29 Fri Houdini, Emacs
   I am trying to establish an efficient way to work with Houdini, using emacs
   [[file:todo.org::*:%20create%20a%20houdini-starting%20script%20for%20emacs,%20solve%20urxvt][>: create a houdini-starting script for emacs, solve urxvt]]
   [[file:todo.org::*:%20continue%20working%20on%20waterfall%20example][>: continue working on waterfall example]]
** 2016-05-04 Wed
   file:~/Projects/Houdini/Fluids/Fluid_Test_00/Model.hipnc - a waterfall test
   /home/madjestic/Desktop/cloth_test.hipnc
** 2016-05-06 Fri
   reading [[file:~/Documents/Linux_Format_March_2016.pdf]]
   p.62 LXF208 March 2016 - OwnCloud 8.0 with RaspberryPi

** 2016-05-09 Mon
   [[*Entropy][Entropy]]
*** Rendering Entropy nodes/edges:
   1) rendering a circle with an outline:
      - render a circle of a radius r
      - render a circle with a snaller radius on top of it.
        the result should look like a circle with an outline.
   2) render an object, consisting of 2 circles, connected by a line.
   
*** On the data structure:
   I am probably misusing the terminology here, but whatever:
   
**** Theorem 1.0   
     Data is represented as a tree-like graph, loops are allowed, each
   piece of information is represented as a node that may be connected to
   one or more other nodes with one or more edges.

**** Theorem 1.1: FALSE
   Every node can be represented by a reduced edge: (() - \Gamma), where
   () is a Null category and \Gamma is a category. : seems to be False

**** Theorem 1.2:
   a Category consists of:
     a set of nodes
     a set of edges (or, more generally, a set of arrows)
     a partial function that takes a category as an 
       argument and produces a new category that is "connected" to the the 
       original (share nodes/arrows).  It's similar to L-systems node-replacement algorithms.
**** Theorem 1.3:
   a Category can be a member of another category.
**** Theorem 1.4:
   a Category can be a member of itself (connected to itself).

****   Category:
*****  Subcategory:
****** Nodes (Categories)
****** Edges (Arrows)
****** Partial Function: *
       Describes a function that takes a category \Gamma as an argument
       \Eta, producing a new group 

** 2016-05-11 Wed
   [[file:~/Projects/Haskell/Entropy/src/Main.hs]] - working on categories, applications and other goodiness.
   http://lpaste.net/163041 - interesting example with Foldable, so that both 2-tuple and a list can be an argument to a function:
   
   newtype SameTuple a = SameTuple (a, a)

   instance Foldable SameTuple where
   foldMap f (SameTuple (l, r)) = f l `mappend` f r
   
   isIn :: (Eq a, Foldable t) => a -> t a -> Bool
   isIn a xs = foldr (\x acc -> acc || x == a) False xs
   
   ---
   
   λ> 3 `isIn` SameTuple (3, 4)
   True
   λ> 3 `isIn` [3,4]
   True
   λ> 2 `isIn` SameTuple (3, 4)
   False
** 2016-05-12 Thu NGL, Visualizing Categories
   @->[[[*<2016-05-11 Wed>][<2016-05-11 Wed>]]]
   an example with categories seems to work.
   Now I need to procede with visualizing it:

   visualize cats as squares
   visualize arrows as lines, connecting squares
*** TODO [#B] : visualize cats as squares
*** TODO [#B] : visualize arrows as lines, connecting squares
*** TODO [#C] : (extra) : anti-alias the primitives.
** 2016-05-13 Fri
   https://github.com/tobbebex/GPipe-Core - functional opengl in haskell
** 2016-05-17 Tue
   cool skateboard maker (link from Vlad):
   www.kaliber-skateboards.de
   
** 2016-05-19 Thu
   @->:[[[*Yampa][Yampa]]
        [[*%5B%5B*FRP%5D%5BFRP%5D%5D][FRP]]
   ]
   https://youtu.be/-IpE0CyHK7Q?t=425 - Jekor's yampa tutorial part 1
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]
   
** 2016-05-19 Thu
   https://nixos.org/wiki/Installing_NixOS_from_a_USB_stick
   https://nixos.org/nixos/download.html
** 2016-05-23 Mon
   I experimented with haskell on android:
   https://github.com/neurocyte/ghc-android
   this sort of worked on my Acer Aspire One with 32bit Ubuntu, till the 'adb' moment, at which point I stopped.
   http://keera.co.uk/blog/2014/08/13/most-inspiring-green-screen-you-will-ever-see/
   https://ghc.haskell.org/trac/ghc/wiki/Arm64
   https://ghc.haskell.org/trac/ghc/wiki/CrossCompilation
   https://ghc.haskell.org/trac/ghc/wiki/Building/CrossCompiling/iOS

   Also received an email from Ivan Perez:
   "Hi

   We use debian for android, and obviously macosx for ios.

   We are currently working on releasing a stable environment to compile mobile haskell apps for both platforms."

   
   Sounds like soon we are going to get some new toys to play with... fingers crossed.

** 2016-05-23 Mon
   @->[[[*<2016-05-19%20Thu>][<2016-05-19 Thu>]]]
   going back to learning Yampa:
** 2016-05-24 Tue
   https://www.haskell.org/onlinereport/standard-prelude.html - Prelude specification,
   describes all the haskell functions bundled with Prelude.

   https://wiki.haskell.org/Simple_unix_tools - Haskell command line tools
   
** 2016-05-27 Fri
   http://projects.haskell.org/graphviz/faq.html
   http://www.graphviz.org/
   http://blog.idorobots.org/entries/you-earned-15-xp-in-getting-things-done_.html#preview-more
   http://www.1010.co.uk/org/ - crazy emacser website

   https://github.com/RefactoringTools/HaRe
   https://github.com/emacs-tw/awesome-emacs
   https://github.com/hbin/molokai-theme
*** TODO [#D] : Read about graphviz/graphviz-org-mode for emacs
    the problem that I am working on may have a nice backend / partial solution already.
    more examples of graphviz graphs: http://www.tonyballantyne.com/graphs.html
** 2016-05-31 Tue
   out@[[[*<2016-05-23%20Mon>][<2016-05-23 Mon>]]]
   https://en.wikibooks.org/wiki/Haskell/Understanding_arrows - arrow notation
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]
** 2016-06-05 Sun
   [[file:~/Projects/Haskell/FRP/frp_counter_00/Main.hs]]
   [[file:~/Projects/Haskell/FRP/yampy-cube/src/Main.hs]]

   https://www.youtube.com/watch?v=-IpE0CyHK7Q&feature=youtu.be&t=425
   https://www.youtube.com/watch?v=T7XwTolu9YI&feature=youtu.be&t=2506

   https://github.com/nh2/call-haskell-from-anything
** 2016-06-06 Mon
   ~/Projects/Haskell/call-haskell-from-anything/ - fails with:
   "* Missing C library: HSrts-ghc7.10.3" - both cabal and stack versions.
*** DONE : Report a bug about HSrts
    https://github.com/nh2/call-haskell-from-anything#usage
** 2016-06-07 Tue
   call haskell from everything - an interesting project but is not ready yet:
   https://github.com/nh2/call-haskell-from-anything/issues/14
   [[file:~/Projects/Haskell/call-haskell-from-anything]]

   Also seems related to the stack/stackage issue.  Stackage not ready yet?
   https://github.com/fpco/stackage/issues/1221

   Godot seems to have a bug atm:
   https://github.com/godotengine/godot/issues/5060

** 2016-06-08 Wed
   https://en.wikibooks.org/wiki/Haskell/Applicative_functors#A_sliding_scale_of_power - very interesting explanation/excercises on Functor, Applicative and Monad
   and sollutions to exercises: https://en.wikibooks.org/wiki/Haskell/Solutions/Applicative_functors

   [1] https://hackage.haskell.org/package/repa-3.4.0.2/docs/Data-Array-Repa.html - hoknamahn mentioned an interesting link to parallel arrays

*** TODO [#D]: check it out REPA (1)
** 2016-06-09 Thu
   search by date
   $ find ~ -iname 'Makefile' -atime -20 | grep -i haskell
   /home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/tutorial11/Makefile
** 2016-06-11 Sat
   https://github.com/emacs-helm/helm/wiki - helm tips
** 2016-06-12 Sun Haskell Parsers
   @<-[[[*<2016-06-19%20Sun>%20Haskell%20parsing,%20regex][<2016-06-19 Sun> Haskell parsing, regex]]
   [[*Tree Parser][Tree Parser]]
   ]
   @->[
   [[*Parsing][Parsing]]
   [[*<2016-06-19%20Sun>%20Haskell%20parsing,%20regex][<2016-06-19 Sun> Haskell parsing, regex]]
   [[*<2016-06-20 Mon> Writing a haskell parser for geo Houdini format][<2016-06-20 Mon> Writing a haskell parser for geo Houdini format]]
   ]

   http://jakewheat.github.io/intro_to_parsing/
   http://nikobidin.com/arrows-everywhere
   https://github.com/aslatter/parsec
   https://kunigami.wordpress.com/2014/01/21/an-introduction-to-the-parsec-library/
   http://book.realworldhaskell.org/
   http://unbui.lt/#!/post/haskell-parsec-basics
   http://unbui.lt/#!/post/haskell-another-lens-tutorial
*** DONE : Look into Haskell Parsers

** 2016-06-12 Sun
   @->[[[*FRP][FRP]]]
   I ended up with OpenGL animation 'sort of working' - buffer update is busted and I should attempt to 
   follow Jekor's instructions more closely, that is use OpenGL building blocks from cuboid first and then
   refactor it to use NGL
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor.blinks_sort_of_works]]

   http://data.ceh.vn/Ebook/ebooks.shahed.biz/OS/LINUX/ - interesting collecion of linux-related books material

   [[file:~/Projects/Houdini/MARVE]]

   http://blog.idorobots.org/entries/you-earned-15-xp-in-getting-things-done_.html#preview-more emacs


*** DONE : Set Up a Pretty Calendar for emacs:
    http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html
    https://github.com/kiwanami/emacs-calfw
    https://www.emacswiki.org/emacs/CalendarMode
    https://www.emacswiki.org/emacs/DiaryMode
    http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html
*** TODO [#D] : investigate WebKit in Emacs:
    [[file:~/Projects/emacs/deepin-emacs]]
    https://www.emacswiki.org/emacs/WebKit
*** DONE : test todo 'Scheduled' setting
    SCHEDULED: <2016-06-13 Mon>
*** TODO [#C] : Continue reading :   [[file:~/Documents/GNU_Linux_Application_Programming.chm]]
*** DONE : Finish bringing cuboid code bits, according to Jekor's video:
    https://www.youtube.com/watch?v=T3xXebIr8AM
    [[file:~/Projects/Haskell/FRP/cuboid]]
    [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]
    
** 2016-06-13 Mon
   [[*MARVE][MARVE]]
   [[file:~/Projects/Houdini/MARVE/model.hipnc]]
** 2016-06-14 Tue Idiots never give up!
   M-x load-jabber
   M-x jabber-connect
   M-x jabber-display-roster

   M-x load-calendar
   M-x cfw:open-org-calendar
   Working on: [[*MARVE][MARVE]]
   - I managed to set up 3D Coat to open a linked file:
   [[file:~/Projects/Houdini/MARVE]]
   [[file:~/Projects/Houdini/MARVE/3d-coat/model.3b]]
   [[file:~/Projects/Houdini/MARVE/model.hipnc]]

*** DONE : export a leg mesh mockup from Houdini to 3d-coat
    SCHEDULED: <2016-06-14 Tue>
*** DONE : Tell Hok that he is a Barmaly
    SCHEDULED: <2016-06-15 Wed> 
** 2016-06-15 Wed Mathematical Methods for Quantitative Finance, Marve, Houdini
   @->[[[*MARVE][MARVE]]]
   a course @coursera https://www.coursera.org/course/mathematicalmethods

   continuing with [[*MARVE][MARVE]] :
   [[file:~/.contexts/MARVE/]]
   [[file:~/Projects/Houdini/MARVE]]
   [[file:~/Projects/Houdini/MARVE/3d-coat/model.3b]]
   [[file:~/Projects/Houdini/MARVE/model.hipnc]]

** 2016-06-16 Thu Dual Univers, Haskell, AI
   out@[[[*AI][AI]]]
   http://www.dualthegame.com/careers
   Novaquark, Dual Univers, space sandbox game.
   Maybe I should apply?

   https://github.com/mikeizbicki/HLearn - Haskell library for machine learning
   https://github.com/mikeizbicki/subhask - a rewrite of Prelude for numerical computing
   
** 2016-06-18 Sat 3D-coa UV'ing tutorial
   https://www.youtube.com/watch?v=0LWnVLO5lYU - 3D-Coat UV'ing tutorial
** 2016-06-20 Mon Writing a haskell parser for geo Houdini format
   @<-[[[*<2016-06-12 Sun> Haskell Parsers][<2016-06-12 Sun> Haskell Parsers]]
   ]
   @->[[[*<2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:][<2016-07-04 Mon> I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:]]
   ]
   started working on a parser for Houdini geo files,
   of course I want it to be fun, so it must be written in Haskell:
   
   [[file:~/.contexts/Parser]]
   [[file:~/.contexts/Parser/Parser(Haskell)/Parsec]]

   [[file:~/.contexts/Parser/Parser(Houdini)/Model.hipnc]]
   [[file:~/Projects/Haskell_Parser/Parser/Model.hipnc]]

   [[file:~/Projects/Houdini/Parser/Parser/export/model.geo][file:~/Projects/Houdini/Parser/Parser/export/model.geo]] - Houdini cube geometry
      
   http://unbui.lt/#!/post/haskell-parsec-basics - seems like a good starting place
   https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners - also interesting

   https://artyom.me/aeson - Haskell JSON Parser, thank hok
   
   [[file:~/Pictures/parser_notes_00.png]]

*** Daggerfall
    In order to play:
    
    mount c ~/dosbox -freesize 1000
    mount d ~/dosbox/DAGGERFALL/DFCD -t cdrom -label Daggerfall
    c:
    cd \dagger
**** DONE : install Daggerfall:
     [[file:~/DAGGERFALL]]
     [[file:~/DAGGERFALL/daggerfall_legal_and_installation.pdf]]
** 2016-06-23 Thu IDO
*** TODO [#C] : set up emacs ido mode
** 2016-06-24 Fri
   busy with [[*FRP][FRP]]
** 2016-06-25 Sat Haskell FRP, Yampa, OpenGL
   @->[[[*FRP][FRP]]]
   [[file:~/Projects/Haskell/FRP/yampa-tutorial-jekor]]

   # Setting a mutable variable :
   main :: IO ()
   main = do
     foo <- newIORef (0 :: Int)
     readIORef foo >>=  print
     foo <- newIORef (1 :: Int)
     readIORef foo >>=  print

  # more here:
  http://blog.jakubarnold.cz/2014/07/20/mutable-state-in-haskell.html 

  # flymake-compile
  C-c b

  stopped watching at 00:15:19
  [[file:~/Documents/FRP%20(Haskell_Yampa)%20and%20OpenGL%20with%20Cuboid%20(Part%202)%20-%20Episode%2010-T3xXebIr8AM.mkv][file:~/Documents/FRP (Haskell_Yampa) and OpenGL with Cuboid (Part 2) - Episode 10-T3xXebIr8AM.mkv]]
  
  Ivan Perez on game dev for Android:
  https://github.com/ivanperez-keera/introgameshaskell
  
** 2016-07-04 Mon I should look into Repa, Looking into Parsec, Leaving links for GLFW to look into later on b1:
   @->[[[*b1][b1]] - main
       [[*<2016-07-06 Wed> VR stuff, Parser, Finance Currency JSON API, Jabber History][<2016-07-06 Wed> VR stuff, Parser, Finance Currency JSON API, Jabber History]]
   ]
   @<-[[[*<2016-06-20 Mon> Writing a haskell parser for geo Houdini format][<2016-06-20 Mon> Writing a haskell parser for geo Houdini format]]
   ]
   https://wiki.haskell.org/Numeric_Haskell:_A_Repa_Tutorial - I should look into REPA some time

   [[file:~/Projects/Haskell/Parser/Parsec]] - writing a haskell Parser, first steps

*** Parsec study:
    https://www.ietf.org/rfc/rfc4627.txt RFC4627 (JSON RFC)
    Possible JSON values are: strings
                              numbers 
                              booleans 
                              null 
                              
                              arrays (one-dimensional)
                              objects

*** TODO [#C] : GLFW-b : b1 need to be converted from GLFW to GLFW-b: study b1 source-code meanwhile
    https://wiki.haskell.org/GLFW
    http://www.glfw.org/docs/latest/input_guide.html
*** DONE [#D] : Look into REPA
    repa is ok, use it for arrays
    also see the Accelerate-REPA backend
** 2016-07-06 Wed VR stuff, Parser, Finance Currency JSON API, Jabber History
   @->[[[*: Parse a Houdini Cube example:][: Parse a Houdini Cube example:]]
   ]
   http://fixer.io/
   http://api.fixer.io/latest

*** DONE : Set Up Jabber History
    http://emacs-jabber.sourceforge.net/manual-0.8.0/Message-history.html
    (jabber-history-enabled t)
   
** 2016-07-08 Fri Anonymous records
*** DONE : Try out anonymous records:
    http://ruhaskell.org/files/meetup-2015-summer/3_Anonymous_Records.pdf
    https://hackage.haskell.org/package/record-0.4.1.1/docs/Record.html

    Result:
    It's not worth it.  Overloaded Records is worked on as a standard feature
    of ghc 8.x:
    https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1
** 2016-07-09 Sat Aeson open tabs
   Last set of tabs open related to Aeson/Parsec :: chromium->bookmarks->last->Aeson
   
   Nested JSON:
   http://gnclmorais.com/blog/aeson-and-nested-json/ - working through an example of nesting JSON file:
   [[file:~/Projects/Haskell/Parser/Aeson/Flickr.hs]]
** 2016-07-14 Thu working on Flickr example, Haskell, JSON
*** DONE : finish the example from:
    http://gnclmorais.com/blog/aeson-and-nested-json/
    [[file:~/Projects/Haskell/Parser/Aeson/Flickr.hs]]
** 2016-07-16 Sat Houdini Geo parser
   @->[[[*: Continue with Haskell Parsing][: Continue with Haskell Parsing]]]
    [[file:~/Projects/Haskell_Parser/Parser/Model.hipnc]]
    [[file:~/Projects/Haskell_Parser/Parser/export/model.geo]]
    [[file:~/Projects/Haskell/Parser/Aeson/Geo.hs]] - Haskell 
** 2016-07-20 Wed Prepare lambda for Alex and robots, Parsers in HaskellBook
   pdf-tools:
   https://github.com/politza/pdf-tools
   
*** DONE : prepare second laptop for Alex
    DEADLINE: <2016-07-30 Sat>
** 2016-07-21 Thu Continue learning Parsers, following Julia manual
   [[file:~/Documents/haskell-programming-0.11.2-screen.pdf::917]] Parser Combinators
   
** 2016-07-23 Sat Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators
   [[file:~/Documents/A%20Geometry%20of%20Approximation:%20Rough%20Set%20Theory%20Logic,%20Algebra%20and%20Topology%20of%20Conceptual%20Patterns.pdf::30][file:~/Documents/A Geometry of Approximation: Rough Set Theory Logic, Algebra and Topology of Conceptual Patterns.pdf]]
   @<-[[[*<2016-07-21 Thu> Continue learning Parsers, following Julia manual][<2016-07-21 Thu> Continue learning Parsers, following Julia manual]]
   ]
   @->[[[*HaskellBook][HaskellBook]]
       [[*<2016-07-27 Wed> Continue with Parsers][<2016-07-27 Wed> Continue with Parsers]]
      ]
   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/examples.hs]]
   [[docview:~/Documents/haskell-programming-0.11.2-screen.pdf::925]]

** 2016-07-24 Sun Helm-Swoop search results, Machine Learning links
   https://github.com/ShingoFukuyama/helm-swoop M-i to switch to helm-swoop when searching (C-s, C-r)
   
   Machine Learning:
   http://neuralnetworksanddeeplearning.com/chap1.html
   http://codereview.stackexchange.com/questions/135794/neural-network-in-haskell - Neural Networks (NN) in Haskell
** 2016-07-27 Wed Continue with Parsers
   @<-[[[*<2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators][<2016-07-23 Sat> Theory of Perception: The theory of Approximation Spaces, and Rough Sets; Parser Combinators]]
   ]
   @->[[[*: Continue working on Haskell Parser][: Continue working on Haskell Parser]]
   ]

   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs]]
   [[file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs]]
** 2016-07-28 Thu Diary time format
   12/22/1988  Twentieth wedding anniversary!!
   &1/1.       Happy New Year!
   10/22       Ruth's birthday.
   * 21, *:    Payday
   Tuesday--weekly meeting with grad students at 10am
   Supowit, Shen, Bitner, and Kapoor to attend.
   1/13/89     Friday the thirteenth!!
   &thu 4pm    squash game with Lloyd.
   mar 16      Dad's birthday
   April 15, 1989 Income tax due.
   &* 15       time cards due.
   
*** TODO [#C] : write about Parsec/Trifecta differnce on blog.
** 2016-07-28 Thu Fabric Engine:
*** TODO [#D] : finish a Fabric Engine tutorial when I've got nothing else to do.
   http://docs.fabric-engine.com/FabricEngine/2.3.0/HTML/GettingStartedGuide/canvastutorials.html
** 2016-08-05 Fri Raspberri Pi
   https://www.raspberrypi.org/documentation/
** 2016-08-07 Sun Org-mode images
   C-c C-x C-v org-mode-toggle-inline-images
** 2016-08-08 Mon Machine Learning
   [[file:~/Documents/A%20'Brief'%20History%20of%20Neural%20Nets%20and%20Deep%20Learning,%20Part%201%20%E2%80%93%20Andrey%20Kurenkov's%20Web%20World.html][file:~/Documents/A 'Brief' History of Neural Nets and Deep Learning, Part 1 – Andrey Kurenkov's Web World.html]]
   (local files, html copies), etc.
** 2016-08-18 Thu X3: Litcube mods:
   http://forum.egosoft.com/viewtopic.php?t=370506
   http://forum.egosoft.com/viewtopic.php?t=370506
   [[file:~/Downloads/CockpitmodNGforLU.zip][file:~/Downloads/CockpitmodNGforLU.zip]] - cockpit mod.

** 2016-08-19 Fri Anki, Dutch, Tesaurus
*** TODO [#A] : Continue converting [[file:~/Documents/Dutch/Vocabulary/total.kvtml][file:~/Documents/Dutch/Vocabulary/total.kvtml]] into Anki
** 2016-08-21 Sun HaskellBook
*** Notes on HaskellBook:
    Polymorphism in Haskell means being able to write code in terms
    of values which may be one of several, or any, type. Polymor-
    phism in Haskell is either parametric or constrained.

    A typeclass is a set of operations deﬁned with respect to a poly-
    morphic type. When a type is an instance of a typeclass, values
    of that type can be used in the standard operations deﬁned for
    that typeclass. 

    Data constructors in Haskell provide a means of creating values
    that inhabit a given type.

    Type constructors in Haskell are not values and can only be used in
    type signatures.

    Data declarations are how we refer to the entire deﬁnition that 
    begins with the data keyword.

    Each typeclass oﬀers a standard set of functions
    that can be used across several concrete types.

    Uncurried functions: One function, many arguments
    Curried functions: Many functions, one argument apiece

    Damas-Hindley-Milner type system

    188p.
    
** 2016-08-22 Mon Machine Learning by Tom Mitchel:
   [[*AI][->AI]]
   WELL-POSED LEARNING PROBLEMS:

   Definition: A computer program is said to learn from experience E with respect
   to some class of tasks T and performance measure P, if its performance at tasks in
   T, as measured by P, improves with experience E.
   p.2 TM:ML

   [[file:~/Documents/Mathematics/Machine_Learning_-Tom_Mitchell.pdf]]
   [[file:~/Documents/tictactoe.kra]]
   [[file:~/Pictures/Mathematics/tictactoe.png][file:~/Pictures/Mathematics/tictactoe.png]]
** 2016-08-23 Tue Rocket, Gravity, n-body
   @<-[[[*Rocket! n-body sim, particles, houdini][Rocket! n-body sim, particles, houdini]]]
   @->[[[*<2016-03-16 Wed> Gravity, Rocket][<2016-03-16 Wed> Gravity, Rocket]]
   ]
   [[file:~/Projects/Houdini/POPs/n_body_collide.hipnc][file:~/Projects/Houdini/POPs/n_body_collide.hipnc]]
** 2016-08-24 Wed Parsers, Backup, Fixing sink
   @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]]
*** IN-PROGRESS : Continue working on Haskell Parser
    @<-[[[*<2016-07-27 Wed> Continue with Parsers][<2016-07-27 Wed> Continue with Parsers]]]
    @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]]
    "Understanding the parsing process", p.918
    [[file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs][file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs]]
    [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs][file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs]]
    http://unbui.lt/#!/post/haskell-parsec-basics
    https://artyom.me/aeson
*** DONE : Fill in the holes betwee the tiles near the sink with fugas (in the schoor)
    DEADLINE : <2016-08-24 Wed>
*** DONE [#A] : Backup pictures from MacBookPro to a HDD
*** DONE [#A] : Clone the backup HDD    
    SCHEDULED: <2016-09-05 Mon>
** 2016-08-25 Thu Continue with parsing:
   [[*: Continue working on Haskell Parser][: Continue working on Haskell Parser]]

** 2016-08-26 Fri [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]   
** 2016-08-28 Sun [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
** 2016-08-30 Tue [[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
** 2016-08-31 Wed Rust language
   The language looks like an intersting blend between C and Haskell.
   https://www.reddit.com/r/haskell/comments/47rjr4/comparing_haskell_and_rust_which_to_choose_when/

   [[~/Projects/Rust/hello_world/main.rs]] - Rust Hello World!

*** TODO [#C] : Take a look at Phazon's library sometime:   
   https://github.com/phaazon/luminance-rs - Phazon's implementation of Luminance in Rust
   https://github.com/phaazon/luminance    - Phazon's Luminance graphics lib

** 2016-09-02 Fri Trying out Substance Designer, Rust language, Haskell Parser
   [[file:~/Documents/Allegorithmic/Substance%20Designer/5/test.sbs][file:~/Documents/Allegorithmic/Substance Designer/5/test.sbs]] - playing with basic materials
*** Houdini Plugin for Substance Designer
INSTALLER_PATH=`pwd`

cd ~/houdini/houdini/dso
PLUGIN_PATH=`pwd`

echo "Welcome to the Substance Plugin for Houdini Installer"
echo "This will install the plugin to ${PLUGIN_PATH}"
while : ; do
    echo "Would you like to continue? [y or n]"
    read ans
    case $ans in
	y|Y)
	    break
	    ;;
	n|N)
	    echo "Installation cancelled."
	    exit 1
	    ;;
	*)
	    echo "Please enter y or n"
	    ;;
    esac
done

cd ${PLUGIN_PATH}
cp -r ${INSTALLER_PATH}/files/* .
echo "Installation Complete"



*** TODO [#C] : Add a rust.el to emacs same as haskell and others
*** IN-PROGRESS [#C] : Continue with Rust basics:
    https://doc.rust-lang.org/book/getting-started.html
    https://doc.rust-lang.org/book/the-stack-and-the-heap.html
    [[/home/madjestic/Projects/Rust/hello_world_new/]] Rust hello world project
    
*** TODO [#A] : Continue with Haskell Parsing
    @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]]

** 2016-09-04 Sun Houdini Ocean, Haskell Parsers
*** Houdini Ocean, CmiVFX
   @->[[[*: Create Ocean effect in Houdini][: Create Ocean effect in Houdini]]
   ]

   [[file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids][file:~/Projects/Houdini/Fluids/cmi_vfx_advanced_flip_fluids]]
   /home/madjestic/Projects/Houdini/Ocean/initial.hipnc
   [[file:~/Projects/Houdini/Ocean][file:~/Projects/Houdini/Ocean]]

   @->[[[*<2016-08-25 Thu> Continue with parsing:][<2016-08-25 Thu> Continue with parsing:]]
   ]
** 2016-09-05 Mon Jad Nohra gitHub
   https://github.com/jadnohra/tag
   https://github.com/jadnohra/learn

*** Emacs, save point
   Save Point Position
   https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Registers.html
   C-x r SPC r   
     Record the position of point and the current buffer in register
   
   C-x r j r
     Jump to the position and buffer saved in register

*** Perlin Noise:
    I would like to understand how does noise function work:
    http://flafla2.github.io/2014/08/09/perlinnoise.html
    https://en.wikipedia.org/wiki/Perlin_noise

*** Notes on Entropy
    @->[[[*<2016-09-06 Tue> Thoughts on Entropy:][<2016-09-06 Tue> Thoughts on Entropy:]]]

   [[/home/madjestic/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/][/home/madjestic/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/]]

** 2016-09-06 Tue Guns Germs and Steal, Haskell Parser
*** Reading Guns Germs and Steal
   [[file:~/Documents/Jared%20Diamond%20-%20Guns%20Germs%20and%20Steel.pdf][file:~/Documents/Jared Diamond - Guns Germs and Steel.pdf]]

*** Haskell Parser
   (return 5) >>= (\x -> return x) -- a simple 'shuvel' example

   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/Main.hs]]
   [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/model.geo]]

**** typeClass use example:
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
module GeoParser where

import qualified Text.Parsec as P
import Text.Parsec ((<?>))
import qualified Data.ByteString.Lazy.Char8 as BC       
import Control.Applicative
import Control.Monad.Identity (Identity)
import qualified Data.ByteString.Lazy as B       

parse rule text = P.parse rule "source" text  
      
parse1 rule text = do
  let foo = P.parse rule "source" text
  return foo

jsonFile :: FilePath
jsonFile = "model.geo"            

getJson :: IO B.ByteString
getJson = B.readFile jsonFile          

-- parse (P.char '[') text
getText = do
  textJson <- getJson
  let text = BC.unpack textJson -- here file gets read as a bytesting and byte8 representation is converted into [Char]
  return text
   
sepByComma :: P.Parsec String () ()
sepByComma = do
  P.spaces
  P.char ','
  P.spaces
  return ()

class FromParserType a where
      toString :: Either P.ParseError a -> [Char]
instance FromParserType [Char] where
         toString :: Either P.ParseError [Char] -> [Char]
         toString (Right x) = x
         toString (Left _ ) = "source"
instance FromParserType ([Char], [Char], [Char]) where
         toString :: Either P.ParseError ([Char], [Char], [Char]) -> [Char]
         toString (Right (x,y,z)) = x ++ "." ++ y ++ "." ++ z
         toString (Left _ ) = "source"
instance FromParserType () where
         toString :: Either P.ParseError () -> [Char]
         toString _ = "ok"


-- fileVersion :: P.ParsecT String () Identity ([Char], [Char], [Char])
fileVersion = do
            P.char '[' `P.endBy` P.char '\n'
            P.char '\t' >> P.char '\"'
            P.many1 P.letter >>  P.char '\"'>> sepByComma >> P.char '\"'
            majorVer <- P.many1 P.digit
            P.char '.'
            minorVer <- P.many1 P.digit
            P.char '.'
            buildVer <- P.many1 P.digit
            P.char '\"' >> P.char ',' `P.endBy` P.char '\n'
            return ([majorVer, minorVer, buildVer])

hasIndex = do
         P.char '\t' >> P.char '\"'
         P.many1 P.letter >>  P.char '\"'>> sepByComma
         indexVal <- P.many1 P.letter
         return (indexVal)
         
data Geo = Geo { fileversion :: String
               , hasindex    :: String}

-- main = do
--      text <- getText
--      print text
--      bar <- parse1 (fileVersion) text
--      print $ toString bar     

** 2016-09-07 Wed Parsers, Manstein plan                            :history:
*** TODO [#D] : Read about Manstein plan on wiki
    https://en.wikipedia.org/wiki/Manstein_Plan

*** TODO [#C] : Refactor GeoParser with Trifecta:
    SCHEDULED : <2016-09-07 Wed> <2016-09-08 Thu>
    [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParserTrifecta.hs][file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParserTrifecta.hs]]
    [[file:~/Projects/Haskell/Parser/Trifecta/LearnParsers.hs]]
    [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/model.geo][file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/model.geo]]
    
** 2016-09-09 Fri Parsers progress, Fluids

   [[file:img/parsing_progress_00.png][file:~/org/img/parsing_progress_00.png]]
   - it seems like most basics are covered (short of aeson).
     I should continue with parsing the geo file in one go,
     populating relevant data structure in the process,
     returning the resulting data.
     [[file:~/Projects/Haskell/Parser/Haskell_Parsec_Basics/haskell-parsec-basics/GeoParser.hs]]

    [[/home/madjestic/Documents/cmiVFX%20-%20Houdini%20Advanced%20FLIP%20Fluid%20Systems/cmivfx%20Houdini%20AdFLIP.mp4]]
    @->[[[*<2016-09-10 Sat>][<2016-09-10 Sat>]]]

** 2016-09-10 Sat
   stopped at 9:02 @->[[[*Fluids][Fluids]]]
** 2016-09-12 Mon cont.
   Reading G.H.Hardy "A Mathematician's Apology" :
   [[file:~/Documents/Hardy-AMathematiciansApology.pdf][file:~/Documents/Hardy-AMathematiciansApology.pdf]] p.101
   Appearance and Reality. F.H.Bradley
** 2016-09-13 Tue Haskell, Category Theory
   Bartosz Milewski, Category Theory 1.2
   https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/
   https://www.youtube.com/watch?v=p54Hd7AmVFU&list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_&index=2
** 2016-09-14 Wed Emacs Progress Matrix
*** DONE : set up formulas for Progress Matrix   
    http://orgmode.org/org.html#Advanced-features vsum
    [[*Progress Matrix][Progress Matrix]]
** 2016-09-15 Thu Houdini Lorenz, cmiVFX advanced fluids
   [[file:~/Projects/Houdini/Lorenz/lorenz.hipnc][file:~/Projects/Houdini/Lorenz/lorenz.hipnc]] - made it pretty, just hit play

   @<-[[[*: Create Ocean effect in Houdini][: Create Ocean effect in Houdini]]]
   [[file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/model.hipnc][file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/model.hipnc]]
   [[file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/cmivfx_Houdini_AdFLIP.mp4][file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/cmivfx_Houdini_AdFLIP.mp4]] 22:54
   /home/madjestic/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/PRJ_Houdini_FLIP_Fluid_Systems/PRJ_Houdini_Ocean_Waves/chapter_1/houdini_files
   [[file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/PRJ_Houdini_FLIP_Fluid_Systems/PRJ_Houdini_Ocean_Waves/chapter_1/houdini_files/ocean_waves_v02.hip][file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/PRJ_Houdini_FLIP_Fluid_Systems/PRJ_Houdini_Ocean_Waves/chapter_1/houdini_files/ocean_waves_v02.hip]]

** 2016-09-16 Fri Category Theory for Haskell programmers
   @->[[[*<2016-09-28 Wed> Parsec links, Category Theory][<2016-09-28 Wed> Parsec links, Category Theory]]]
*** DONE [#A] : Finish prioritizing tasks in Agenda mode   
*** TODO [#B] : Continue with watching Category Theory for Haskell programmers
   https://youtu.be/p54Hd7AmVFU?t=1594
** 2016-09-19 Mon Continue with Houdini Fluids
   @->[[[*<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids][<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids]]]
   file:~/Documents/cmiVFX_-_Houdini_Advanced_FLIP_Fluid_Systems/cmivfx_Houdini_AdFLIP.mp4 15:06
** 2016-09-21 Wed Haskell Parsers, Houdini fluids
   @->[[[*Parsers][Parsers]]
       [[*Haskell GeoParser:][Haskell GeoParser:]]
       [[*<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids][<2016-09-15 Thu> Houdini Lorenz, cmiVFX advanced fluids]]]
** 2016-09-23 Fri Haskell, JSON, parser
   https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/json - pizza example
** 2016-09-26 Mon Credit Cards, BF2142
   https://www.icscards.nl/abnamrogb/login
   Login to ABNAmro -> Tools -> Credit Cards Online

   https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Registers.html marker registers position
   C-x r SPC r - save position in register 'r'
   C-x r j r   - jump to position 'r'

   https://battlelog.co/post.php?id=14194 BF2142
** 2016-09-28 Wed Parsec links, Category Theory
   @<-[[[*<2016-09-16 Fri> Category Theory for Haskell programmers][<2016-09-16 Fri> Category Theory for Haskell programmers]]]
   https://github.com/madjestic/nu/blob/master/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/GeoParser.hs
   https://artyom.me/aeson
   http://book.realworldhaskell.org/read/using-parsec.html
   https://gist.github.com/zearen-wover/1692518
   http://newartisans.com/2012/08/parsing-with-haskell-and-attoparsec/
   http://stackoverflow.com/questions/2705386/parsec-haskell-lists
   https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/attoparsec
   https://hackage.haskell.org/package/parsec-3.1.11/docs/src/Text.Parsec.Char.html#oneOf
   http://unbui.lt/#!/post/haskell-parsec-basics
   
   https://goo.gl/Vm5K7e Category Theory 2.1
   epic  - surjectiv
   monic - injective

   epimorphism
   monomorphism
   https://www.youtube.com/watch?v=aZjhqkD6k6w Category Theory 3.1

   Emacs folding mode (yafolding-mode) M-RETg - yafolding-toggle-element
   
*** IN-PROGRESS [#A] : Continue with parsing: introduce Aeson for parsing JSON part of Geo (topology), based on Pizza example:
    https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/json
** 2016-09-29 Thu Haskell Parser
   [[/home/madjestic/Projects/Haskell/Parser/Aeson/Flickr.hs]]
   [[file:~/Projects/Haskell/Parser/Aeson/photos.json::"farm":%207,]]
   http://gnclmorais.com/blog/aeson-and-nested-json/

   [[/home/madjestic/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/GeoParser.hs]]
   [[file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/model.geo::"indices",%5B1,5,4,0,2,6,5,1,3,7,6,2,0,4,7,3,2,1,0,3,5,6,7,4%5D]]
   https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/json
   
*** TODO [#A] : I need to add Aeson to GeoParser.hs - specify nested JSON desctiption as in Flickr.hs example.
** 2016-10-10 Mon 3D Coat 4.7 71% discount for Pro version, Callendar mode
   https://github.com/kiwanami/emacs-calfw - useful tips
*** TODO : decide on buying a Pro license for 199$   
    DEADLINE : <2016-10-23 Sun>
   
** 2016-10-20 Thu Haskell Parser, Nested JSON
   [[file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/stack_overflow/data.hs][file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/stack_overflow/data.hs]]
   [[file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/stack_overflow/data.json][file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/stack_overflow/data.json]]
   
** 2016-10-23 Sun

   http://www.gentei.org/~yuuji/software/revive.el
   (define-key ctl-x-map "S" 'save-current-configuration)
   (define-key ctl-x-map "R" 'resume)
   (define-key ctl-x-map "K" 'wipe)
** 2016-10-26 Wed Emacs Rectangels cua-mode (a type of region select, red rectangle select)
   https://www.emacswiki.org/emacs/CuaMode
** 2016-10-29 Sat 0ad
   Manual: http://trac.wildfiregames.com/wiki/0adManual
   Getting Started for Programmers: http://trac.wildfiregames.com/wiki/GettingStartedProgrammers
   Tickets: http://trac.wildfiregames.com/query?status=assigned&status=new&status=reopened&keywords=~simple&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component&report=16&order=priority

   Unreal Engine compiling for Linux
   https://github.com/madjestic/UnrealEngine/blob/release/Engine/Build/BatchFiles/Linux/README.md

   Lambda Cube 3d
   https://lambdacube3d.wordpress.com/
   http://lambdacube3d.com/
   Overview: http://www.lambdacube3d.com/overview
** 2016-10-31 Mon HVC Afval - (trash, garbage collectors)
   https://www.hvcgroep.nl/particulier/klantenservice/contact-met-hvc
** 2016-11-17 Thu
   http://harry.garrood.me/blog/aeson-better-errors/
   http://stackoverflow.com/questions/20269101/how-to-trace-back-parsing-errors-with-aeson-answer
   http://stackoverflow.com/questions/20269101/how-to-trace-back-parsing-errors-with-aeson-answer

   http://json.parser.online.fr/

   I think the basic haskell parser with Aeson works
   [[file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/Bar/Main.hs][file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/Bar/Main.hs]]

   The trick is that JSON must be "well-formatted" before feeding it to Aeson:
   { "foo" : 
     {
       [ "bar: { "baz" : 42 } 
       ]
     }
   }
   
   - I can check the formatting errors here:
     http://json.parser.online.fr/
     http://oleg.fi/relaxed-json/ - a JSON formatter by Oleg

** 2016-11-20 Sun Haskell Books: Parallel and Concurrent Programming in Haskell: Techniques for Multicore and Multithreaded Programming
   [[file:~/Documents/Parallel_and_Concurrent_Programming_in_Haskell.pdf][file:~/Documents/Parallel_and_Concurrent_Programming_in_Haskell.pdf]]
** 2016-11-20 Sun Haskell, Category Theory
   [[file:todo.org::*:%20Continue%20Watchin%20Bartozh%20Category%20Theory:][< : Continue Watchin Bartozh Category Theory:]]
** 2016-11-21 Mon
   Reading Simon Marlow's book:
   [[file:~/Projects/Haskell/Parallel_and_Concurrent_Programming_in_Haskell][file:~/Projects/Haskell/Parallel_and_Concurrent_Programming_in_Haskell]]
** 2016-11-29 Tue Installing Kivy Designer
   http://kivy-designer.readthedocs.io/en/latest/installation.html
** 2016-11-30 Wed Playing with Haskell Core IR, FFI
   
   ghc -ddump-simpl -ddump-to-file -dsuppress-all -dynamic reading_ghc_core.hs
** 2016-12-02 Fri Setting up Emacs as a C IDE Machine Learning
   [[file:todo.org::*:%20Set%20up%20Emacs%20as%20IDE][@< : Set up Emacs as IDE]]
   https://www.coursera.org/learn/machine-learning/lecture/RKFpn/welcome
   https://www.coursera.org/learn/neural-networks/supplement/gKXYz/lecture-slides-and-resources
** 2016-12-04 Sun
   [[*<2016-12-12 Mong> Agda, Magit][><2016-12-12 Mong> Agda, Magit]]
   Coursera Machine Learning course:
*** Machine Learning:
**** Supervised Learning:    
     https://www.coursera.org/learn/machine-learning/supplement/NKVJ0/supervised-learning
     2 Class learning problems:
***** Regression
***** Classification
**** Model and Cost function
     Square Root Cost Function
     https://www.coursera.org/learn/machine-learning/lecture/rkTp3/cost-function
     https://www.coursera.org/learn/machine-learning/supplement/nhzyF/cost-function
** 2016-12-05 Mon
   C-h m - emacs help on mode
** 2016-12-06 Tue
   [[*<2016-12-04 Sun>][@<<2016-12-04 Sun>]]
   Feature Scaling
   Mean Normalization

** 2016-12-07 Wed VPN Work from Home Checkpoint Security
   https://www.checkpoint.com/try-our-products/
   https://supportcenter.checkpoint.com/supportcenter/portal/user/anon/page/default.psml/media-type/html?action=portlets.DCFileAction&eventSubmit_doGetdcdetails=&fileid=45789
   https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doShowprelanding&all
** 2016-12-11 Sun Haskell GeoParser
   [[file:~/Projects/Haskell/Parser/Aeson/GeoParser][file:~/Projects/Haskell/Parser/Aeson/GeoParser]]
   [[file:todo.org::*:%20make%20a%20box:%20parse%20positions%20with%20python][: make a box: parse positions with python]]
   [[file:todo.org::*:%20make%20a%20pig:%20do%20the%20same%20and%20verify%20if%20array%20indixes%20are%20the%20same.][: make a pig: do the same and verify if array indixes are the same.]]
** 2016-12-12 Mon Agda Magit
   [[*<2016-12-04 Sun>][<<2016-12-04 Sun>]]
   [[*<2016-12-16 Fri> Machine Learning][><2016-12-16 Fri> Machine Learning]]
   I played around with Agda a bit:  things seem much easier than 2-3 y.a.  Everything is ready to use from portage.
   [[file:~/Projects/agda/study/LearnYouAn.agda][file:~/Projects/agda/study/LearnYouAn.agda]]
   http://williamdemeo.github.io/2014/02/27/learn-you-an-agda/#programs-are-proofs

   Coursera:
   https://www.coursera.org/learn/machine-learning/lecture/LRQnl/control-statements-for-while-if-statement
   
   Magit:
   https://magit.vc/manual/magit/Editing-commit-messages.html
   https://www.emacswiki.org/emacs/Magit
** 2016-12-16 Fri Machine Learning
   [[*2016-12-17 Sat Machine Learning][>2016-12-17 Sat Machine Learning]]
   "The undecided values are called parameters, and the description is referred to as the
   model. Your job is to write an algorithm that observes existing examples to figure out how to
   best tune parameters to achieve the best model."

** 2016-12-17 Sat Machine Learning
   [[*2016-12-16 Fri Machine Learning][<2016-12-16 Fri Machine Learning]]
   [[file:~/Documents/Machine_Learning_with_TensorFlow_v5_MEAP.pdf][file:~/Documents/Machine_Learning_with_TensorFlow_v5_MEAP.pdf]] Tensorflow Book
   p.25

** 2016-12-20 Tue Cursera Machine Learning
   [[file:~/Projects/Octave/Coursera_Machine_Learning][file:~/Projects/Octave/Coursera_Machine_Learning]]
** 2016-12-20 Tue Siggraph, VDA
   [[*VDA Virtual Bones][VDA Virtual Bones]]
   [[file:~/Documents/VDA/acm/acmsiggraph/template.tex][file:~/Documents/VDA/acm/acmsiggraph/template.tex]]
   (auto-revert-mode t) - updates pdf when tex is recompiled.
   http://www.gnuplotting.org/plotting-data/
   http://www.gnuplotting.org/data/plotting_data1.dat
   http://www.gnuplotting.org/code/plotting_data1.gnu
** 2017-01-02 Mon Coursera Machine Learning
   https://www.coursera.org/learn/machine-learning/lecture/rkTp3/cost-function
   https://www.coursera.org/learn/machine-learning/supplement/ExY6Z/lecture-slides
   https://d3c33hcgiwev3.cloudfront.net/_ec21cea314b2ac7d9e627706501b5baa_Lecture2.pdf?Expires=1483401600&Signature=BTGxMAqGPszzMB0COvrPlK8PDKpvGrRBQEp9cxKHek-LLcwNDnu4p5Qw1UQhc5YiZD-bR93T0VIJM-nhjUu60pCjyrq8mIYuM21Q9zG2vk-XpgYvhM6H3qE7u13lsJ3dxfuNBTyTTldJHdsa2mxVTdd0UudL66QTew5pg~RmnoY_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A
** 2017-01-06 Fri
   https://www.amazon.com/Tensors-Mathematics-Relativity-Continuum-Mechanics/dp/0387694684
   https://www.amazon.co.uk/Manifolds-Tensors-Forms-Introduction-Mathematicians/dp/1107042194/ref=sr_1_1?ie=UTF8&qid=1483675921&sr=8-1&keywords=Manifolds%2C+Tensors%2C+and+Forms
** 2017-01-08 Sun Dyson vs Dwekins, Stanislav Lem
   https://www.edge.org/discourse/dawkins_dyson.html
   http://psylib.org.ua/books/lemst01/txt04.htm
   https://en.wikipedia.org/wiki/Kardashev_scale
   https://en.wikipedia.org/wiki/The_High_Frontier:_Human_Colonies_in_Space
   
   https://www.youtube.com/watch?v=zJGppi9hBtQ Aubrey de Grey: Death Will Be Optional
   http://emacs-fu.blogspot.nl/2011/02/keeping-your-secrets-secret.html emacs encryption storing passwords

** 2017-01-09 Mon
   http://www.motherjones.com/politics/2017/01/read-us-intelligence-report-russian-hacking-2016-campaign

** 2017-01-10 Tue SIGGRAPH Virtual Bones paper
   [[*SIGGRAPH 2017][->SIGGRAPH 2017]]
   https://pdfs.semanticscholar.org/d862/614077b59eeb599bf446c19fb5758cd47e59.pdf - somewhat related with useful links
   http://www.cs.uoi.gr/tech_reports/publications/skinning.pdf - useful references
   http://fabiensanglard.net/doom3_documentation/37728-293750.pdf relate + references
   https://www.google.nl/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=skinning+on+GPU&start=10 - google search results
   http://www.gamasutra.com/blogs/TequilaWorks/20160620/275347/How_to_take_advantage_of_textures_in_the_vertex_shader.php - Gamasutra guys doing something very similar
** 2017-01-17 Tue Optics Refraction IOR and wavelength
   http://physics.stackexchange.com/questions/65812/why-do-prisms-work-why-is-refraction-frequency-dependent
** 2017-01-25 Wed Virtual Bones paper
   [[file:~/Documents/VDA/acm/acmsiggraph/template.bbl][file:~/Documents/VDA/acm/acmsiggraph/template.bbl]]
   [[file:~/Documents/VDA/acm/acmsiggraph/template.tex][file:~/Documents/VDA/acm/acmsiggraph/template.tex]]
   
   [[file:~/Projects/Octave/Coursera_Machine_Learning/machine-learning-ex1/ex1/test.m][file:~/Projects/Octave/Coursera_Machine_Learning/machine-learning-ex1/ex1/test.m]]
   [[file:~/Projects/Octave/Coursera_Machine_Learning/machine-learning-ex1/ex1.pdf][file:~/Projects/Octave/Coursera_Machine_Learning/machine-learning-ex1/ex1.pdf]]
** 2017-02-01 Wed Diffusion Reaction System
   [[file:todo.org::*Render%20out%20a%20video,%20same%20as%20for%20n-bodies.][->(todo) : Render out a video, same as for n-bodies.]]
   [[file:~/Projects/Houdini/DRS][file:~/Projects/Houdini/DRS]]
   [[file:~/Projects/Houdini/DRS/DRS.hipnc][file:~/Projects/Houdini/DRS/DRS.hipnc]]
** "Godika: 22 century" : Elite inspired game VDA
   [[file:~/Projects/Omega][file:~/Projects/Omega]]
   [[*VDA Virtual Bones][-> VDA Virtual Bones]]

*** Robot Raptor Entity performance capture:
    N  | Total CPU Time| GPU         | Draw  | Total        | FPS        
       | (microsec)     tris         | Calls | time this frame (%) 

    1    2700  + 468    4652/4767    | 49/1    0.317/0.100  |   
    2    3195  + 956    9304         | 98      0.582/0.192            
    3    5459  + 1270   13956        | 147     0.642/0.281            
    4    6741  + 1813   18608        | 196     0.704/0.354            
    5    7550  + 2339   23260        | 245     0.834/0.423            
    6    9264  + 2665   27912        | 294     1.117/0.501            
    7    10389 + 2709   32564        | 343     1.141/0.581            
    8    11855 + 2916   37216        | 392     1.179/0.645            
    9    13379 + 3310   41868        | 441     1.267/0.706            
    10   14942 + 4458   46520/47670  | 490/1   1.385/0.756            
    20   22355 + 7159   93040        | 980/12  2.550/1.449  |   
    30   36645 + 10859  139560       | 1470    3.258/2.170  | 30
    40   103231+ 15757  186080       | 1960    3.974/2.884  | 24
    50   132818+ 21013  232600/238350| 2450/1  5.083/3.607  | 15/30
    60   146811+ 23849  279129/286020| 2940/16 5.897/4.178  | 13
    70   182697+ 10081  325640       | 3430/28 6.709/4.609  | 12
    80   195700+ 31005  372160       | 3920    7.340/5.031  | 10
    90   219740+ 34405  418680       | 4410/   8.513/5.580  | 9 
    100  246989+ 36485  465200/476700| 4900/33 9.305/5.987  | 8/30
    200                 953400       |     /23      /11.183
    300                 1430100      |     /22      /13.680
    400                 1906800      |     /48      /17.443
    500                 2383500      |     /83      /21.040
    600                 2860200      |     /83      /24.027

    512x64 64bit 256Kb
** 2017-02-10 Fri
   VDA links
   https://pdfs.semanticscholar.org/d862/614077b59eeb599bf446c19fb5758cd47e59.pdf
   http://www.mcihanozer.com/tips/computer-graphics/skinning/
   http://ruh.li/AnimationVertexSkinning.html
   http://www.gamasutra.com/blogs/TequilaWorks/20160620/275347/How_to_take_advantage_of_textures_in_the_vertex_shader.php
   http://fabiensanglard.net/doom3_documentation/37728-293750.pdf
   http://www.cs.uoi.gr/tech_reports/publications/skinning.pdf
   
** 2017-02-11 Sat
   [[*2016-06-05 Sun][Yampy Cube]] - finish that flappy cube game already.

** 2017-02-14 Tue Siggraph papers
   https://sis.siggraph.org/cgi-bin/SIS.py?preparsed=1&command=report&name=forms_manager&realm=siscore&SMON=J6akPMJK
   Submitted the Siggraph 2017 talk:
   [[file:~/Documents/VDA/acm/acmsiggraph/draft.tex][file:~/Documents/VDA/acm/acmsiggraph/draft.tex]]

** 2017-02-17 Fri Yampy Cube
   [[file:~/Documents/FRP_Yampy_Cube_Flappy_Bird_Haskell_clone.mp4][file:~/Documents/FRP_Yampy_Cube_Flappy_Bird_Haskell_clone.mp4]]
   [[file:~/Projects/Haskell/FRP/yampy-cube/yampy-cube.cabal][file:~/Projects/Haskell/FRP/yampy-cube/yampy-cube.cabal]] - finish editing my-yampy...
** 2017-02-19 Sun FRP Yampa Coursera Machine Learning
   [[file:~/Documents/FRP/session.dump][file:~/Documents/FRP/session.dump]] - playing with arrow combinators

   Logicstic regression, gradient descent, cost function:
   [[file:~/Pictures/Screenshot_20170219_221601.png][file:~/Pictures/Screenshot_20170219_221601.png]]
** 2017-02-20 Mon Quaternions
   [[file:~/Documents/Visualizing%20Quaternions.pdf][file:~/Documents/Visualizing Quaternions.pdf]]

   Id paper on Matrix and Quaternion transformation
   [[file:~/Documents/SIMD-From-Quaternion-to-Matrix-and-Back.pdf][file:~/Documents/SIMD-From-Quaternion-to-Matrix-and-Back.pdf]]
** 2017-02-27 Mon Godika
   GOdika: playing with a Solar system:
   The update works ok for 9 planets, though when trying to add the Moon,
   the system seems to fail (Earth orbital velocity is too high to let 
   the Moon adequately compute it's orbital position relative to the Earth).
   It seems that it needs an update cycle of it's own, which is relative to
   the Earth's orbital time/velocity.
   [[file:~/Projects/Houdini/POPs/star_system/Model_.hipnc][file:~/Projects/Houdini/POPs/star_system/Model_.hipnc]]
** 2017-02-28 Tue GOdika...
   [[file:~/Projects/Omega/Model.hipnc][file:~/Projects/Omega/Model.hipnc]]
   [[file:~/Projects/Houdini/POPs/star_system][file:~/Projects/Houdini/POPs/star_system]]
   [[file:~/Projects/Houdini/Godika][file:~/Projects/Houdini/Godika]]
   /home/madjestic/Projects/Omega/ships/Model.hipnc
** 2017-03-01 Wed Redshift GPU Houdin
   http://lesterbanks.com/2017/02/volume-effects-redshift-houdini/
   /home/madjestic/Desktop/redshift.hipnc
** 2017-03-02 Thu Houdini Water test
   [[/home/madjestic/Desktop/water_test.hipnc]] - water test
   https://vimeo.com/182074285
   https://sidefx.com/education/illume-webinars/
   https://www.sidefx.com/tutorials/houdini-illume-webinar-flip-fluids/
** 2017-03-08 Wed Houdini Water videos
   [[file:~/Documents/FLIP%20Part%20Two%20(Jeff%20Wagner)%20_%20Houdini%20ILLUME%20Webinar-189254805.mp4][file:~/Documents/FLIP Part Two (Jeff Wagner) _ Houdini ILLUME Webinar-189254805.mp4]]
** 2017-03-10 Fri Allegorithmic Substance Designer Houdini FLIP
   https://youtu.be/0rqmXRFCO7s?t=252
   [[*2017-03-08 Wed Houdini Water videos][->2017-03-08 Wed Houdini Water videos]]
   [[file:~/Documents/FLIP%20Part%20Two%20(Jeff%20Wagner)%20_%20Houdini%20ILLUME%20Webinar-189254805.mp4][file:~/Documents/FLIP Part Two (Jeff Wagner) _ Houdini ILLUME Webinar-189254805.mp4]] 1:25:40
   
** 2017-03-11 Sat Unity3D
   https://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/#post-2453359
   [[file:~/bin/unity3d.sh][file:~/bin/unity3d.sh]]

** 2017-03-12 Sun Substance Designer tuts
   https://youtu.be/61TmAi7hoc0?t=107
   https://tutorials.allegorithmic.com/courses/18593d4ddd754a1ba28dc72bfc54f64d/youtube-61TmAi7hoc0
   https://support.allegorithmic.com/documentation/display/SD5/Getting+Started
** 2017-03-16 Thu Coursera Dutch
   [[file:~/Documents/machine-learning-ex3][file:~/Documents/machine-learning-ex3]]
   https://www.coursera.org/learn/machine-learning/programming/Y54Zu/multi-class-classification-and-neural-networks
   https://d3c33hcgiwev3.cloudfront.net/_48018e8190fedff87b572550690056d2_Lecture8.pdf?Expires=1489708800&Signature=kz5XZOc6EUK0uBGhQy-N66g-Iu9naMm7r3vZIr-1JYXhXudRvJ0wTTVoXKSS5fAcMmYoPnwRsbixFLBeoUOfL7yAbr4w5VCvbRY0qxRyWWQRa1xgwszui5MRzh3Jevlxbe~flLrqNbM5TJ9chjhan8ncRmoJn0hqDLzXYEE969k_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A
   https://www.coursera.org/learn/machine-learning/exam/HrMM9/neural-networks-representation
   
   Dutch
   http://www.verbix.com/webverbix/go.php?T1=uitkomen&Submit=Go&D1=24&H1=124
   
** 2017-03-19 Sun Haskell Linear Types
   http://blog.tweag.io/posts/2017-03-13-linear-types.html
   
** 2017-03-26 Sun Communism
   [[file:~/Documents/Communism][file:~/Documents/Communism]]
** 2017-03-27 Mon
*** TODO : add a vectorized version of costFunction, befor regularized ver.: 
    [[file:~/Documents/machine-learning-ex2/ex2/costFunction.m][file:~/Documents/machine-learning-ex2/ex2/costFunction.m]]
   
** 2017-03-29 Wed
   https://sites.google.com/site/77neuronsprojectperelman/
   https://www.ibisc.univ-evry.fr/~belardinelli/Documents/Logique/Mathematical-Logic-ChiswellHodges.pdf
   [[file:~/Documents/Mathematical-Logic-ChiswellHodges.pdf][file:~/Documents/Mathematical-Logic-ChiswellHodges.pdf]] Math Logic, Jad
** 2017-04-01 Sat
   https://github.com/schneems/Octave/blob/master/mlclass-ex2/mlclass-ex2/costFunction.m
   
** 2017-04-02 Sun
   https://github.com/George66/Textbook
   
** 2017-04-03 Mon Magit
   https://github.com/jkitchin/magit-tutorial
** 2017-04-07 Fri Yampa haskell-overlay custom-overlay
   /usr/local/portage/haskell/dev-haskell/yampa
   I experimented with adding a custom ebuild to a local portage branch:
   /usr/local/portage/haskell/dev-haskell/yampa
   cp /usr/portage/header.txt ./hello-world-1.0.ebuild
   ebuild hello-world-1.0.ebuild manifest clean merge
   - this will add the custom ebuild to portage tree, it can be emerged now.

     Still, a better option, haskell-wise, is to use hackport:
     ~/overlays/gentoo-haskell
     hackport make-ebuild dev-haskell ~/Projects/Haskell/Yampa/Yampa.cabal
     sudo hackport merge yampa  - (e)merges the ebuild.

   - working with Magit:
     magit-status window: M - remote popup window (can change remote links)

   - Yampa cube: Synthesizer programming
     [[file:~/Documents/FRP_Yampy_Cube_Flappy_Bird_Haskell_clone.mp4][file:~/Documents/FRP_Yampy_Cube_Flappy_Bird_Haskell_clone.mp4]] 
     [[file:~/Documents/Modular_Synthesizer_Programming_in_Haskell.pdf][file:~/Documents/Modular_Synthesizer_Programming_in_Haskell.pdf]]
*** DONE : Continue watching since 00:24
    [[file:~/Documents/FRP_Yampy_Cube_Flappy_Bird_Haskell_clone.mp4][file:~/Documents/FRP_Yampy_Cube_Flappy_Bird_Haskell_clone.mp4]] 
    [[file:~/Projects/Haskell/FRP/yampy-cube/src/Main.hs][file:~/Projects/Haskell/FRP/yampy-cube/src/Main.hs]]
** 2017-04-10 Mon FRP Yampa Haskanoid Unreal Engine Pong game Machine Learning Coursera
   - Coursera, Week 5:
   https://www.coursera.org/learn/machine-learning/discussions/weeks/5
   https://www.coursera.org/learn/machine-learning/resources/go98N
   https://www.coursera.org/learn/machine-learning/resources/EcbzQ
   https://www.coursera.org/learn/machine-learning/lecture/na28E/cost-function

   - Unreal Engine Pong:
   https://www.youtube.com/watch?v=0Cmr4maZEyY
   [[file:~/Documents/Unreal%20Projects/UE4_Pong][file:~/Documents/Unreal Projects/UE4_Pong]]
   UE4Editor "/home/madjestic/Documents/Unreal Projects/UE4_Pong/UE4_Pong.uproject"

   - Haskell Haskanoid:
   [[file:~/Projects/Haskell/haskanoid/src/Main.hs][file:~/Projects/Haskell/haskanoid/src/Main.hs]]

   
   
     
   
** 2017-04-14 Fri Haskell, Simon Marlow
   - Parallel and Concurrent Programming in Haskell
   http://chimera.labs.oreilly.com/books/1230000000929

   Chapter on Repa and Accelerate:
   http://chimera.labs.oreilly.com/books/1230000000929/ch05.html
   
   - Gen, Sander docs
     [[file:~/Documents/2016_Construction][file:~/Documents/2016_Construction]]
** 2017-04-15 Sat Tensorflow Haskell
   - Free Google course about Deep Learning:
     https://www.udacity.com/course/deep-learning--ud730
   
   - Installing Tensorflow from source:
     https://www.tensorflow.org/install/install_sources

   - Parallel and Concurrent Haskell
     https://github.com/simonmar/parconc-examples
     
   - HDMI:
     $ xrandr --output HDMI1 --mode 1920x1080
     $ xrandr -s 1600x900
** 2017-04-22 Sat itch.io 
   https://itch.io/ - game launch platform for "Project: Omega"
*** from IRC log:
    me > http://pasteboard.co/76m0AI0Vh.png
    <Eisenhans> are you trying to compete with Elite now? ;)
    me > itching a scratch :)
    me > the bloody thing does not get released on Linux, so what choice
    do I have?
    <Eisenhans> none, really.
    <Eisenhans> if you are looking for a portal to do an initial
    release.. itch.io
    <Eisenhans> (I have very good experiences with them)
    me > thanks :)
    me > it's far from being done, but I will keep that in mind
    me > never heard about them by the way, a weird conoinsidence with the
    name
    me > conoinsidence -> coinsidence
    <Eisenhans> I have dealt with them in varying capacity and roles over
    the last 4 years. they have managed to gather a unique audience of
    open minded people
    <Eisenhans> have a wireframe duo-tone text-graphic adventure with a
    heavy story? that's the place to release it
    <Eisenhans> also they are super reliable with payouts etc, and have
    exactly zero API requirements
    <Eisenhans> upload a tar.gz, done.
    me > sounds good
** 2017-04-23 Sun Haskell Jump to next error:
   M-g-f
** 2017-04-25 Tue GLFW-b Politics
*** TODO : create an infographics for Oil trade in 1065-1985 USSR vs 1995-2017 RF also Oil Price
    http://www.globalaffairs.ru/number/n_4831
    https://ru.wikipedia.org/wiki/%D0%AD%D0%BA%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0_%D0%A1%D0%A1%D0%A1%D0%A0
   
** 2017-04-26 Wed О защите прав потребителей: OZPP
   http://www.ozpp.ru/laws/zpp.php
   http://www.consultant.ru/document/cons_doc_LAW_305/

   - Longboards:
   http://www.yankodesign.com/2011/04/18/infinite-combo-longboar/
   
   - GLFW-b/SDL2
     wtf is SDL.Scancode?  What's the GLFW-b equivalent?
*** TODO : convert SDL2 Input handling to GLFW-b
    [[file:~/Projects/Haskell/yampy-cube/src/Input.hs][file:~/Projects/Haskell/yampy-cube/src/Input.hs]]
** 2017-04-29 Sat Haskell
   [[file:~/Projects/Haskell/sdl2-test/test_00/Main.hs][file:~/Projects/Haskell/sdl2-test/test_00/Main.hs]]
** 2017-04-30 Sun Haskell Mandelbrot SDL2 Yampa OpenGL example
*** DONE : Continue refactoring
    - This is almos working (UI does not work)
      /home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/

    - SDL2 OpenGL example:
      /home/madjestic/Projects/Haskell/opengl-sdl-tutorial/3-Rendering-with-OpenGL/

    - Yampy Cube
      /home/madjestic/Projects/Haskell/yampy-cube/src/
*** DONE : refactor yampy-cube to draw a single rectangle (a minimal SDL Yampa app example)      
*** DONE : replace SDL draw call with OpenGL
     [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2-asInYampyCube/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2-asInYampyCube/Main.hs]]
*** DONE : clean up (rename, etc.)
     [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2-asInYampyCube/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2-asInYampyCube/Main.hs]]
*** WAITING : refactor for yampa+glfw+opengl
     I got stuck (SDL.eventPayload):
     [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-glfw-b/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-glfw-b/Main.hs]]
     https://github.com/madjestic/Haskell-OpenGL-Tutorial/tree/master/Mandelbrot-FRP-io-glfw-b
** 2017-05-03 Wed Haskell, FRP keyboard events, The Book of Shaders
   - Interesting links:
   http://thebookofshaders.com/11/
   https://github.com/lukexi/halive - Haskell Live recompile
   http://pixelspiritdeck.com/  Taro OpenGL playing cards

   - glslViewer Live GLSL shader update
   [[file:~/Projects/glslViewer][file:~/Projects/glslViewer]] 
   https://github.com/patriciogonzalezvivo/glslViewer

   http://buildyourownlisp.com/
   http://libcello.org/
*** TODO : figure out how HoldKey works
** 2017-05-04 Thu Latest youtube links
   https://www.youtube.com/watch?v=sdeWRieUw2U
   http://buildyourownlisp.com/chapter1_introduction#about
   https://www.youtube.com/watch?v=9QveBbn7t_c
   https://www.youtube.com/watch?v=gEoruozy3mk
** 2017-05-04 Thu more crazy links Postgresql, Schemavers a space-sim game to learn Postgresql
   https://schemaverse.com/tutorial/tutorial.php?page=MyResources
** 2017-05-05 Fri Links
   Build Your Own Lisp
     http://buildyourownlisp.com/chapter1_introduction#about
   FRP with Netwire
     https://www.youtube.com/watch?v=sdeWRieUw2U
   Postgresql tutorial
     https://www.postgresql.org/docs/8.0/static/tutorial-start.html
     https://www.postgresql.org/docs/8.0/static/install-requirements.html
       Postgresql-based space sim game:
           https://schemaverse.com/
           Rules
             https://schemaverse.com/tutorial/tutorial.php?page=MyResources
       Haskell high-level bindings to Postgresql:
         https://github.com/tomjaguarpaw/haskell-opaleye
** 2017-05-07 Sun Solving Repeated Events in Yampa:
   http://stackoverflow.com/questions/43831573/yampa-sdl2-repeating-keypress-button-hold-event-behavior-example
** 2017-05-08 Mon Yampa/SDL2 Mandelbrot
*** TODO : @Yampa @SDL2 @Mandelbrot Re-write to support key-hold
    [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2]]
    [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Main.hs]]
    [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Input.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Input.hs]]

    Possible options:
    a) Event List
    b) (Scancode, Bool)
    
    References: Perez on FRP key-repeat issue
    http://stackoverflow.com/questions/43831573/yampa-sdl2-repeating-keypress-button-hold-event-behavior-example#comment74711673_43831573
    https://mail.google.com/mail/u/0/#inbox/15be4878b6ecae3a

    Scratch notes:
    edge :: SF Bool (Event ())

    keyRepeat                        :: SF AppInput (Event ())
    >>^  :: Arrow a => a b c -> (c -> d) -> a b d
    filterE (code ==) >>^ tagWith () :: Event SDL.Scancode -> Event ()

    >>^  :: Arrow a => a b c -> (c -> d) -> a b d
    tagWith () :: Event a -> Event ()

    ^>>  :: Arrow a => (b -> c) -> a c d -> a b d
    inpKeyRepeat :: AppInput -> Bool
    edge         :: SF Bool (Event ())

    ^>>  :: Arrow a => (b -> c) -> a c d -> a b d
    inpKeyPressed :: AppInput -> SDL.Scancode
    edgeTag       :: a -> SF Bool (Event a)

*** TODO : Work an a Mandelbrot-io (no FRP) example:
    possibly have 2 versions: sdl2 and glfw-b
    [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot/Main.hs]]

*** TODO : study SDL2 examples
    http://lazyfoo.net/tutorials/SDL/index.php
    https://github.com/palf/haskell-sdl2-examples
**** TODO : fix 2-year old sdl2 examples
     [[file:~/Projects/Haskell/haskell-sdl2-examples][file:~/Projects/Haskell/haskell-sdl2-examples]] 
    
** 2017-05-09 Tue Houdini Colliding Particles
   - OpenGL Precision Qualifiers
     There are three precision qualifiers: highp, mediump, and lowp.
   
   - VPN Noordvpn:
     https://nordvpn.com/order/?language=en&2year=&coupon=2YDeal2017 - deal
     https://nordvpn.com/order/?annual&coupon=SPRING
     https://nordvpn.com/special/holiday-deal/?utm_source=aff896&utm_medium=affiliate&utm_term=&utm_content=netflix&utm_campaign=off81 another deal
     https://nordvpn.com/tutorials/linux/openvpn/ - Linux instructions
     https://nordvpn.com/tutorials/android/openvpn/ - Android intructions
     https://www.reddit.com/r/NetflixViaVPN/comments/4z5fiq/how_to_get_everything_on_netflix_not_only_the_us/

     https://www.azirevpn.com/ - another VPN worth noting
     https://torguard.net/

     https://www.reddit.com/r/vpnreviews/comments/69f6r0/expressvpn_vs_nordvpn_vspia/ - Reddit disctussion

*** TODO : Render out the sequence
    [[file:~/Projects/Houdini/POPs/n_body_collide_stable_cloud_render_test.hipnc][file:~/Projects/Houdini/POPs/n_body_collide_stable_cloud_render_test.hipnc]]
**** TODO : Set up the render:
***** TODO : fix velocity blur artifacts:
     [[file:~/Screenshots/Screenshot_20170509_012321.png][file:~/Screenshots/Screenshot_20170509_012321.png]]
** 2017-05-10 Wed ffmpeg frames to animation
   ffmpeg -i n_body_collide.%04d.exr -c:v huffyuv out.avi
*** TODO : add a Makefiile
    [[file:~/Projects/CPP/01_hello_SDL/01_hello_SDL.cpp][file:~/Projects/CPP/01_hello_SDL/01_hello_SDL.cpp]]

** 2017-05-11 Thu Xmobar icons
   https://github.com/jaor/xmobar

*** TODO : Send Water Meter data to PWN:   
    SCHEDULED : <2017-05-12 Fri>
    https://mijn.pwn.nl/MijnPwn/Meter/EnteringMeterLevel?opnamenummer=21662773070
    
** 2017-05-12 Fri Bone weights distance
   [[file:~/Projects/Haskell/Junk/00/Main.hs][file:~/Projects/Haskell/Junk/00/Main.hs]]
** 2017-05-13 Sat
   http://www.linguee.nl
   https://nl.wikipedia.org/wiki/Vereenigde_Oostindische_Compagnie
** 2017-05-15 Mon Continue studying SDL2:
   https://github.com/palf/haskell-sdl2-examples
   http://lazyfoo.net/tutorials/SDL/index.php
   https://thebookofshaders.com/03/

   [[file:~/Projects/Haskell/haskell-sdl2-examples/src/lesson02.hs][file:~/Projects/Haskell/haskell-sdl2-examples/src/lesson02.hs]]

*** TODO : Watch some Siraj on Tensorflow:
    https://www.youtube.com/channel/UCWN3xxRkmTPmbKwht9FuE5A
    https://www.youtube.com/watch?v=h3l4qz76JhQ

** 2017-05-16 Tue
   [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Input.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Input.hs]]
*** TODO : refactor Input.hs
    -- |Refactor:
    -- |inpKeyPressed :: Maybe SDL.Scancode
    -- |->
    -- |inpKeyPressed :: Maybe Event
** 2017-05-17 Wed SDL2 Haskell Python Siraj
   Learning Tensorflow with Siraj:
   [[*: Watch some Siraj on Tensorflow:][<@: Watch some Siraj on Tensorflow:]]
   https://www.youtube.com/watch?v=h3l4qz76JhQ
   [[file:~/Projects/Python/tensorflow/Build_a_Neural_Net_in_4_Minutes/Main.py][file:~/Projects/Python/tensorflow/Build_a_Neural_Net_in_4_Minutes/Main.py]]

   saved desktop "SDL2" at:
   /home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/
*** TODO : Load the desktop and continue   
** 2017-05-20 Sat Python Siraj Machine Learning
   https://www.youtube.com/watch?v=AJVP96tAWxw
   https://www.kaggle.com/c/word2vec-nlp-tutorial/details/part-1-for-beginners-bag-of-words
** 2017-05-20 Sat cabal flags
   
   Pass the flags to cabal configure, e.g.:
   cabal configure -f debug
** 2017-05-23 Tue KeyRepeat
   I was unable to complete the Key Press Repeat task.
   I saved a wip copy:
   [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2.wip/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2.wip/Main.hs]]
   I saved a set of last opened bookmarks: last/sdl2_23May2017
   I think that I should proceed and solve the above on the way.
   I guess the new Elite will not have key-hold events for now...
** 2017-05-30 Tue Bitwig
   [ebuild  N     ] app-eselect/eselect-java-0.3.0::gentoo  0 KiB
   [ebuild  N     ] sys-apps/baselayout-java-0.1.0::gentoo  0 KiB
   [ebuild  N     ] dev-java/java-config-2.2.0-r3:2::gentoo  USE="{-test}" PYTHON_TARGETS="python2_7 python3_4 (-python3_5) (-python3_6)" 0 KiB
   [ebuild  N     ] dev-java/icedtea-bin-3.4.0:8::gentoo  USE="alsa cups gtk webstart -doc -examples -headless-awt -multilib -nsplugin -pulseaudio (-selinux) -source" ABI_X86="32 (64) (-x32)" 60,397 KiB
   [ebuild  N     ] virtual/jdk-1.8.0-r3:1.8::gentoo  0 KiB
   [ebuild  N     ] virtual/jre-1.8.0-r1:1.8::gentoo  0 KiB
   [ebuild  N     ] dev-java/icedtea-web-1.6.1-r1::gentoo  USE="-doc -javascript -nsplugin -tagsoup {-test}" 0 KiB
   
*** TODO : Make bitwig studio work with JACK (and see the midi keyboard)   
    https://answers.bitwig.com/questions/8945/jack-not-working
    https://answers.bitwig.com/questions/6675/no-connection-to-jack-audio-or-alsa-in-xubuntu-1404
    https://answers.bitwig.com/questions/1134/how-do-i-correctly-setup-audio-under-linux
** 2017-06-04 Sun
   /home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2.wip/
   /home/madjestic/Projects/Haskell/cuboid-sdl/src/
** 2017-06-05 Mon Python Geo Parser
   [[file:~/Projects/Parser/geoParser.py][file:~/Projects/Parser/geoParser.py]]
   /home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/Boilerplate_01_sdl2/
   [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-sdl2/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-sdl2/Main.hs]] - good example of GLFW->SDL2 transition
   /home/madjestic/Projects/Haskell/sdl2/examples/lazyfoo/ - sdl2 lessons
   [[file:~/Projects/Haskell/sdl2/examples/lazyfoo/Lesson03.hs][file:~/Projects/Haskell/sdl2/examples/lazyfoo/Lesson03.hs]]
   http://lazyfoo.net/SDL_tutorials/lesson01/index2.php - C++ version
   [[file:~/Documents/visualize.jpeg][file:~/Documents/visualize.jpeg]]----

   http://www.sidefx.com/docs/houdini/vex/functions/

   [[file:~/Projects/Houdini/CVEX/Houdini_Files/hip/cvex_pcloud.hipnc][file:~/Projects/Houdini/CVEX/Houdini_Files/hip/cvex_pcloud.hipnc]]
   
*** TODO : add key-callbacks to the SDL2 transition example:   
    [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Boilerplate_01_sdl2/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Boilerplate_01_sdl2/Main.hs]]
    

*** CVEX
http://www.sidefx.com/docs/houdini/vex/functions/

#ifndef VOP_OP
#define VOP_OP
#endif
#ifndef VOP_CVEX
#define VOP_CVEX
#endif

#pragma opname cvex_test
#pragma oplabel "Local Vop Code"
#pragma opmininputs 0
#pragma opmaxinputs 0
//#pragma label   vec3    "Vector 3"
//#pragma hint    "P"     hidden


cvex
cvex_pc_lookup(
    int    maxpoints = 2;    
    float  radius    = 0.1;
    vector P         = { 0, 0, 0 };
    string file      = "defgeo.bgeo";
    export vector N = { 0, 0, 0 };
    )
{
int handle;
int success;
int success1;
int condition_out;
int condition_out1;
int added;
int iter_out;
int handle_out;
vector sum;
vector data;
vector var1_out = {0,0,0};
vector var3_out = {0,0,0};
vector      accum_out = {0,0,0};
vector      diff;
vector      nvec;

handle  = pcopen(file, "P", P, radius, maxpoints, "preload", 1);
//success = pciterate(handle);

    do
    {             
        success = pciterate(handle);
        added = iter_out + 1;
        condition_out = success;
        if (condition_out)
        {
            success1 = pcimport(handle, "P", data);
            var1_out = data;
        }
        sum = var1_out + accum_out;
        condition_out1 = success;
        iter_out = added;
        accum_out = sum;
    }
    while (condition_out1);
    
    diff = P - accum_out;
    nvec = normalize(diff);
    N    = nvec;

//     if (success)
//     {                                  
//     pcimport(handle, "P", data);            
//     var1_out = data;
//     }
//     sum = var1_out + var3_out;
}
** 2017-06-06 Tue
*** TODO : Write out a vertex-cache file from python GeoParser:
   [[file:~/Projects/Parser/geoParser.py][file:~/Projects/Parser/geoParser.py]]
   Python help page explaining how to:
   https://docs.python.org/2/tutorial/inputoutput.html
** 2017-06-07 Wed Houdini Utrech User Group
   - Snow Crystal Growth
     Entagma
     Snow Crystal
     http://www.patarnott.com/pdf/SnowCrystalGrowth.pdf
     [[file:~/Documents/SnowCrystalGrowth.pdf][file:~/Documents/SnowCrystalGrowth.pdf]]
     space colonization
     https://en.wikipedia.org/wiki/Honeycomb_(geometry)


*** TODO : Read up on pcopenlod:
     http://127.0.0.1:48626/vex/functions/pcopenlod - how to set up tree-optimization for a pc look-up
     
** 2017-06-12 Mon Blender Camera tracking
   https://youtu.be/3STqy77jG50
   (look in Downloads folder, there are 2 files:
   - Blender Basic UI
   - Camera Tracking
   
** 2017-06-14 Wed Houdini OpenCL
   [[file:~/Projects/Houdini/OpenCL][file:~/Projects/Houdini/OpenCL]]
** 2017-06-14 Wed
   https://people.maths.ox.ac.uk/gilesm/cuda/new_lectures/lec1.pdf
   https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/get_global_id.html
   http://sa09.idav.ucdavis.edu/docs/SA09-OpenCLOverview.pdf
** 2017-06-22 Thu
   /home/madjestic/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2.ip - hold event seems to work,
   but signal function to support it is not in place.

   It seems that Jekor's yampa-cuboid tutorial may have a clue
   https://youtu.be/T3xXebIr8AM?t=1228
   event <- edge -< pos <= 0
** 2017-06-24 Sat
   https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html
   Iridiscence
** 2017-06-26 Mon Vulkan Mandelbrot Python from Haskell Oanda
   https://renderdoc.org/vulkan-in-30-minutes.html
   https://vulkan-tutorial.com/

   - Got the key-hold event working:
     [[*2017-06-22 Thu][2017-06-22 Thu Previous Attempt to get KeyHold working]]
     [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2/Main.hs]]
     [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Mandelbrot-FRP-io-sdl2]]
   
   - Python from Haskell
     https://john-millikin.com/articles/ride-the-snake/
     [[file:~/Projects/Haskell/Python][file:~/Projects/Haskell/Python]] - calling python process from haskell
    
   - Oanda
     https://github.com/oanda/v20-python-samples
     http://developer.oanda.com/rest-live-v20/sample-code/
     http://developer.oanda.com/rest-live-v20/introduction/
** 2017-06-28 Wed IGAD
   - Selena, Delubas, educational product

   - Nicky, 
     - how did you produce textures?
     - what was difficult with the lighting?
     - houdini project?
     - talent/packaging

   - Jeroen
     - VREE
     - VR gloves?
     - robo recall (VR game)

   - Jeroen de Haas
     - Interstellar rift

   - Jeroen van Dion
     Game engine programming + music + animation + writing

   - Tizion Keboon
     - Traditional 2D hand-drawn animation

   - Joren van Leeuwen
     - quite impressive fight-scene animation "Bar Fight"
     - good attention to detail
     - note-taking

   - Jeroen
     - Rigger (tilting platforms, adjusting rigs).
       
   - Alena Anikina
     - Jand-painted environmetns
     - 3D Coat (p-tex).
     - Discworld
** 2017-07-04 Tue Russian Fairytales VEX Zoom in out images
   http://www.kostyor.ru/tales/tale89.html
   [[file:~/Desktop/gaussian.vfl][file:~/Desktop/gaussian.vfl]]
   [[file:~/Desktop/packing.vfl][file:~/Desktop/packing.vfl]]
   [[file:~/Projects/Houdini/POPs/acceleration.vfl][file:~/Projects/Houdini/POPs/acceleration.vfl]]
   [[file:~/Projects/Houdini/POPs/collision.vfl][file:~/Projects/Houdini/POPs/collision.vfl]]
   [[file:~/Desktop/circle_packing.hipnc][file:~/Desktop/circle_packing.hipnc]]

   ;;; Usage:
   ;; * To manupulate a image under cursor.
   ;;
   ;;  M-x imagex-global-sticky-mode
   ;;
   ;; * C-c + / C-c -: Zoom in/out image.
   ;; * C-c M-m: Adjust image to current frame size.
   ;; * C-c C-x C-s: Save current image.
   ;;
   ;; * Adjusted image when open image file.
   ;;
   ;;  M-x imagex-auto-adjust-mode

** 2017-07-05 Wed Sector
   Sector - a tool for 3D mesh (re)generation.
** 2017-07-06 Thu Machine Learning Python
   https://github.com/rasbt/python-machine-learning-book/tree/master/code/ch01
   [[file:~/Documents/Python_Machine_Learning_proglib.pdf][file:~/Documents/Python_Machine_Learning_proglib.pdf]]
   [[file:~/Documents/DeepLearningBook.pdf][file:~/Documents/DeepLearningBook.pdf]]
   [[file:~/Documents/Hands_On_Machine_Learning_Scikit_Tensorflow.pdf][file:~/Documents/Hands_On_Machine_Learning_Scikit_Tensorflow.pdf]]

** 2017-07-06 Thu Machine Learning
   Ironically, abstract and formal tasks that are among the most diﬃcult mental
   undertakings for a human being are among the easiest for a computer. Computers
   have long been able to defeat even the best human chess player, but are only
   recently matching some of the abilities of average human beings to recognize objects
   or speech.
   [[file:~/Documents/DeepLearningBook.pdf][(DeepLearningBook)]]

   When designing features or algorithms for learning features, our goal is usually
   to separate the factors of variation that explain the observed data.
   
** 2017-07-08 Sat
   [[file:~/Desktop/flip_test_01.hipnc][file:~/Desktop/flip_test_01.hipnc]] corona splash, 8x8 meters.
   I should try a 10x10cm scale or so, see if that works.
   [[file:~/Desktop/flip_test_02.hipnc][file:~/Desktop/flip_test_02.hipnc]]
** 2017-07-09 Sun
   - DLP
     1.2.1
     The Many Names and Changing Fortunes of Neural Net-
     works

   - It is worth noting that the eﬀort to understand how the brain works on
     an algorithmic level is alive and well. p.17

   - 
** 2017-07-13 Thu Snowflake
   [[*2017-06-07 Wed Houdini Utrech User Group][@>2017-06-07 Wed Houdini Utrech User Group]]
   [[file:~/Documents/SnowCrystalGrowth.pdf][file:~/Documents/SnowCrystalGrowth.pdf]]
   2 stages:
   1) Determine receptive sites.
      - ice
      - neighbout ice
   2) Values of the cells are: values of receptive sites + constant + diffusion term.
      - diffusion term = local average
  
   0 <= gamma <= 1.0  - added constant
   0 <= \beta <= 0.95 - background level
   
** 2017-07-24 Mon Elfeed rss
   load-rss
   C-u G - scoped update (somehowe `g` does not have any effect)
** 2017-07-25 Tue CVEX Snowflake Point SOP
*** TODO : rewrite the examples using per-point CVEX, 
    rather than detail (run once).  At the moment the algorithm
    is using a single core.  The expectation is that using per point
    operation may lead to greater core utilization.
    
   [[file:~/Desktop/cvex_snowflake_point_group_sop.vfl][file:~/Desktop/cvex_snowflake_point_group_sop.vfl]]
   [[file:~/Desktop/cvex_snowflake_point_sop.vfl][file:~/Desktop/cvex_snowflake_point_sop.vfl]]
   [[file:~/Desktop/snowflake.hipnc][file:~/Desktop/snowflake.hipnc]]

** 2017-07-27 Thu B1
   /home/madjestic/Projects/b1_fix/b1/src/B1/Data/Price/
   QUERY syntax has changed:
   - New:
   http://www.google.com/finance/historical?q=NASDAQ%3AGOOG&ei=w0F4WbiKLtSCUYytjoAB&output=csv
   http://www.google.com/finance/historical?q=NYSE:BAC&ei=7u1tUojBIYHKkwPTHw
   - Old:
   http://www.google.com/finance/historical?output=csv&q=RUB&startdate=07/27/15&enddate=07/27/17

   - Shortened down to:
   http://www.google.com/finance/historical?q=NASDAQ%3AGOOG
   http://www.google.com/finance/historical?q=NYSE:BAC

   http://www.google.com/finance/historical?output=csv&q=RUB

   The history of intellectual growth and discovery clearly demonstrates the need for unfettered
   freedom, the right to think the unthinkable, discuss the unmentionable, and challenge the 
   unchallengeable. To curtail free expression strikes twice at intellectual freedom, for 
   whoever deprives another of the right to state unpopular views necessarily also deprives 
   others of the right to listen to those views.

** 2017-07-28 Fri Clouds
   Andrew's cloud talk:
   - P.H.Ritchers "The beauty of fractals"
   - Albert Bierstadt - landscape/cloudscape artist
   - reprojection?
** 2017-08-01 Tue
   https://www.google.com/finance/historical?q=NASDAQ:GOOG&startdate=Aug+3+2016&enddate=Aug+22+2017
** 2017-08-03 Thu Left-wing Socialistic totalitarian regime:
   *everbody stands for "nearly total majority", where an exception is
   negligibly small.

   Ideal socialism is possible when the society is more or less 
   homogenous in terms of quality of individuals, e.g. the quality of life, expectations,
   and early life conditions ("everybody is equal").
   
   Ideal socialistic system consists of a society genuinely, honestly 
   accepting the status-quo, using transparency as a natural tool, 
   like a nervous system of our body 
   ("total consentual transparency, "there's nothing to hide").

   Such society shares more or less similar set of values and idea of 
   "happiness", hence everybody naturally speeks what is already socially accepted. 
   Since all expressions are more or less alike, expression by speech
   is non-disturbing and serves to share ideologically-friendly ideas,
   there's no need for censorship ("freedom of speach").

   If such agreement between everybody is true, then ths society is
   socialistic in ideal sense.  If, however, that is not true and the
   conformity to "be normal" is enforced through repression machine,
   then the unfair society will inevitably have to increase the use of
   repressions, which results in a totalitarian socialistic society.

** 2017-08-04 Fri Comparative Religion
   http://bit.ly/2vsOV2t Элиаде, Мирча
   https://en.wikipedia.org/wiki/Mircea_Eliade
   
** 2017-08-06 Sun Enery Prices
   - Russia (Moscow) Kw/h (EURO per Kw/h):
     0.07 
   
   - NL 
     ~ 0.17630
     420EURO per year 2461 Kw/h
     0.17

   - Rig:
     24 GTX nVidia ~24K EURO
     ~700 MH ~ 1300$
** 2017-08-09 Wed Mon geoParser Python
   [[file:~/Projects/Parser/geoParser.py][file:~/Projects/Parser/geoParser.py]]
   [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Read_Model-FRP-io-sdl2/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Read_Model-FRP-io-sdl2/Main.hs]]
   
   The problem is that a bgeo is not a well-formatted json file, it is non-canonical
   and improved for serialization reasons.  It's hard for me to both
   lear parsing and making sure that it's well-formatted, hence I resort
   to an alternative: parse a necessary chunk of bgeo and later use Haskell
   to simply read in the array.
   [[/home/madjestic/Projects/Haskell/Parser/Aeson/Main.hs]]
do
   I stopped here:
   https://github.com/madjestic/nu/blob/master/Projects/Haskell/Parser/Parsec/haskell-parsec-basics/Main.hs
   This illustrates a basice "parser while consuming" parser.  It's rather dull, but seems to work.  God knows how that thing needs to change
   if it needs to support varying fields in geo file, probably some godaweful mess of GADT.

*** DONE : Put it all together
    [[file:~/Projects/Parser/geoParser.py][file:~/Projects/Parser/geoParser.py]]
    [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Read_Model-FRP-io-sdl2/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Read_Model-FRP-io-sdl2/Main.hs]]
    [[/home/madjestic/Projects/Haskell/Parser/Aeson/Main.hs]]
    https://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file
    [[file:~/Projects/Parser/Parser(Haskell)/Haskell_Parsec_Basics][file:~/Projects/Parser/Parser(Haskell)/Haskell_Parsec_Basics]] - some interesting results

    Result:
    [[file:~/Projects/Parser/PGeoParserAeson.hs][file:~/Projects/Parser/PGeoParserAeson.hs]]
    [[*2017-08-24 Thu Adding a Geo Parser example with Aeson][<@2017-08-24 Thu Adding a Geo Parser example with Aeson]]
** 2017-08-16 Wed Asgard
   Ни́фльхе́йм
   Хвергельмир
   Ginnungagap — первичный хаос

   [[file:~/Pictures/Yggdrasil.jpg][file:~/Pictures/Yggdrasil.jpg]]

   1. Asgard, the home of the Æsir ruled by the god Odin, Freya, etc.
   2. Álfheimr/Ljósálfheimr, the home of the Light elves or "Ljósálfar"
   3. Niðavellir/Svartálfaheimr, the home of the Dwarves, who are also synonymous with the Dark elves "Dökkálfar" and Black elves "Svartálfar"
   4. Midgard (Earth), the home of humans
   5. Jötunheimr/Útgarðr, the home of the Jötnar (Giants)
   6. Vanaheimr, the home of the Vanir
   7. Niflheim, a world of ice and snow
   8. Muspelheim, a world of fire and lava and home of the Jötunn Surtr
   9. Hel(heimr), the home of the dishonorable dead sometimes synonymous with or located within Niflheim and ruled by the goddess Hel
** 2017-08-20 Sun Writing a Python JSON file.
   [[*: Put it all together][<@: Put it all together]]
   ~/.wine/drive_c/Program Files (x86)/Grinding Gear Games/Path of Exile
   [[file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics][file:~/Projects/Haskell/Parser/Parsec/haskell-parsec-basics]]
   /home/madjestic/Projects/Parser/Parser(Haskell)/Haskell_Parsec_Basics/haskell-parsec-basics/Bar/Main.hs
** 2017-08-23 Wed Haskell Parser
   [[file:~/Projects/Parser/PGeoParserAeson.hs][file:~/Projects/Parser/PGeoParserAeson.hs]]

** 2017-08-24 Thu Adding a Geo Parser example with Aeson
   [[file:~/Projects/Parser/PGeoParserAeson.hs][file:~/Projects/Parser/PGeoParserAeson.hs]]
** 2017-08-27 Sun refactoring 
   Geo :: Transform Position Normal Color Time

   draw :: Geo -> IO ()

   -- overwrites Position
   setPos :: Geo -> Position -> Geo

   -- overwrites Normal
   setNormal :: Geo -> Normal -> Geo

   -- overwrites Normal if supplied, or adds a default Normal
   addNormal :: Geo -> Maybe Normal -> Geo

   -- overwrites/adds Color
   setColor ...

   defaultGeo :: Geo

   newGeo :: 
   -> Maybe Position
   -> Maybe Normal
   -> Maybe Color
   -> Maybe Transform
   -> Maybe Time
   -> Geo

   -- Possible TypeClass usage:
   -- e.g.:
   Typeclass initGeo =
    
     initGeo :: Shape -> Geo
       Square ((x,y) z)  -> Position -- a function that takes Square ((x,y) z)
                                     -- and outputs a set of Vertex Positions
       newGeo :: Nothing -> Position -> Nothing -> Nothing -> Geo
       return newGeo
    
     initGeo :: Shape -> Color -> Geo
       Square ((x,y) z)  -> Position
       newGeo :: Nothing -> Position -> Color -> Nothing -> Geo

   -- OTOH: Fuck it for now, let's keep it simple

** 2017-08-27 Sun TypeClasses varying number and type of arguments
   [[file:~/Projects/Haskell/Gems/typeclass_variable_number_of_arguments/Main.hs][file:~/Projects/Haskell/Gems/typeclass_variable_number_of_arguments/Main.hs]]
** 2017-09-01 Fri Parser NGL
   [[file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Read_Model-FRP-io-sdl2/Main.hs][file:~/Projects/Haskell/Haskell-OpenGL-Tutorial/Read_Model-FRP-io-sdl2/Main.hs]]
   - works:
     deserializatoin via python
     parsing via haskell Aeson
     vizualisation via NGL
*** TODO : add uv, normals Houdini -> NGL
**** TODO : add indices (point order)
** 2017-09-03 Sun Binary JSON
   /home/madjestic/houdini/houdini/public/binary_json/
   в а хдк набор заголовков UT_JSON*.h
   [[file:~/houdini/houdini/public/binary_json/README][file:~/houdini/houdini/public/binary_json/README]]
** 2017-09-04 Mon Godika
   refactor so the Geo is read only once and passed to initResources as an argument
** 2017-09-05 Tue
   [[file:~/Downloads/Game.of.Thrones.S06E06.HDTV.x264-KILLERS%5Bettv%5D/Game.of.Thrones.S06E06.HDTV.x264-KILLERS%5Bettv%5D.mkv][file:~/Downloads/Game.of.Thrones.S06E06.HDTV.x264-KILLERS{ettv}/Game.of.Thrones.S06E06.HDTV.x264-KILLERS{ettv}.mkv]] (~ middle, when she adds the poison)
