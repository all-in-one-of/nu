#include "math.h"
#include <sb7.h>

class test_app : public sb7::application
{
	void init()
	{
		static const char title[] = "OpenGL SuperBible - Single Point";

		sb7::application::init();

		memcpy(info.title, title, sizeof(title));
	}

	

	virtual void startup()
	{
		static const char * vs_source[] =
			{
				"#version 420 core                                                          \n"
				"                                                                           \n"
				"out vec4 vs_color; \n"
				"void main(void)                                                            \n"
				"{                                                                          \n"
				"    const vec4 vertices[] = vec4[](vec4( 0.25, -0.25, 0.5, 1.0),           \n"
				"                                   vec4(-0.25, -0.25, 0.5, 1.0),           \n"
				"                                   vec4( 0.25,  0.25, 0.5, 1.0));          \n"
				"    const vec4 colors[] = vec4[](vec4(1.0, 0.0, 0.0, 1.0),                 \n"
				"                                 vec4(0.0, 1.0, 0.0, 1.0),                 \n"
				"                                 vec4(0.0, 0.0, 1.0, 1.0));                \n"
				"                                                                           \n"
				"    gl_Position = vertices[gl_VertexID];                                   \n"
				"    vs_color = colors[gl_VertexID];                                        \n"
				"}                                                                          \n"
			};

		static const char * fs_source[] =
			{
				"#version 420 core                                                          \n"
				"                                                                           \n"
				"in vec4 vs_color;                                                          \n"
				"out vec4 color;                                                            \n"
				"                                                                           \n"
				"void main(void)                                                            \n"
				"{                                                                          \n"
				"    color = vs_color;                                                      \n"
				"}                                                                          \n"
			};
		
		// static const char * vs_source[] =
		// 	{
		// 		"#version 450 core                                                   \n"
		// 		"out vec4 vs_color; \n"
		// 		"void main(void)                                                     \n"
		// 		"{                                                                   \n"
		// 		"    const vec4 vertices[3] = vec4[3](vec4( 0.25, -0.25, 0.5, 1.0),  \n"
		// 		"                                     vec4(-0.25, -0.25, 0.5, 1.0),  \n"
		// 		"                                     vec4( 0.25,  0.25, 0.5, 1.0)); \n"
		// 		"                                                                    \n"
		// 		"    const vec4 colors[] = vec4[3](vec4(1.0, 0.0, 0.0, 1.0),         \n"
		// 																	    "vec4(0.0, 1.0, 0.0, 1.0),         \n"
		// 																	    "vec4(0.0, 0.0, 1.0, 1.0));        \n"
		// 		"                                                                    \n"
		// 		"gl_Position = vertices[gl_VertexID];                                \n"
		// 		"                                                                    \n"
		// 		"vs_color = colors[gl_VertexID];                                     \n"
		// 		"}                                                                   \n"
		// 	};

		// static const char * fs_source[] =
		// 	{
		// 		"#version 450 core                                                   \n"
		// 		"                                                                    \n"
		// 		"in vec4 vs_color; \n"
		// 		"out vec4 color;                                                     \n"
		// 		"                                                                    \n"
		// 		"void main(void)                                                     \n"
		// 		"{                                                                   \n"
		// 		"    color = vs_color;                                                     \n"
		// 		"}                                                                   \n"
		// 	};
				
		program = glCreateProgram();
		
		GLuint vs = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(vs, 1, vs_source, NULL);
		glCompileShader(vs);

		GLuint fs = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(fs, 1, fs_source, NULL);
		glCompileShader(fs);
		

		glAttachShader(program, vs);
		glAttachShader(program, fs);

		glLinkProgram(program);

		glDeleteShader(vs);
		glDeleteShader(fs);

		glGenVertexArrays(1, &vao);
		glBindVertexArray(vao);

		//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	}

	virtual void render(double currentTime)
	{
		//static const GLfloat color[] = { 1.0f, 0.0f, 0.0f, 1.0f };
		const GLfloat color[] = { (float)sin(currentTime) * 0.5f + 0.5f,
															(float)cos(currentTime) * 0.5f + 0.5f,
															0.0f, 1.0f};
		glClearBufferfv(GL_COLOR, 0, color);

		glUseProgram(program);

		GLfloat attrib[] = { (float)sin(currentTime) * 0.5f,
		                     (float)cos(currentTime) * 0.6f,
		                     0.0f, 0.0f };

		GLfloat attrib1[] = { (float)sin(currentTime) * 0.7f,
		                      (float)cos(currentTime) * 0.8f,
		                      (float)sin(currentTime) * 0.9f,
													0.0f };
		// Update the value of input attribute 0
		glVertexAttrib4fv(0, attrib);
		glVertexAttrib4fv(1, attrib1);
		
		//glPointSize(20.0f);
		glDrawArrays(GL_PATCHES, 0, 3);
	}

	virtual void shutdown()
	{
		glDeleteVertexArrays(1, &vao);
		glDeleteProgram(program);
	}

private:
	GLuint          program;
	GLuint          vao;
};

	

DECLARE_MAIN(test_app)
